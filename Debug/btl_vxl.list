
btl_vxl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000094  08004ca8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004ca8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cbe  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd3  00000000  00000000  00035d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e54  00000000  00000000  0003a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001149f  00000000  00000000  000543e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b10b  00000000  00000000  00065883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f098e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000f09e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b70 	.word	0x08004b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004b70 	.word	0x08004b70

0800014c <isButtonPress>:
int keybuffer[NUM_OF_BUTTONS];
int counter_Button[NUM_OF_BUTTONS];
int flagforLongPress[NUM_OF_BUTTONS];
int flagforPress[NUM_OF_BUTTONS];

int isButtonPress(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (flagforPress[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
		flagforPress[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000120 	.word	0x20000120

08000180 <isButtonLongPress>:

int isButtonLongPress(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	return (flagforLongPress[index] == 1);
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <isButtonLongPress+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	bf0c      	ite	eq
 8000194:	2301      	moveq	r3, #1
 8000196:	2300      	movne	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	200001a8 	.word	0x200001a8

080001a8 <button_read>:

void button_read(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e08c      	b.n	80002ce <button_read+0x126>
		key1[i] = key2[i];
 80001b4:	4a4a      	ldr	r2, [pc, #296]	; (80002e0 <button_read+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001bc:	4949      	ldr	r1, [pc, #292]	; (80002e4 <button_read+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <button_read+0x36>
			key2[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001ca:	2101      	movs	r1, #1
 80001cc:	4846      	ldr	r0, [pc, #280]	; (80002e8 <button_read+0x140>)
 80001ce:	f001 ff83 	bl	80020d8 <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4619      	mov	r1, r3
 80001d6:	4a42      	ldr	r2, [pc, #264]	; (80002e0 <button_read+0x138>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 1){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d109      	bne.n	80001f8 <button_read+0x50>
			key2[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e4:	2102      	movs	r1, #2
 80001e6:	4840      	ldr	r0, [pc, #256]	; (80002e8 <button_read+0x140>)
 80001e8:	f001 ff76 	bl	80020d8 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a3b      	ldr	r2, [pc, #236]	; (80002e0 <button_read+0x138>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 2){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d109      	bne.n	8000212 <button_read+0x6a>
			key2[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fe:	2110      	movs	r1, #16
 8000200:	4839      	ldr	r0, [pc, #228]	; (80002e8 <button_read+0x140>)
 8000202:	f001 ff69 	bl	80020d8 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a35      	ldr	r2, [pc, #212]	; (80002e0 <button_read+0x138>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (i == 3){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d109      	bne.n	800022c <button_read+0x84>
			key2[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000218:	2101      	movs	r1, #1
 800021a:	4834      	ldr	r0, [pc, #208]	; (80002ec <button_read+0x144>)
 800021c:	f001 ff5c 	bl	80020d8 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <button_read+0x138>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (key2[i] == key1[i]){
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <button_read+0x138>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492b      	ldr	r1, [pc, #172]	; (80002e4 <button_read+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d143      	bne.n	80002c8 <button_read+0x120>
				if (keybuffer[i] != key2[i]){
 8000240:	4a2b      	ldr	r2, [pc, #172]	; (80002f0 <button_read+0x148>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4925      	ldr	r1, [pc, #148]	; (80002e0 <button_read+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d01e      	beq.n	8000292 <button_read+0xea>
					keybuffer[i] = key2[i];
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <button_read+0x138>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4924      	ldr	r1, [pc, #144]	; (80002f0 <button_read+0x148>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (keybuffer[i] == BUTTON_PRESSED){
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <button_read+0x148>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d105      	bne.n	800027c <button_read+0xd4>
						flagforPress[i] = 1;
 8000270:	4a20      	ldr	r2, [pc, #128]	; (80002f4 <button_read+0x14c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800027a:	e025      	b.n	80002c8 <button_read+0x120>
					} else {
						flagforLongPress[i] = 0;
 800027c:	4a1e      	ldr	r2, [pc, #120]	; (80002f8 <button_read+0x150>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2100      	movs	r1, #0
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counter_Button[i] = 0;
 8000286:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <button_read+0x154>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2100      	movs	r1, #0
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e01a      	b.n	80002c8 <button_read+0x120>
					}
				} else {
					if (keybuffer[i] == BUTTON_PRESSED){
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <button_read+0x148>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d114      	bne.n	80002c8 <button_read+0x120>
						if (counter_Button[i] < TIME_FOR_LONGPRESS ){
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <button_read+0x154>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	2b95      	cmp	r3, #149	; 0x95
 80002a8:	dc09      	bgt.n	80002be <button_read+0x116>
							counter_Button[i]++;
 80002aa:	4a14      	ldr	r2, [pc, #80]	; (80002fc <button_read+0x154>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	4911      	ldr	r1, [pc, #68]	; (80002fc <button_read+0x154>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002bc:	e004      	b.n	80002c8 <button_read+0x120>
						} else {
							flagforLongPress[i] = 1;
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <button_read+0x150>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2101      	movs	r1, #1
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	f77f af6f 	ble.w	80001b4 <button_read+0xc>
						}
					}
				}
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000244 	.word	0x20000244
 80002e4:	20000198 	.word	0x20000198
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	20000140 	.word	0x20000140
 80002f4:	20000120 	.word	0x20000120
 80002f8:	200001a8 	.word	0x200001a8
 80002fc:	20000130 	.word	0x20000130

08000300 <buzzer>:
 *  Created on: Dec 8, 2022
 *      Author: Admin
 */

#include "buzzer.h"
void buzzer(int freq){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <buzzer+0x1c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000150 	.word	0x20000150

08000320 <fsm_auto_run>:


#include "fsm_auto.h"


void fsm_auto_run(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	switch (status){
 8000324:	4b91      	ldr	r3, [pc, #580]	; (800056c <fsm_auto_run+0x24c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	f200 8193 	bhi.w	8000654 <fsm_auto_run+0x334>
 800032e:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <fsm_auto_run+0x14>)
 8000330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000334:	08000349 	.word	0x08000349
 8000338:	08000379 	.word	0x08000379
 800033c:	0800041d 	.word	0x0800041d
 8000340:	080004c9 	.word	0x080004c9
 8000344:	0800059d 	.word	0x0800059d
		case INIT:
			setTimer1(green_time_2 * 1000);
 8000348:	4b89      	ldr	r3, [pc, #548]	; (8000570 <fsm_auto_run+0x250>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f88b 	bl	8001470 <setTimer1>
			setTimer2(10);
 800035a:	200a      	movs	r0, #10
 800035c:	f001 f8a4 	bl	80014a8 <setTimer2>
			status = RED1_GREEN2;
 8000360:	4b82      	ldr	r3, [pc, #520]	; (800056c <fsm_auto_run+0x24c>)
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
			val_info1= red_time_1;
 8000366:	4b83      	ldr	r3, [pc, #524]	; (8000574 <fsm_auto_run+0x254>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a83      	ldr	r2, [pc, #524]	; (8000578 <fsm_auto_run+0x258>)
 800036c:	6013      	str	r3, [r2, #0]
			val_info2=green_time_2;
 800036e:	4b80      	ldr	r3, [pc, #512]	; (8000570 <fsm_auto_run+0x250>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a82      	ldr	r2, [pc, #520]	; (800057c <fsm_auto_run+0x25c>)
 8000374:	6013      	str	r3, [r2, #0]

			break;
 8000376:	e16d      	b.n	8000654 <fsm_auto_run+0x334>

		case RED1_GREEN2:
			setLEDRED1();
 8000378:	f000 fda8 	bl	8000ecc <setLEDRED1>
			setLEDGREEN2();
 800037c:	f000 fe02 	bl	8000f84 <setLEDGREEN2>

			if (timer1_flag == 1){
 8000380:	4b7f      	ldr	r3, [pc, #508]	; (8000580 <fsm_auto_run+0x260>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d112      	bne.n	80003ae <fsm_auto_run+0x8e>
				setTimer1(yellow_time_2 * 1000);
 8000388:	4b7e      	ldr	r3, [pc, #504]	; (8000584 <fsm_auto_run+0x264>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f001 f86b 	bl	8001470 <setTimer1>
				setTimer2(10);
 800039a:	200a      	movs	r0, #10
 800039c:	f001 f884 	bl	80014a8 <setTimer2>
				status = RED1_YELLOW2;
 80003a0:	4b72      	ldr	r3, [pc, #456]	; (800056c <fsm_auto_run+0x24c>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	601a      	str	r2, [r3, #0]
				val_info2=yellow_time_2;
 80003a6:	4b77      	ldr	r3, [pc, #476]	; (8000584 <fsm_auto_run+0x264>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a74      	ldr	r2, [pc, #464]	; (800057c <fsm_auto_run+0x25c>)
 80003ac:	6013      	str	r3, [r2, #0]
			}

			if (timer2_flag == 1){
 80003ae:	4b76      	ldr	r3, [pc, #472]	; (8000588 <fsm_auto_run+0x268>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d113      	bne.n	80003de <fsm_auto_run+0xbe>
				send_info(0);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f001 fa86 	bl	80018c8 <send_info>
				send_info(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f001 fa83 	bl	80018c8 <send_info>
				setTimer2(1000);
 80003c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c6:	f001 f86f 	bl	80014a8 <setTimer2>
				val_info1--;
 80003ca:	4b6b      	ldr	r3, [pc, #428]	; (8000578 <fsm_auto_run+0x258>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a69      	ldr	r2, [pc, #420]	; (8000578 <fsm_auto_run+0x258>)
 80003d2:	6013      	str	r3, [r2, #0]
				val_info2--;
 80003d4:	4b69      	ldr	r3, [pc, #420]	; (800057c <fsm_auto_run+0x25c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a68      	ldr	r2, [pc, #416]	; (800057c <fsm_auto_run+0x25c>)
 80003dc:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff feb4 	bl	800014c <isButtonPress>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 812d 	beq.w	8000646 <fsm_auto_run+0x326>
				setTimer2(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f001 f85b 	bl	80014a8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 80003f2:	4b66      	ldr	r3, [pc, #408]	; (800058c <fsm_auto_run+0x26c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003fa:	fb02 f303 	mul.w	r3, r2, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f836 	bl	8001470 <setTimer1>
				val_info1=time_man_mode;
 8000404:	4b61      	ldr	r3, [pc, #388]	; (800058c <fsm_auto_run+0x26c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a5b      	ldr	r2, [pc, #364]	; (8000578 <fsm_auto_run+0x258>)
 800040a:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800040c:	4b5f      	ldr	r3, [pc, #380]	; (800058c <fsm_auto_run+0x26c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a5a      	ldr	r2, [pc, #360]	; (800057c <fsm_auto_run+0x25c>)
 8000412:	6013      	str	r3, [r2, #0]
				status = MAN_RED1_GREEN2;
 8000414:	4b55      	ldr	r3, [pc, #340]	; (800056c <fsm_auto_run+0x24c>)
 8000416:	2214      	movs	r2, #20
 8000418:	601a      	str	r2, [r3, #0]
			}
			break;
 800041a:	e114      	b.n	8000646 <fsm_auto_run+0x326>

		case RED1_YELLOW2:
			setLEDRED1();
 800041c:	f000 fd56 	bl	8000ecc <setLEDRED1>
			setLEDYELLOW2();
 8000420:	f000 fda0 	bl	8000f64 <setLEDYELLOW2>

			if (timer1_flag == 1){
 8000424:	4b56      	ldr	r3, [pc, #344]	; (8000580 <fsm_auto_run+0x260>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d116      	bne.n	800045a <fsm_auto_run+0x13a>
				setTimer1(green_time_1 * 1000);
 800042c:	4b58      	ldr	r3, [pc, #352]	; (8000590 <fsm_auto_run+0x270>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f001 f819 	bl	8001470 <setTimer1>
				setTimer2(10);
 800043e:	200a      	movs	r0, #10
 8000440:	f001 f832 	bl	80014a8 <setTimer2>
				val_info1=green_time_1;
 8000444:	4b52      	ldr	r3, [pc, #328]	; (8000590 <fsm_auto_run+0x270>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a4b      	ldr	r2, [pc, #300]	; (8000578 <fsm_auto_run+0x258>)
 800044a:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2;
 800044c:	4b51      	ldr	r3, [pc, #324]	; (8000594 <fsm_auto_run+0x274>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a4a      	ldr	r2, [pc, #296]	; (800057c <fsm_auto_run+0x25c>)
 8000452:	6013      	str	r3, [r2, #0]
				status = GREEN1_RED2;
 8000454:	4b45      	ldr	r3, [pc, #276]	; (800056c <fsm_auto_run+0x24c>)
 8000456:	2203      	movs	r2, #3
 8000458:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 800045a:	4b4b      	ldr	r3, [pc, #300]	; (8000588 <fsm_auto_run+0x268>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d113      	bne.n	800048a <fsm_auto_run+0x16a>
				send_info(0);
 8000462:	2000      	movs	r0, #0
 8000464:	f001 fa30 	bl	80018c8 <send_info>
				send_info(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f001 fa2d 	bl	80018c8 <send_info>
				setTimer2(1000);
 800046e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000472:	f001 f819 	bl	80014a8 <setTimer2>
				val_info1--;
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <fsm_auto_run+0x258>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a3e      	ldr	r2, [pc, #248]	; (8000578 <fsm_auto_run+0x258>)
 800047e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000480:	4b3e      	ldr	r3, [pc, #248]	; (800057c <fsm_auto_run+0x25c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a3d      	ldr	r2, [pc, #244]	; (800057c <fsm_auto_run+0x25c>)
 8000488:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff fe5e 	bl	800014c <isButtonPress>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 80d9 	beq.w	800064a <fsm_auto_run+0x32a>
				setTimer2(10);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 f805 	bl	80014a8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 800049e:	4b3b      	ldr	r3, [pc, #236]	; (800058c <fsm_auto_run+0x26c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 ffe0 	bl	8001470 <setTimer1>
				val_info1=time_man_mode;
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <fsm_auto_run+0x26c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a30      	ldr	r2, [pc, #192]	; (8000578 <fsm_auto_run+0x258>)
 80004b6:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80004b8:	4b34      	ldr	r3, [pc, #208]	; (800058c <fsm_auto_run+0x26c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	; (800057c <fsm_auto_run+0x25c>)
 80004be:	6013      	str	r3, [r2, #0]
				status = MAN_RED1_YELLOW2;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <fsm_auto_run+0x24c>)
 80004c2:	2215      	movs	r2, #21
 80004c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80004c6:	e0c0      	b.n	800064a <fsm_auto_run+0x32a>

		case GREEN1_RED2:
			setLEDRED2();
 80004c8:	f000 fd3c 	bl	8000f44 <setLEDRED2>
			setLEDGREEN1();
 80004cc:	f000 fd26 	bl	8000f1c <setLEDGREEN1>

			if (timer1_flag == 1){
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <fsm_auto_run+0x260>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d112      	bne.n	80004fe <fsm_auto_run+0x1de>
				setTimer1(yellow_time_1 * 1000);
 80004d8:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <fsm_auto_run+0x278>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ffc3 	bl	8001470 <setTimer1>
				setTimer2(10);
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 ffdc 	bl	80014a8 <setTimer2>
				val_info1=yellow_time_1;
 80004f0:	4b29      	ldr	r3, [pc, #164]	; (8000598 <fsm_auto_run+0x278>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a20      	ldr	r2, [pc, #128]	; (8000578 <fsm_auto_run+0x258>)
 80004f6:	6013      	str	r3, [r2, #0]
				status = YELLOW1_RED2;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <fsm_auto_run+0x24c>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <fsm_auto_run+0x268>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d113      	bne.n	800052e <fsm_auto_run+0x20e>
				send_info(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f001 f9de 	bl	80018c8 <send_info>
				send_info(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f9db 	bl	80018c8 <send_info>
				setTimer2(1000);
 8000512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000516:	f000 ffc7 	bl	80014a8 <setTimer2>
				val_info1--;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <fsm_auto_run+0x258>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <fsm_auto_run+0x258>)
 8000522:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <fsm_auto_run+0x25c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <fsm_auto_run+0x25c>)
 800052c:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff fe0c 	bl	800014c <isButtonPress>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 8089 	beq.w	800064e <fsm_auto_run+0x32e>
				setTimer2(10);
 800053c:	200a      	movs	r0, #10
 800053e:	f000 ffb3 	bl	80014a8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <fsm_auto_run+0x26c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ff8e 	bl	8001470 <setTimer1>
				val_info1=time_man_mode;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <fsm_auto_run+0x26c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <fsm_auto_run+0x258>)
 800055a:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <fsm_auto_run+0x26c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <fsm_auto_run+0x25c>)
 8000562:	6013      	str	r3, [r2, #0]
				status = MAN_GREEN1_RED2;
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <fsm_auto_run+0x24c>)
 8000566:	2216      	movs	r2, #22
 8000568:	601a      	str	r2, [r3, #0]
			}
			break;
 800056a:	e070      	b.n	800064e <fsm_auto_run+0x32e>
 800056c:	200000b8 	.word	0x200000b8
 8000570:	20000010 	.word	0x20000010
 8000574:	20000000 	.word	0x20000000
 8000578:	2000001c 	.word	0x2000001c
 800057c:	20000020 	.word	0x20000020
 8000580:	200000f8 	.word	0x200000f8
 8000584:	20000014 	.word	0x20000014
 8000588:	20000100 	.word	0x20000100
 800058c:	20000018 	.word	0x20000018
 8000590:	20000004 	.word	0x20000004
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000008 	.word	0x20000008

		case YELLOW1_RED2:
			setLEDRED2();
 800059c:	f000 fcd2 	bl	8000f44 <setLEDRED2>
			setLEDYELLOW1();
 80005a0:	f000 fca8 	bl	8000ef4 <setLEDYELLOW1>

			if (timer1_flag == 1){
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <fsm_auto_run+0x338>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d116      	bne.n	80005da <fsm_auto_run+0x2ba>
				setTimer1(green_time_2 * 1000);
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <fsm_auto_run+0x33c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff59 	bl	8001470 <setTimer1>
				setTimer2(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f000 ff72 	bl	80014a8 <setTimer2>
				val_info1=red_time_1;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <fsm_auto_run+0x340>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <fsm_auto_run+0x344>)
 80005ca:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <fsm_auto_run+0x33c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <fsm_auto_run+0x348>)
 80005d2:	6013      	str	r3, [r2, #0]
				status = RED1_GREEN2;
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <fsm_auto_run+0x34c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
			}
			if (timer2_flag == 1){
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <fsm_auto_run+0x350>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d113      	bne.n	800060a <fsm_auto_run+0x2ea>
				send_info(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f970 	bl	80018c8 <send_info>
				send_info(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 f96d 	bl	80018c8 <send_info>
				setTimer2(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 ff59 	bl	80014a8 <setTimer2>
				val_info1--;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <fsm_auto_run+0x344>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <fsm_auto_run+0x344>)
 80005fe:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <fsm_auto_run+0x348>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b01      	subs	r3, #1
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <fsm_auto_run+0x348>)
 8000608:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff fd9e 	bl	800014c <isButtonPress>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01d      	beq.n	8000652 <fsm_auto_run+0x332>
				setTimer2(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 ff46 	bl	80014a8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <fsm_auto_run+0x354>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000624:	fb02 f303 	mul.w	r3, r2, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ff21 	bl	8001470 <setTimer1>
				val_info1=time_man_mode;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <fsm_auto_run+0x354>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <fsm_auto_run+0x344>)
 8000634:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <fsm_auto_run+0x354>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <fsm_auto_run+0x348>)
 800063c:	6013      	str	r3, [r2, #0]
				status = MAN_YELLOW1_RED2;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <fsm_auto_run+0x34c>)
 8000640:	2217      	movs	r2, #23
 8000642:	601a      	str	r2, [r3, #0]
			}
			break;
 8000644:	e005      	b.n	8000652 <fsm_auto_run+0x332>
			break;
 8000646:	bf00      	nop
 8000648:	e004      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 800064a:	bf00      	nop
 800064c:	e002      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 800064e:	bf00      	nop
 8000650:	e000      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000f8 	.word	0x200000f8
 800065c:	20000010 	.word	0x20000010
 8000660:	20000000 	.word	0x20000000
 8000664:	2000001c 	.word	0x2000001c
 8000668:	20000020 	.word	0x20000020
 800066c:	200000b8 	.word	0x200000b8
 8000670:	20000100 	.word	0x20000100
 8000674:	20000018 	.word	0x20000018

08000678 <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	switch(status){
 800067c:	4b9a      	ldr	r3, [pc, #616]	; (80008e8 <fsm_manual_run+0x270>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b14      	subs	r3, #20
 8000682:	2b03      	cmp	r3, #3
 8000684:	f200 81a7 	bhi.w	80009d6 <fsm_manual_run+0x35e>
 8000688:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <fsm_manual_run+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006a1 	.word	0x080006a1
 8000694:	08000763 	.word	0x08000763
 8000698:	08000827 	.word	0x08000827
 800069c:	08000915 	.word	0x08000915

		case MAN_RED1_GREEN2:
			setLEDRED1();
 80006a0:	f000 fc14 	bl	8000ecc <setLEDRED1>
			setLEDGREEN2();
 80006a4:	f000 fc6e 	bl	8000f84 <setLEDGREEN2>
			if(timer1_flag == 1){
 80006a8:	4b90      	ldr	r3, [pc, #576]	; (80008ec <fsm_manual_run+0x274>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d111      	bne.n	80006d4 <fsm_manual_run+0x5c>
				status=RED1_GREEN2;
 80006b0:	4b8d      	ldr	r3, [pc, #564]	; (80008e8 <fsm_manual_run+0x270>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 fef6 	bl	80014a8 <setTimer2>
				setTimer1(3000);
 80006bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c0:	f000 fed6 	bl	8001470 <setTimer1>
				val_info1= red_time_1;
 80006c4:	4b8a      	ldr	r3, [pc, #552]	; (80008f0 <fsm_manual_run+0x278>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a8a      	ldr	r2, [pc, #552]	; (80008f4 <fsm_manual_run+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <fsm_manual_run+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a8a      	ldr	r2, [pc, #552]	; (80008fc <fsm_manual_run+0x284>)
 80006d2:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 80006d4:	4b8a      	ldr	r3, [pc, #552]	; (8000900 <fsm_manual_run+0x288>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d113      	bne.n	8000704 <fsm_manual_run+0x8c>
				send_info(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f8f3 	bl	80018c8 <send_info>
				send_info(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f001 f8f0 	bl	80018c8 <send_info>
				setTimer2(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fedc 	bl	80014a8 <setTimer2>
				val_info1--;
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <fsm_manual_run+0x27c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a7f      	ldr	r2, [pc, #508]	; (80008f4 <fsm_manual_run+0x27c>)
 80006f8:	6013      	str	r3, [r2, #0]
				val_info2--;
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <fsm_manual_run+0x284>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a7e      	ldr	r2, [pc, #504]	; (80008fc <fsm_manual_run+0x284>)
 8000702:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff fd21 	bl	800014c <isButtonPress>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d013      	beq.n	8000738 <fsm_manual_run+0xc0>
				status=MAN_RED1_YELLOW2;
 8000710:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <fsm_manual_run+0x270>)
 8000712:	2215      	movs	r2, #21
 8000714:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 8000716:	4b7b      	ldr	r3, [pc, #492]	; (8000904 <fsm_manual_run+0x28c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <fsm_manual_run+0x27c>)
 800071c:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800071e:	4b79      	ldr	r3, [pc, #484]	; (8000904 <fsm_manual_run+0x28c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <fsm_manual_run+0x284>)
 8000724:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 8000726:	4b77      	ldr	r3, [pc, #476]	; (8000904 <fsm_manual_run+0x28c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe9c 	bl	8001470 <setTimer1>
			}

			if (isButtonPress(1)){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPress>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 814a 	beq.w	80009da <fsm_manual_run+0x362>
				status = TUNING_RED1;
 8000746:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <fsm_manual_run+0x270>)
 8000748:	2228      	movs	r2, #40	; 0x28
 800074a:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 800074c:	4b68      	ldr	r3, [pc, #416]	; (80008f0 <fsm_manual_run+0x278>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a68      	ldr	r2, [pc, #416]	; (80008f4 <fsm_manual_run+0x27c>)
 8000752:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f8b7 	bl	80018c8 <send_info>
				setTimer1(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fe88 	bl	8001470 <setTimer1>
			}

			break;
 8000760:	e13b      	b.n	80009da <fsm_manual_run+0x362>

		case MAN_RED1_YELLOW2:
			setLEDYELLOW2();
 8000762:	f000 fbff 	bl	8000f64 <setLEDYELLOW2>
			if(timer1_flag==1){
 8000766:	4b61      	ldr	r3, [pc, #388]	; (80008ec <fsm_manual_run+0x274>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d114      	bne.n	8000798 <fsm_manual_run+0x120>
				status=RED1_YELLOW2;
 800076e:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <fsm_manual_run+0x270>)
 8000770:	2202      	movs	r2, #2
 8000772:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 8000774:	200a      	movs	r0, #10
 8000776:	f000 fe97 	bl	80014a8 <setTimer2>
				setTimer1(2000);
 800077a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800077e:	f000 fe77 	bl	8001470 <setTimer1>
				val_info1= red_time_1-green_time_2;
 8000782:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <fsm_manual_run+0x278>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <fsm_manual_run+0x280>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	4a59      	ldr	r2, [pc, #356]	; (80008f4 <fsm_manual_run+0x27c>)
 800078e:	6013      	str	r3, [r2, #0]
				val_info2=yellow_time_2;
 8000790:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <fsm_manual_run+0x290>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a59      	ldr	r2, [pc, #356]	; (80008fc <fsm_manual_run+0x284>)
 8000796:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 8000798:	4b59      	ldr	r3, [pc, #356]	; (8000900 <fsm_manual_run+0x288>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d113      	bne.n	80007c8 <fsm_manual_run+0x150>
				send_info(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f001 f891 	bl	80018c8 <send_info>
				send_info(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 f88e 	bl	80018c8 <send_info>
				setTimer2(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fe7a 	bl	80014a8 <setTimer2>
				val_info1--;
 80007b4:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <fsm_manual_run+0x27c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <fsm_manual_run+0x27c>)
 80007bc:	6013      	str	r3, [r2, #0]
				val_info2--;
 80007be:	4b4f      	ldr	r3, [pc, #316]	; (80008fc <fsm_manual_run+0x284>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <fsm_manual_run+0x284>)
 80007c6:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fcbf 	bl	800014c <isButtonPress>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <fsm_manual_run+0x184>
				status=MAN_GREEN1_RED2;
 80007d4:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <fsm_manual_run+0x270>)
 80007d6:	2216      	movs	r2, #22
 80007d8:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 80007da:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <fsm_manual_run+0x28c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a45      	ldr	r2, [pc, #276]	; (80008f4 <fsm_manual_run+0x27c>)
 80007e0:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80007e2:	4b48      	ldr	r3, [pc, #288]	; (8000904 <fsm_manual_run+0x28c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a45      	ldr	r2, [pc, #276]	; (80008fc <fsm_manual_run+0x284>)
 80007e8:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <fsm_manual_run+0x28c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	fb02 f303 	mul.w	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fe3a 	bl	8001470 <setTimer1>
			}

			if (isButtonPress(1)){
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fca5 	bl	800014c <isButtonPress>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80ea 	beq.w	80009de <fsm_manual_run+0x366>
				status = TUNING_RED1;
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <fsm_manual_run+0x270>)
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <fsm_manual_run+0x278>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a37      	ldr	r2, [pc, #220]	; (80008f4 <fsm_manual_run+0x27c>)
 8000816:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000818:	2000      	movs	r0, #0
 800081a:	f001 f855 	bl	80018c8 <send_info>
				setTimer1(10);
 800081e:	200a      	movs	r0, #10
 8000820:	f000 fe26 	bl	8001470 <setTimer1>
			}

			break;
 8000824:	e0db      	b.n	80009de <fsm_manual_run+0x366>

		case MAN_GREEN1_RED2:
			setLEDGREEN1();
 8000826:	f000 fb79 	bl	8000f1c <setLEDGREEN1>
			setLEDRED2();
 800082a:	f000 fb8b 	bl	8000f44 <setLEDRED2>
			if(timer1_flag==1){
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <fsm_manual_run+0x274>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d111      	bne.n	800085a <fsm_manual_run+0x1e2>
				status=GREEN1_RED2;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <fsm_manual_run+0x270>)
 8000838:	2203      	movs	r2, #3
 800083a:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 800083c:	200a      	movs	r0, #10
 800083e:	f000 fe33 	bl	80014a8 <setTimer2>
				setTimer1(3000);
 8000842:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000846:	f000 fe13 	bl	8001470 <setTimer1>
				val_info1= green_time_1;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <fsm_manual_run+0x294>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <fsm_manual_run+0x27c>)
 8000850:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <fsm_manual_run+0x298>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <fsm_manual_run+0x284>)
 8000858:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <fsm_manual_run+0x288>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d113      	bne.n	800088a <fsm_manual_run+0x212>
				send_info(0);
 8000862:	2000      	movs	r0, #0
 8000864:	f001 f830 	bl	80018c8 <send_info>
				send_info(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f001 f82d 	bl	80018c8 <send_info>
				setTimer2(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000872:	f000 fe19 	bl	80014a8 <setTimer2>
				val_info1--;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <fsm_manual_run+0x27c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <fsm_manual_run+0x27c>)
 800087e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <fsm_manual_run+0x284>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <fsm_manual_run+0x284>)
 8000888:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fc5e 	bl	800014c <isButtonPress>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d013      	beq.n	80008be <fsm_manual_run+0x246>
				status=MAN_YELLOW1_RED2;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <fsm_manual_run+0x270>)
 8000898:	2217      	movs	r2, #23
 800089a:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <fsm_manual_run+0x28c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <fsm_manual_run+0x27c>)
 80008a2:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <fsm_manual_run+0x28c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <fsm_manual_run+0x284>)
 80008aa:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <fsm_manual_run+0x28c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fdd9 	bl	8001470 <setTimer1>
			}

			if (isButtonPress(1)){
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fc44 	bl	800014c <isButtonPress>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f000 808b 	beq.w	80009e2 <fsm_manual_run+0x36a>
				status = TUNING_RED1;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <fsm_manual_run+0x270>)
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <fsm_manual_run+0x278>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <fsm_manual_run+0x27c>)
 80008d8:	6013      	str	r3, [r2, #0]
				send_info(0);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fff4 	bl	80018c8 <send_info>
				setTimer1(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 fdc5 	bl	8001470 <setTimer1>
			}

			break;
 80008e6:	e07c      	b.n	80009e2 <fsm_manual_run+0x36a>
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	200000f8 	.word	0x200000f8
 80008f0:	20000000 	.word	0x20000000
 80008f4:	2000001c 	.word	0x2000001c
 80008f8:	20000010 	.word	0x20000010
 80008fc:	20000020 	.word	0x20000020
 8000900:	20000100 	.word	0x20000100
 8000904:	20000018 	.word	0x20000018
 8000908:	20000014 	.word	0x20000014
 800090c:	20000004 	.word	0x20000004
 8000910:	2000000c 	.word	0x2000000c

		case MAN_YELLOW1_RED2:
			setLEDYELLOW1();
 8000914:	f000 faee 	bl	8000ef4 <setLEDYELLOW1>

			if(timer1_flag==1){
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <fsm_manual_run+0x374>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d114      	bne.n	800094a <fsm_manual_run+0x2d2>
				status=YELLOW1_RED2;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <fsm_manual_run+0x378>)
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 fdbe 	bl	80014a8 <setTimer2>
				setTimer1(2000);
 800092c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000930:	f000 fd9e 	bl	8001470 <setTimer1>
				val_info1= yellow_time_1;
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <fsm_manual_run+0x37c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <fsm_manual_run+0x380>)
 800093a:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2-green_time_1;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <fsm_manual_run+0x384>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <fsm_manual_run+0x388>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <fsm_manual_run+0x38c>)
 8000948:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <fsm_manual_run+0x390>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d113      	bne.n	800097a <fsm_manual_run+0x302>
				send_info(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 ffb8 	bl	80018c8 <send_info>
				send_info(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 ffb5 	bl	80018c8 <send_info>
				setTimer2(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fda1 	bl	80014a8 <setTimer2>
				val_info1--;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <fsm_manual_run+0x380>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <fsm_manual_run+0x380>)
 800096e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <fsm_manual_run+0x38c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <fsm_manual_run+0x38c>)
 8000978:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fbe6 	bl	800014c <isButtonPress>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d013      	beq.n	80009ae <fsm_manual_run+0x336>
				status=MAN_RED1_GREEN2;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <fsm_manual_run+0x378>)
 8000988:	2214      	movs	r2, #20
 800098a:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <fsm_manual_run+0x394>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <fsm_manual_run+0x380>)
 8000992:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <fsm_manual_run+0x394>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <fsm_manual_run+0x38c>)
 800099a:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <fsm_manual_run+0x394>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fd61 	bl	8001470 <setTimer1>
			}

			if (isButtonPress(1)){
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fbcc 	bl	800014c <isButtonPress>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d015      	beq.n	80009e6 <fsm_manual_run+0x36e>
				status = TUNING_RED1;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <fsm_manual_run+0x378>)
 80009bc:	2228      	movs	r2, #40	; 0x28
 80009be:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <fsm_manual_run+0x398>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <fsm_manual_run+0x380>)
 80009c6:	6013      	str	r3, [r2, #0]
				send_info(0);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 ff7d 	bl	80018c8 <send_info>
				setTimer1(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f000 fd4e 	bl	8001470 <setTimer1>
			}

			break;
 80009d4:	e007      	b.n	80009e6 <fsm_manual_run+0x36e>

		default:
			break;
 80009d6:	bf00      	nop
 80009d8:	e006      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009da:	bf00      	nop
 80009dc:	e004      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009de:	bf00      	nop
 80009e0:	e002      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009e2:	bf00      	nop
 80009e4:	e000      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000f8 	.word	0x200000f8
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	20000008 	.word	0x20000008
 80009f8:	2000001c 	.word	0x2000001c
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000020 	.word	0x20000020
 8000a08:	20000100 	.word	0x20000100
 8000a0c:	20000018 	.word	0x20000018
 8000a10:	20000000 	.word	0x20000000

08000a14 <fsm_pedes_run>:
 */


#include "fsm_pedes.h"
int freq=0;
void fsm_pedes_run(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	switch (status_pedes){
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <fsm_pedes_run+0x110>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b32      	cmp	r3, #50	; 0x32
 8000a1e:	d002      	beq.n	8000a26 <fsm_pedes_run+0x12>
 8000a20:	2b33      	cmp	r3, #51	; 0x33
 8000a22:	d018      	beq.n	8000a56 <fsm_pedes_run+0x42>
			}

			break;

	}
}
 8000a24:	e07b      	b.n	8000b1e <fsm_pedes_run+0x10a>
			clearLED3();
 8000a26:	f000 fb1d 	bl	8001064 <clearLED3>
			if (isButtonPress(0)){
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fb8e 	bl	800014c <isButtonPress>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d070      	beq.n	8000b18 <fsm_pedes_run+0x104>
				setTimer3((red_time_1 + red_time_2) * 2 * 1000);
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <fsm_pedes_run+0x114>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <fsm_pedes_run+0x118>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fd49 	bl	80014e0 <setTimer3>
				status_pedes = PEDES_RUN;
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <fsm_pedes_run+0x110>)
 8000a50:	2233      	movs	r2, #51	; 0x33
 8000a52:	601a      	str	r2, [r3, #0]
			break;
 8000a54:	e060      	b.n	8000b18 <fsm_pedes_run+0x104>
			if (status == GREEN1_RED2){
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d102      	bne.n	8000a64 <fsm_pedes_run+0x50>
				setLEDRED3();
 8000a5e:	f000 faa1 	bl	8000fa4 <setLEDRED3>
 8000a62:	e04e      	b.n	8000b02 <fsm_pedes_run+0xee>
			} else if (status == YELLOW1_RED2){
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d102      	bne.n	8000a72 <fsm_pedes_run+0x5e>
				setLEDRED3();
 8000a6c:	f000 fa9a 	bl	8000fa4 <setLEDRED3>
 8000a70:	e047      	b.n	8000b02 <fsm_pedes_run+0xee>
			} else if (val_info1<=yellow_pedes_time){
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <fsm_pedes_run+0x120>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dc21      	bgt.n	8000abe <fsm_pedes_run+0xaa>
				setLEDYELLOW3();
 8000a7a:	f000 faa7 	bl	8000fcc <setLEDYELLOW3>
				if(timer4_flag==1){
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <fsm_pedes_run+0x124>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d117      	bne.n	8000ab6 <fsm_pedes_run+0xa2>
					freq=(red_time_1-val_info1)*30>1000?1000:(red_time_1-val_info1)*30;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <fsm_pedes_run+0x114>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <fsm_pedes_run+0x120>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4613      	mov	r3, r2
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a9c:	bfa8      	it	ge
 8000a9e:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000aa2:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <fsm_pedes_run+0x128>)
 8000aa4:	6013      	str	r3, [r2, #0]
					buzzer(freq);
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <fsm_pedes_run+0x128>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fc28 	bl	8000300 <buzzer>
					setTimer4(250);
 8000ab0:	20fa      	movs	r0, #250	; 0xfa
 8000ab2:	f000 fd31 	bl	8001518 <setTimer4>
				buzzer(0);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fc22 	bl	8000300 <buzzer>
 8000abc:	e021      	b.n	8000b02 <fsm_pedes_run+0xee>
				setLEDGREEN3();
 8000abe:	f000 fa99 	bl	8000ff4 <setLEDGREEN3>
				if(timer4_flag==1){
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <fsm_pedes_run+0x124>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d118      	bne.n	8000afc <fsm_pedes_run+0xe8>
					freq=(red_time_1-val_info1)*30>600?600:(red_time_1-val_info1)*30;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <fsm_pedes_run+0x114>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <fsm_pedes_run+0x120>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000ae0:	bfa8      	it	ge
 8000ae2:	f44f 7316 	movge.w	r3, #600	; 0x258
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <fsm_pedes_run+0x128>)
 8000ae8:	6013      	str	r3, [r2, #0]
					buzzer(freq);
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <fsm_pedes_run+0x128>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fc06 	bl	8000300 <buzzer>
					setTimer4(1000);
 8000af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af8:	f000 fd0e 	bl	8001518 <setTimer4>
				buzzer(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fbff 	bl	8000300 <buzzer>
			if (timer3_flag == 1){
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <fsm_pedes_run+0x12c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d108      	bne.n	8000b1c <fsm_pedes_run+0x108>
				status = INIT_PEDES;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000b0c:	2232      	movs	r2, #50	; 0x32
 8000b0e:	601a      	str	r2, [r3, #0]
				buzzer(0);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fbf5 	bl	8000300 <buzzer>
			break;
 8000b16:	e001      	b.n	8000b1c <fsm_pedes_run+0x108>
			break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <fsm_pedes_run+0x10a>
			break;
 8000b1c:	bf00      	nop
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000b4 	.word	0x200000b4
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	200000b8 	.word	0x200000b8
 8000b34:	2000001c 	.word	0x2000001c
 8000b38:	20000110 	.word	0x20000110
 8000b3c:	200000b0 	.word	0x200000b0
 8000b40:	20000108 	.word	0x20000108

08000b44 <fsm_tuning_run>:

#include "fsm_tuning.h"



void fsm_tuning_run(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	switch(status){
 8000b48:	4b93      	ldr	r3, [pc, #588]	; (8000d98 <fsm_tuning_run+0x254>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3b28      	subs	r3, #40	; 0x28
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	f200 81a1 	bhi.w	8000e96 <fsm_tuning_run+0x352>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <fsm_tuning_run+0x18>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000c21 	.word	0x08000c21
 8000b64:	08000cd5 	.word	0x08000cd5
 8000b68:	08000dc9 	.word	0x08000dc9

		case TUNING_RED1:
			setLEDRED1();
 8000b6c:	f000 f9ae 	bl	8000ecc <setLEDRED1>
			clearLED2();
 8000b70:	f000 fa68 	bl	8001044 <clearLED2>
			if(isButtonPress(2)){
 8000b74:	2002      	movs	r0, #2
 8000b76:	f7ff fae9 	bl	800014c <isButtonPress>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00e      	beq.n	8000b9e <fsm_tuning_run+0x5a>
				RED_INC++;
 8000b80:	4b86      	ldr	r3, [pc, #536]	; (8000d9c <fsm_tuning_run+0x258>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a85      	ldr	r2, [pc, #532]	; (8000d9c <fsm_tuning_run+0x258>)
 8000b88:	6013      	str	r3, [r2, #0]
				val_info1=RED_INC+red_time_1;
 8000b8a:	4b84      	ldr	r3, [pc, #528]	; (8000d9c <fsm_tuning_run+0x258>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b84      	ldr	r3, [pc, #528]	; (8000da0 <fsm_tuning_run+0x25c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a83      	ldr	r2, [pc, #524]	; (8000da4 <fsm_tuning_run+0x260>)
 8000b96:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 fe95 	bl	80018c8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f7ff faee 	bl	8000180 <isButtonLongPress>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d015      	beq.n	8000bd6 <fsm_tuning_run+0x92>
				if (timer1_flag == 1){
 8000baa:	4b7f      	ldr	r3, [pc, #508]	; (8000da8 <fsm_tuning_run+0x264>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d111      	bne.n	8000bd6 <fsm_tuning_run+0x92>
					RED_INC--;
 8000bb2:	4b7a      	ldr	r3, [pc, #488]	; (8000d9c <fsm_tuning_run+0x258>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a78      	ldr	r2, [pc, #480]	; (8000d9c <fsm_tuning_run+0x258>)
 8000bba:	6013      	str	r3, [r2, #0]
					val_info1=RED_INC+red_time_1;
 8000bbc:	4b77      	ldr	r3, [pc, #476]	; (8000d9c <fsm_tuning_run+0x258>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b77      	ldr	r3, [pc, #476]	; (8000da0 <fsm_tuning_run+0x25c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a77      	ldr	r2, [pc, #476]	; (8000da4 <fsm_tuning_run+0x260>)
 8000bc8:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fe7c 	bl	80018c8 <send_info>
					setTimer1(200);
 8000bd0:	20c8      	movs	r0, #200	; 0xc8
 8000bd2:	f000 fc4d 	bl	8001470 <setTimer1>
				}
			}
			if(isButtonPress(3)){
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f7ff fab8 	bl	800014c <isButtonPress>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <fsm_tuning_run+0xac>
				red_time_1+=RED_INC;
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <fsm_tuning_run+0x25c>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b6d      	ldr	r3, [pc, #436]	; (8000d9c <fsm_tuning_run+0x258>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a6c      	ldr	r2, [pc, #432]	; (8000da0 <fsm_tuning_run+0x25c>)
 8000bee:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff faab 	bl	800014c <isButtonPress>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 814e 	beq.w	8000e9a <fsm_tuning_run+0x356>
				RED_INC=0;
 8000bfe:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <fsm_tuning_run+0x258>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
				status=TUNING_GREEN1;
 8000c04:	4b64      	ldr	r3, [pc, #400]	; (8000d98 <fsm_tuning_run+0x254>)
 8000c06:	2229      	movs	r2, #41	; 0x29
 8000c08:	601a      	str	r2, [r3, #0]
				val_info1=green_time_1;
 8000c0a:	4b68      	ldr	r3, [pc, #416]	; (8000dac <fsm_tuning_run+0x268>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a65      	ldr	r2, [pc, #404]	; (8000da4 <fsm_tuning_run+0x260>)
 8000c10:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fe58 	bl	80018c8 <send_info>
				setTimer1(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fc29 	bl	8001470 <setTimer1>
			}
			break;
 8000c1e:	e13c      	b.n	8000e9a <fsm_tuning_run+0x356>

		case TUNING_GREEN1:

			setLEDGREEN1();
 8000c20:	f000 f97c 	bl	8000f1c <setLEDGREEN1>
			clearLED2();
 8000c24:	f000 fa0e 	bl	8001044 <clearLED2>

			if(isButtonPress(2)){
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fa8f 	bl	800014c <isButtonPress>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00e      	beq.n	8000c52 <fsm_tuning_run+0x10e>
				GREEN_INC++;
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c3c:	6013      	str	r3, [r2, #0]
				val_info1=GREEN_INC+green_time_1;
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <fsm_tuning_run+0x268>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <fsm_tuning_run+0x260>)
 8000c4a:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fe3b 	bl	80018c8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000c52:	2002      	movs	r0, #2
 8000c54:	f7ff fa94 	bl	8000180 <isButtonLongPress>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d015      	beq.n	8000c8a <fsm_tuning_run+0x146>
				if (timer1_flag == 1){
 8000c5e:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <fsm_tuning_run+0x264>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d111      	bne.n	8000c8a <fsm_tuning_run+0x146>
					GREEN_INC--;
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4a50      	ldr	r2, [pc, #320]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c6e:	6013      	str	r3, [r2, #0]
					val_info1=GREEN_INC+green_time_1;
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <fsm_tuning_run+0x268>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <fsm_tuning_run+0x260>)
 8000c7c:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fe22 	bl	80018c8 <send_info>
					setTimer1(200);
 8000c84:	20c8      	movs	r0, #200	; 0xc8
 8000c86:	f000 fbf3 	bl	8001470 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff fa5e 	bl	800014c <isButtonPress>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <fsm_tuning_run+0x160>
				green_time_1+=GREEN_INC;
 8000c96:	4b45      	ldr	r3, [pc, #276]	; (8000dac <fsm_tuning_run+0x268>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a42      	ldr	r2, [pc, #264]	; (8000dac <fsm_tuning_run+0x268>)
 8000ca2:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fa51 	bl	800014c <isButtonPress>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80f6 	beq.w	8000e9e <fsm_tuning_run+0x35a>
				GREEN_INC=0;
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <fsm_tuning_run+0x26c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
				status=TUNING_YELLOW1;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <fsm_tuning_run+0x254>)
 8000cba:	222a      	movs	r2, #42	; 0x2a
 8000cbc:	601a      	str	r2, [r3, #0]
				val_info1=yellow_time_1;
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <fsm_tuning_run+0x270>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <fsm_tuning_run+0x260>)
 8000cc4:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fdfe 	bl	80018c8 <send_info>
				setTimer1(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f000 fbcf 	bl	8001470 <setTimer1>
			}
			break;
 8000cd2:	e0e4      	b.n	8000e9e <fsm_tuning_run+0x35a>

		case TUNING_YELLOW1:
			setLEDYELLOW1();
 8000cd4:	f000 f90e 	bl	8000ef4 <setLEDYELLOW1>
			clearLED2();
 8000cd8:	f000 f9b4 	bl	8001044 <clearLED2>

			if(isButtonPress(2)){
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff fa35 	bl	800014c <isButtonPress>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00e      	beq.n	8000d06 <fsm_tuning_run+0x1c2>
				YELLOW_INC++;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <fsm_tuning_run+0x274>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a32      	ldr	r2, [pc, #200]	; (8000db8 <fsm_tuning_run+0x274>)
 8000cf0:	6013      	str	r3, [r2, #0]
				val_info1=YELLOW_INC+yellow_time_1;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <fsm_tuning_run+0x274>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <fsm_tuning_run+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <fsm_tuning_run+0x260>)
 8000cfe:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 fde1 	bl	80018c8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fa3a 	bl	8000180 <isButtonLongPress>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d015      	beq.n	8000d3e <fsm_tuning_run+0x1fa>
				if (timer1_flag == 1){
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <fsm_tuning_run+0x264>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d111      	bne.n	8000d3e <fsm_tuning_run+0x1fa>
					YELLOW_INC--;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <fsm_tuning_run+0x274>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <fsm_tuning_run+0x274>)
 8000d22:	6013      	str	r3, [r2, #0]
					val_info1=YELLOW_INC+yellow_time_1;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <fsm_tuning_run+0x274>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <fsm_tuning_run+0x270>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <fsm_tuning_run+0x260>)
 8000d30:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 fdc8 	bl	80018c8 <send_info>
					setTimer1(200);
 8000d38:	20c8      	movs	r0, #200	; 0xc8
 8000d3a:	f000 fb99 	bl	8001470 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f7ff fa04 	bl	800014c <isButtonPress>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d006      	beq.n	8000d58 <fsm_tuning_run+0x214>
				yellow_time_1+=YELLOW_INC;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <fsm_tuning_run+0x270>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <fsm_tuning_run+0x274>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <fsm_tuning_run+0x270>)
 8000d56:	6013      	str	r3, [r2, #0]

			}
			if(isButtonPress(1)){
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff f9f7 	bl	800014c <isButtonPress>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 809e 	beq.w	8000ea2 <fsm_tuning_run+0x35e>
				YELLOW_INC=0;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <fsm_tuning_run+0x274>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
				red_time_2=yellow_time_1+green_time_1;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <fsm_tuning_run+0x270>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <fsm_tuning_run+0x268>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <fsm_tuning_run+0x278>)
 8000d78:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <fsm_tuning_run+0x27c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <fsm_tuning_run+0x280>)
 8000d80:	6013      	str	r3, [r2, #0]
				send_info(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 fda0 	bl	80018c8 <send_info>
				status=TUNING_GREEN2;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <fsm_tuning_run+0x254>)
 8000d8a:	222b      	movs	r2, #43	; 0x2b
 8000d8c:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fb6e 	bl	8001470 <setTimer1>
			}
			break;
 8000d94:	e085      	b.n	8000ea2 <fsm_tuning_run+0x35e>
 8000d96:	bf00      	nop
 8000d98:	200000b8 	.word	0x200000b8
 8000d9c:	200000bc 	.word	0x200000bc
 8000da0:	20000000 	.word	0x20000000
 8000da4:	2000001c 	.word	0x2000001c
 8000da8:	200000f8 	.word	0x200000f8
 8000dac:	20000004 	.word	0x20000004
 8000db0:	200000c4 	.word	0x200000c4
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200000c0 	.word	0x200000c0
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	20000020 	.word	0x20000020

		case TUNING_GREEN2:
			setLEDGREEN2();
 8000dc8:	f000 f8dc 	bl	8000f84 <setLEDGREEN2>
			clearLED1();
 8000dcc:	f000 f926 	bl	800101c <clearLED1>

			if(isButtonPress(2)){
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff f9bb 	bl	800014c <isButtonPress>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00e      	beq.n	8000dfa <fsm_tuning_run+0x2b6>
				GREEN_INC++;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <fsm_tuning_run+0x368>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <fsm_tuning_run+0x368>)
 8000de4:	6013      	str	r3, [r2, #0]
				val_info2=GREEN_INC+green_time_2;
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <fsm_tuning_run+0x368>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <fsm_tuning_run+0x370>)
 8000df2:	6013      	str	r3, [r2, #0]
				send_info(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fd67 	bl	80018c8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff f9c0 	bl	8000180 <isButtonLongPress>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <fsm_tuning_run+0x2ee>
				if (timer1_flag == 1){
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <fsm_tuning_run+0x374>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d111      	bne.n	8000e32 <fsm_tuning_run+0x2ee>
					GREEN_INC--;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <fsm_tuning_run+0x368>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a25      	ldr	r2, [pc, #148]	; (8000eac <fsm_tuning_run+0x368>)
 8000e16:	6013      	str	r3, [r2, #0]
					val_info2=GREEN_INC+green_time_2;
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <fsm_tuning_run+0x368>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <fsm_tuning_run+0x370>)
 8000e24:	6013      	str	r3, [r2, #0]
					send_info(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fd4e 	bl	80018c8 <send_info>
					setTimer1(200);
 8000e2c:	20c8      	movs	r0, #200	; 0xc8
 8000e2e:	f000 fb1f 	bl	8001470 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000e32:	2003      	movs	r0, #3
 8000e34:	f7ff f98a 	bl	800014c <isButtonPress>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <fsm_tuning_run+0x308>
				green_time_2+=GREEN_INC;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <fsm_tuning_run+0x368>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e4a:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff f97d 	bl	800014c <isButtonPress>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d026      	beq.n	8000ea6 <fsm_tuning_run+0x362>
				GREEN_INC=0;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <fsm_tuning_run+0x368>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
				yellow_time_2=red_time_1-green_time_2;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <fsm_tuning_run+0x378>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <fsm_tuning_run+0x37c>)
 8000e6a:	6013      	str	r3, [r2, #0]
				status=RED1_GREEN2;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <fsm_tuning_run+0x380>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <fsm_tuning_run+0x378>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <fsm_tuning_run+0x384>)
 8000e78:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <fsm_tuning_run+0x370>)
 8000e80:	6013      	str	r3, [r2, #0]
				setTimer1(green_time_2 * 1000);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <fsm_tuning_run+0x36c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 faee 	bl	8001470 <setTimer1>
			}
			break;
 8000e94:	e007      	b.n	8000ea6 <fsm_tuning_run+0x362>

		default:
			break;
 8000e96:	bf00      	nop
 8000e98:	e006      	b.n	8000ea8 <fsm_tuning_run+0x364>
			break;
 8000e9a:	bf00      	nop
 8000e9c:	e004      	b.n	8000ea8 <fsm_tuning_run+0x364>
			break;
 8000e9e:	bf00      	nop
 8000ea0:	e002      	b.n	8000ea8 <fsm_tuning_run+0x364>
			break;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <fsm_tuning_run+0x364>
			break;
 8000ea6:	bf00      	nop

	}
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000c4 	.word	0x200000c4
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	20000020 	.word	0x20000020
 8000eb8:	200000f8 	.word	0x200000f8
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000014 	.word	0x20000014
 8000ec4:	200000b8 	.word	0x200000b8
 8000ec8:	2000001c 	.word	0x2000001c

08000ecc <setLEDRED1>:
 *  Created on: Dec 5, 2022
 *      Author: Admin
 */

#include "led_traffic.h"
void setLEDRED1(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <setLEDRED1+0x20>)
 8000ed8:	f001 f915 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <setLEDRED1+0x24>)
 8000ee2:	f001 f910 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00

08000ef4 <setLEDYELLOW1>:
void setLEDYELLOW1(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <setLEDYELLOW1+0x20>)
 8000f00:	f001 f901 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2108      	movs	r1, #8
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <setLEDYELLOW1+0x24>)
 8000f0a:	f001 f8fc 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <setLEDGREEN1>:
void setLEDGREEN1(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <setLEDGREEN1+0x20>)
 8000f28:	f001 f8ed 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <setLEDGREEN1+0x24>)
 8000f32:	f001 f8e8 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <setLEDRED2>:

void setLEDRED2(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <setLEDRED2+0x1c>)
 8000f4e:	f001 f8da 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	4802      	ldr	r0, [pc, #8]	; (8000f60 <setLEDRED2+0x1c>)
 8000f58:	f001 f8d5 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <setLEDYELLOW2>:
void setLEDYELLOW2(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <setLEDYELLOW2+0x1c>)
 8000f6e:	f001 f8ca 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	4802      	ldr	r0, [pc, #8]	; (8000f80 <setLEDYELLOW2+0x1c>)
 8000f78:	f001 f8c5 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010c00 	.word	0x40010c00

08000f84 <setLEDGREEN2>:
void setLEDGREEN2(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <setLEDGREEN2+0x1c>)
 8000f8e:	f001 f8ba 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2110      	movs	r1, #16
 8000f96:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <setLEDGREEN2+0x1c>)
 8000f98:	f001 f8b5 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <setLEDRED3>:

void setLEDRED3(){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <setLEDRED3+0x20>)
 8000fb0:	f001 f8a9 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <setLEDRED3+0x24>)
 8000fbc:	f001 f8a3 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40010800 	.word	0x40010800

08000fcc <setLEDYELLOW3>:
void setLEDYELLOW3(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <setLEDYELLOW3+0x20>)
 8000fd8:	f001 f895 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <setLEDYELLOW3+0x24>)
 8000fe4:	f001 f88f 	bl	8002106 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <setLEDGREEN3>:
void setLEDGREEN3(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <setLEDGREEN3+0x20>)
 8001000:	f001 f881 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <setLEDGREEN3+0x24>)
 800100c:	f001 f87b 	bl	8002106 <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40010800 	.word	0x40010800

0800101c <clearLED1>:

void clearLED1(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <clearLED1+0x20>)
 8001028:	f001 f86d 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2108      	movs	r1, #8
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <clearLED1+0x24>)
 8001032:	f001 f868 	bl	8002106 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00

08001044 <clearLED2>:

void clearLED2(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <clearLED2+0x1c>)
 800104e:	f001 f85a 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <clearLED2+0x1c>)
 8001058:	f001 f855 	bl	8002106 <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010c00 	.word	0x40010c00

08001064 <clearLED3>:

void clearLED3(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <clearLED3+0x20>)
 8001070:	f001 f849 	bl	8002106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <clearLED3+0x24>)
 800107c:	f001 f843 	bl	8002106 <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40010800 	.word	0x40010800

0800108c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
if( huart -> Instance == USART2 ) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_UART_RxCpltCallback+0x30>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10a      	bne.n	80010b4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (& huart2 , & temp , 1 , 50) ;
 800109e:	2332      	movs	r3, #50	; 0x32
 80010a0:	2201      	movs	r2, #1
 80010a2:	4907      	ldr	r1, [pc, #28]	; (80010c0 <HAL_UART_RxCpltCallback+0x34>)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 80010a6:	f002 fc0c 	bl	80038c2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (& huart2 , & temp , 1) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <HAL_UART_RxCpltCallback+0x34>)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 80010b0:	f002 fc99 	bl	80039e6 <HAL_UART_Receive_IT>
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	200000f0 	.word	0x200000f0
 80010c4:	20000200 	.word	0x20000200

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fc60 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f826 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 f94c 	bl	8001370 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010d8:	f000 f85e 	bl	8001198 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 f91e 	bl	800131c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010e0:	f000 f8a6 	bl	8001230 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT (& huart2 , & temp , 1) ;
  HAL_TIM_Base_Start_IT(&htim2);
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <main+0x48>)
 80010e6:	f001 fc91 	bl	8002a0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <main+0x4c>)
 80010ee:	f001 fd37 	bl	8002b60 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <main+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
  status_pedes = INIT_PEDES;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <main+0x54>)
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 80010fe:	f7ff f90f 	bl	8000320 <fsm_auto_run>
  	  fsm_manual_run();
 8001102:	f7ff fab9 	bl	8000678 <fsm_manual_run>
  	  fsm_pedes_run();
 8001106:	f7ff fc85 	bl	8000a14 <fsm_pedes_run>
  	  fsm_tuning_run();
 800110a:	f7ff fd1b 	bl	8000b44 <fsm_tuning_run>
	  fsm_auto_run();
 800110e:	e7f6      	b.n	80010fe <main+0x36>
 8001110:	200001b8 	.word	0x200001b8
 8001114:	20000150 	.word	0x20000150
 8001118:	200000b8 	.word	0x200000b8
 800111c:	200000b4 	.word	0x200000b4

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	2228      	movs	r2, #40	; 0x28
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 f8dc 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2310      	movs	r3, #16
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ffee 	bl	8002138 <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001162:	f000 f97f 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fa5a 	bl	8002638 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800118a:	f000 f96b 	bl	8001464 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	; 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM2_Init+0x94>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM2_Init+0x94>)
 80011be:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_TIM2_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM2_Init+0x94>)
 80011cc:	220a      	movs	r2, #10
 80011ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM2_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_TIM2_Init+0x94>)
 80011de:	f001 fbc5 	bl	800296c <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e8:	f000 f93c 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM2_Init+0x94>)
 80011fa:	f001 ff19 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f92e 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0x94>)
 8001216:	f002 fa97 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f920 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001b8 	.word	0x200001b8

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001262:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_TIM3_Init+0xe8>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_TIM3_Init+0xe4>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_TIM3_Init+0xe4>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001288:	f001 fb70 	bl	800296c <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001292:	f000 f8e7 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012a4:	f001 fec4 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ae:	f000 f8d9 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012b4:	f001 fbfc 	bl	8002ab0 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012be:	f000 f8d1 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012d2:	f002 fa39 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012dc:	f000 f8c2 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM3_Init+0xe4>)
 80012f8:	f001 fddc 	bl	8002eb4 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001302:	f000 f8af 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM3_Init+0xe4>)
 8001308:	f000 f9e2 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000150 	.word	0x20000150
 8001318:	40000400 	.word	0x40000400

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 fa68 	bl	8003828 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f881 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000200 	.word	0x20000200
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_GPIO_Init+0xd0>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_GPIO_Init+0xd0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013bc:	f000 fea3 	bl	8002106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013c6:	4820      	ldr	r0, [pc, #128]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013c8:	f000 fe9d 	bl	8002106 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80013cc:	2313      	movs	r3, #19
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013e0:	f000 fcf6 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013f8:	f000 fcea 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80013fc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xd4>)
 8001416:	f000 fcdb 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800141a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0xd8>)
 8001434:	f000 fccc 	bl	8001dd0 <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40010800 	.word	0x40010800

0800144c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	button_read();
 8001454:	f7fe fea8 	bl	80001a8 <button_read>
	timerRun();
 8001458:	f000 f87a 	bl	8001550 <timerRun>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <setTimer1>:
int timer3_counter=0;
int timer3_flag=0;
int timer4_counter=0;
int timer4_flag=0;

void setTimer1(int duration){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / CYCLE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <setTimer1+0x2c>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	1092      	asrs	r2, r2, #2
 8001482:	17db      	asrs	r3, r3, #31
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <setTimer1+0x30>)
 8001488:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <setTimer1+0x34>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	66666667 	.word	0x66666667
 80014a0:	200000f4 	.word	0x200000f4
 80014a4:	200000f8 	.word	0x200000f8

080014a8 <setTimer2>:

void setTimer2(int duration){
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / CYCLE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <setTimer2+0x2c>)
 80014b4:	fb82 1203 	smull	r1, r2, r2, r3
 80014b8:	1092      	asrs	r2, r2, #2
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <setTimer2+0x30>)
 80014c0:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <setTimer2+0x34>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	66666667 	.word	0x66666667
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	20000100 	.word	0x20000100

080014e0 <setTimer3>:

void setTimer3(int duration){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / CYCLE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <setTimer3+0x2c>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	1092      	asrs	r2, r2, #2
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <setTimer3+0x30>)
 80014f8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <setTimer3+0x34>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	66666667 	.word	0x66666667
 8001510:	20000104 	.word	0x20000104
 8001514:	20000108 	.word	0x20000108

08001518 <setTimer4>:
void setTimer4(int duration){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / CYCLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <setTimer4+0x2c>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	1092      	asrs	r2, r2, #2
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <setTimer4+0x30>)
 8001530:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <setTimer4+0x34>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	66666667 	.word	0x66666667
 8001548:	2000010c 	.word	0x2000010c
 800154c:	20000110 	.word	0x20000110

08001550 <timerRun>:

void timerRun(){
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <timerRun+0x8c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd0b      	ble.n	8001574 <timerRun+0x24>
		timer1_counter--;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <timerRun+0x8c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <timerRun+0x8c>)
 8001564:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <timerRun+0x8c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc02      	bgt.n	8001574 <timerRun+0x24>
			timer1_flag=1;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <timerRun+0x90>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <timerRun+0x94>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd0b      	ble.n	8001594 <timerRun+0x44>
		timer2_counter--;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <timerRun+0x94>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <timerRun+0x94>)
 8001584:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <timerRun+0x94>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc02      	bgt.n	8001594 <timerRun+0x44>
			timer2_flag=1;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <timerRun+0x98>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <timerRun+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dd0b      	ble.n	80015b4 <timerRun+0x64>
		timer3_counter--;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <timerRun+0x9c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <timerRun+0x9c>)
 80015a4:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <timerRun+0x9c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc02      	bgt.n	80015b4 <timerRun+0x64>
			timer3_flag=1;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <timerRun+0xa0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <timerRun+0xa4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd0b      	ble.n	80015d4 <timerRun+0x84>
			timer4_counter--;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <timerRun+0xa4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <timerRun+0xa4>)
 80015c4:	6013      	str	r3, [r2, #0]
			if(timer4_counter<=0){
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <timerRun+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc02      	bgt.n	80015d4 <timerRun+0x84>
				timer4_flag=1;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <timerRun+0xa8>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
			}
		}
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	200000f4 	.word	0x200000f4
 80015e0:	200000f8 	.word	0x200000f8
 80015e4:	200000fc 	.word	0x200000fc
 80015e8:	20000100 	.word	0x20000100
 80015ec:	20000104 	.word	0x20000104
 80015f0:	20000108 	.word	0x20000108
 80015f4:	2000010c 	.word	0x2000010c
 80015f8:	20000110 	.word	0x20000110

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_MspInit+0x5c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x5c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_MspInit+0x60>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_MspInit+0x60>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d114      	bne.n	800169c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fab7 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fad0 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169a:	e010      	b.n	80016be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_TIM_Base_MspInit+0x6c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10b      	bne.n	80016be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40000400 	.word	0x40000400

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_MspPostInit+0x58>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d117      	bne.n	8001720 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2302      	movs	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_TIM_MspPostInit+0x60>)
 800171c:	f000 fb58 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40000400 	.word	0x40000400
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d137      	bne.n	80017c4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001784:	2304      	movs	r3, #4
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <HAL_UART_MspInit+0xa0>)
 8001798:	f000 fb1a 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	2308      	movs	r3, #8
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <HAL_UART_MspInit+0xa0>)
 80017b0:	f000 fb0e 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2026      	movs	r0, #38	; 0x26
 80017ba:	f000 fa22 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017be:	2026      	movs	r0, #38	; 0x26
 80017c0:	f000 fa3b 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f000 f8fd 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM2_IRQHandler+0x10>)
 800182e:	f001 fa39 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200001b8 	.word	0x200001b8

0800183c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART2_IRQHandler+0x10>)
 8001842:	f002 f901 	bl	8003a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000200 	.word	0x20000200

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f002 fd0a 	bl	8004298 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20005000 	.word	0x20005000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000114 	.word	0x20000114
 80018b8:	20000268 	.word	0x20000268

080018bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <send_info>:
 *
 *  Created on: Dec 8, 2022
 *      Author: Admin
 */
#include "transmit_info.h"
void send_info(int traffic){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	switch(traffic){
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <send_info+0x16>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d010      	beq.n	80018fe <send_info+0x36>
			break;
		case 1:
			HAL_UART_Transmit (&huart2 , ( void *) info_2 , sprintf( info_2 , "!7SEG:%d:TRAFFIC2#", val_info2) , 1000) ;
			break;
		default:
			break;
 80018dc:	e01f      	b.n	800191e <send_info+0x56>
			HAL_UART_Transmit (&huart2 , ( void *) info_1 , sprintf( info_1 , "!7SEG:%d:TRAFFIC1#", val_info1) , 1000) ;
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <send_info+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4911      	ldr	r1, [pc, #68]	; (800192c <send_info+0x64>)
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <send_info+0x68>)
 80018e8:	f002 fd08 	bl	80042fc <siprintf>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <send_info+0x68>)
 80018f6:	480f      	ldr	r0, [pc, #60]	; (8001934 <send_info+0x6c>)
 80018f8:	f001 ffe3 	bl	80038c2 <HAL_UART_Transmit>
			break;
 80018fc:	e00f      	b.n	800191e <send_info+0x56>
			HAL_UART_Transmit (&huart2 , ( void *) info_2 , sprintf( info_2 , "!7SEG:%d:TRAFFIC2#", val_info2) , 1000) ;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <send_info+0x70>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	490d      	ldr	r1, [pc, #52]	; (800193c <send_info+0x74>)
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <send_info+0x78>)
 8001908:	f002 fcf8 	bl	80042fc <siprintf>
 800190c:	4603      	mov	r3, r0
 800190e:	b29a      	uxth	r2, r3
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	490a      	ldr	r1, [pc, #40]	; (8001940 <send_info+0x78>)
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <send_info+0x6c>)
 8001918:	f001 ffd3 	bl	80038c2 <HAL_UART_Transmit>
			break;
 800191c:	bf00      	nop
	}
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000001c 	.word	0x2000001c
 800192c:	08004b88 	.word	0x08004b88
 8001930:	200000c8 	.word	0x200000c8
 8001934:	20000200 	.word	0x20000200
 8001938:	20000020 	.word	0x20000020
 800193c:	08004b9c 	.word	0x08004b9c
 8001940:	200000dc 	.word	0x200000dc

08001944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196a:	f7ff ffa7 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f002 fc99 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7ff fba9 	bl	80010c8 <main>
  bx lr
 8001976:	4770      	bx	lr
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001980:	08004c14 	.word	0x08004c14
  ldr r2, =_sbss
 8001984:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001988:	20000268 	.word	0x20000268

0800198c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_2_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x28>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f923 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fe26 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f93b 	bl	8001c56 <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f903 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000024 	.word	0x20000024
 8001a14:	2000002c 	.word	0x2000002c
 8001a18:	20000028 	.word	0x20000028

08001a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x1c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_IncTick+0x20>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x20>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	2000002c 	.word	0x2000002c
 8001a3c:	20000254 	.word	0x20000254

08001a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_GetTick+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000254 	.word	0x20000254

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4906      	ldr	r1, [pc, #24]	; (8001aec <__NVIC_EnableIRQ+0x34>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff90 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff2d 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff42 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff90 	bl	8001b44 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5f 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff35 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d008      	beq.n	8001c96 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e020      	b.n	8001cd8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020e 	bic.w	r2, r2, #14
 8001ca4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d005      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e051      	b.n	8001daa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 020e 	bic.w	r2, r2, #14
 8001d14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <HAL_DMA_Abort_IT+0xd0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d029      	beq.n	8001d84 <HAL_DMA_Abort_IT+0xa0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <HAL_DMA_Abort_IT+0xd4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x9c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_DMA_Abort_IT+0xd8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d01a      	beq.n	8001d7a <HAL_DMA_Abort_IT+0x96>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_DMA_Abort_IT+0xdc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x90>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_DMA_Abort_IT+0xe0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00a      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x8a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_DMA_Abort_IT+0xe4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d102      	bne.n	8001d68 <HAL_DMA_Abort_IT+0x84>
 8001d62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d66:	e00e      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6c:	e00b      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d72:	e008      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d78:	e005      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	e002      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d80:	2310      	movs	r3, #16
 8001d82:	e000      	b.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d84:	2301      	movs	r3, #1
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_DMA_Abort_IT+0xe8>)
 8001d88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
    } 
  }
  return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020008 	.word	0x40020008
 8001db8:	4002001c 	.word	0x4002001c
 8001dbc:	40020030 	.word	0x40020030
 8001dc0:	40020044 	.word	0x40020044
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	4002006c 	.word	0x4002006c
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e169      	b.n	80020b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8158 	bne.w	80020b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a9a      	ldr	r2, [pc, #616]	; (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05e      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e0c:	4a98      	ldr	r2, [pc, #608]	; (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d875      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e12:	4a98      	ldr	r2, [pc, #608]	; (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d058      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e18:	4a96      	ldr	r2, [pc, #600]	; (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d86f      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e1e:	4a96      	ldr	r2, [pc, #600]	; (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d052      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e24:	4a94      	ldr	r2, [pc, #592]	; (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d869      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e2a:	4a94      	ldr	r2, [pc, #592]	; (800207c <HAL_GPIO_Init+0x2ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04c      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e30:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_GPIO_Init+0x2ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d863      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e36:	4a92      	ldr	r2, [pc, #584]	; (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d046      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e3c:	4a90      	ldr	r2, [pc, #576]	; (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d85d      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d82a      	bhi.n	8001e9c <HAL_GPIO_Init+0xcc>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d859      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <HAL_GPIO_Init+0x80>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001eff 	.word	0x08001eff
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001eff 	.word	0x08001eff
 8001e6c:	08001eff 	.word	0x08001eff
 8001e70:	08001eff 	.word	0x08001eff
 8001e74:	08001eff 	.word	0x08001eff
 8001e78:	08001eff 	.word	0x08001eff
 8001e7c:	08001eff 	.word	0x08001eff
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001eff 	.word	0x08001eff
 8001e90:	08001eff 	.word	0x08001eff
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	4a79      	ldr	r2, [pc, #484]	; (8002084 <HAL_GPIO_Init+0x2b4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e029      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e024      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01f      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e01a      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e013      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          break;
 8001efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d801      	bhi.n	8001f0a <HAL_GPIO_Init+0x13a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_Init+0x13e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d802      	bhi.n	8001f1c <HAL_GPIO_Init+0x14c>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x152>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3b08      	subs	r3, #8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	210f      	movs	r1, #15
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80b1 	beq.w	80020b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2bc>)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <HAL_GPIO_Init+0x2c0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_GPIO_Init+0x1ec>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <HAL_GPIO_Init+0x2c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_GPIO_Init+0x2c8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e004      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fce:	492f      	ldr	r1, [pc, #188]	; (800208c <HAL_GPIO_Init+0x2bc>)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	492c      	ldr	r1, [pc, #176]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4928      	ldr	r1, [pc, #160]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002000:	4013      	ands	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4922      	ldr	r1, [pc, #136]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	491e      	ldr	r1, [pc, #120]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002028:	4013      	ands	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4918      	ldr	r1, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4914      	ldr	r1, [pc, #80]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d021      	beq.n	80020a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
 800206c:	e021      	b.n	80020b2 <HAL_GPIO_Init+0x2e2>
 800206e:	bf00      	nop
 8002070:	10320000 	.word	0x10320000
 8002074:	10310000 	.word	0x10310000
 8002078:	10220000 	.word	0x10220000
 800207c:	10210000 	.word	0x10210000
 8002080:	10120000 	.word	0x10120000
 8002084:	10110000 	.word	0x10110000
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	40010800 	.word	0x40010800
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40011000 	.word	0x40011000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_GPIO_Init+0x304>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_GPIO_Init+0x304>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f47f ae8e 	bne.w	8001de4 <HAL_GPIO_Init+0x14>
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	372c      	adds	r7, #44	; 0x2c
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	807b      	strh	r3, [r7, #2]
 8002112:	4613      	mov	r3, r2
 8002114:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002116:	787b      	ldrb	r3, [r7, #1]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211c:	887a      	ldrh	r2, [r7, #2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002122:	e003      	b.n	800212c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
	...

08002138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e26c      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8087 	beq.w	8002266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002158:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00c      	beq.n	800217e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002164:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d112      	bne.n	8002196 <HAL_RCC_OscConfig+0x5e>
 8002170:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d10b      	bne.n	8002196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	4b89      	ldr	r3, [pc, #548]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d06c      	beq.n	8002264 <HAL_RCC_OscConfig+0x12c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d168      	bne.n	8002264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e246      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x76>
 80021a0:	4b80      	ldr	r3, [pc, #512]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a7f      	ldr	r2, [pc, #508]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e02e      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x98>
 80021b6:	4b7b      	ldr	r3, [pc, #492]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7a      	ldr	r2, [pc, #488]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a77      	ldr	r2, [pc, #476]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e01d      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0xbc>
 80021da:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a71      	ldr	r2, [pc, #452]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021f4:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6a      	ldr	r2, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a67      	ldr	r2, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fc14 	bl	8001a40 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff fc10 	bl	8001a40 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1fa      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b5d      	ldr	r3, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0xe4>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fc00 	bl	8001a40 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fbfc 	bl	8001a40 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1e6      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x10c>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227e:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b08      	cmp	r3, #8
 8002288:	d11c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x18c>
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x176>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1ba      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4939      	ldr	r1, [pc, #228]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	e03a      	b.n	800233a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fbb5 	bl	8001a40 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff fbb1 	bl	8001a40 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e19b      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4927      	ldr	r1, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fb94 	bl	8001a40 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff fb90 	bl	8001a40 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e17a      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d03a      	beq.n	80023bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff fb74 	bl	8001a40 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff fb70 	bl	8001a40 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e15a      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f000 fad8 	bl	8002930 <RCC_Delay>
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7ff fb5a 	bl	8001a40 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff fb56 	bl	8001a40 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d908      	bls.n	80023b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e140      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	42420000 	.word	0x42420000
 80023ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	4b9e      	ldr	r3, [pc, #632]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e9      	bne.n	8002390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a6 	beq.w	8002516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b97      	ldr	r3, [pc, #604]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b94      	ldr	r3, [pc, #592]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a93      	ldr	r2, [pc, #588]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b91      	ldr	r3, [pc, #580]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7ff fb17 	bl	8001a40 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff fb13 	bl	8001a40 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0fd      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x312>
 800243c:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e02d      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x334>
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a75      	ldr	r2, [pc, #468]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a72      	ldr	r2, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x356>
 8002474:	4b6d      	ldr	r3, [pc, #436]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a6c      	ldr	r2, [pc, #432]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a69      	ldr	r2, [pc, #420]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a66      	ldr	r2, [pc, #408]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fac7 	bl	8001a40 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff fac3 	bl	8001a40 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0ab      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x37e>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff fab1 	bl	8001a40 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff faad 	bl	8001a40 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e095      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b48      	ldr	r3, [pc, #288]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a47      	ldr	r2, [pc, #284]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8081 	beq.w	8002622 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d061      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d146      	bne.n	80025c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x4fc>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fa81 	bl	8001a40 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7ff fa7d 	bl	8001a40 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e067      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	492d      	ldr	r1, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a19      	ldr	r1, [r3, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	430b      	orrs	r3, r1
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x4fc>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fa51 	bl	8001a40 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff fa4d 	bl	8001a40 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e037      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46a>
 80025c0:	e02f      	b.n	8002622 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_RCC_OscConfig+0x4fc>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fa3a 	bl	8001a40 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fa36 	bl	8001a40 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e020      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x498>
 80025ee:	e018      	b.n	8002622 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
 8002634:	42420060 	.word	0x42420060

08002638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0d0      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4965      	ldr	r1, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e073      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4936      	ldr	r1, [pc, #216]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002728:	f7ff f98a 	bl	8001a40 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7ff f986 	bl	8001a40 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e053      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d210      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1cc>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1d0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f8e8 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
 8002800:	08004bc0 	.word	0x08004bc0
 8002804:	20000024 	.word	0x20000024
 8002808:	20000028 	.word	0x20000028

0800280c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b490      	push	{r4, r7}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002812:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002814:	1d3c      	adds	r4, r7, #4
 8002816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800281c:	f240 2301 	movw	r3, #513	; 0x201
 8002820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b04      	cmp	r3, #4
 8002844:	d002      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002846:	2b08      	cmp	r3, #8
 8002848:	d003      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0x46>
 800284a:	e02d      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800284e:	623b      	str	r3, [r7, #32]
      break;
 8002850:	e02d      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	0c9b      	lsrs	r3, r3, #18
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800285e:	4413      	add	r3, r2
 8002860:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002864:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	0c5b      	lsrs	r3, r3, #17
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287e:	4413      	add	r3, r2
 8002880:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002884:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800288a:	fb02 f203 	mul.w	r2, r2, r3
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	e004      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	623b      	str	r3, [r7, #32]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028aa:	623b      	str	r3, [r7, #32]
      break;
 80028ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ae:	6a3b      	ldr	r3, [r7, #32]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc90      	pop	{r4, r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	08004bb0 	.word	0x08004bb0
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	003d0900 	.word	0x003d0900

080028cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <HAL_RCC_GetHCLKFreq+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000024 	.word	0x20000024

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff2 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	08004bd0 	.word	0x08004bd0

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffde 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0adb      	lsrs	r3, r3, #11
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	08004bd0 	.word	0x08004bd0

08002930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <RCC_Delay+0x34>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <RCC_Delay+0x38>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a5b      	lsrs	r3, r3, #9
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800294c:	bf00      	nop
  }
  while (Delay --);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	60fa      	str	r2, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f9      	bne.n	800294c <RCC_Delay+0x1c>
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000024 	.word	0x20000024
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e041      	b.n	8002a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe fe64 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 fc28 	bl	8003200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d001      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e03a      	b.n	8002a9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00e      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d009      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x58>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_TIM_Base_Start_IT+0xa0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d111      	bne.n	8002a88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d010      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	e007      	b.n	8002a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e041      	b.n	8002b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f839 	bl	8002b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fb86 	bl	8003200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_TIM_PWM_Start+0x24>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e022      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d109      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x3e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e015      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d109      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x58>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e05e      	b.n	8002c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x82>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be0:	e013      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x92>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xa2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c00:	e003      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd74 	bl	8003700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d009      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_PWM_Start+0x13c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIM_PWM_Start+0x140>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d010      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7c:	e007      	b.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa6f 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa62 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa71 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa45 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa38 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa47 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa1b 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa0e 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa1d 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9f1 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9e4 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9f3 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0201 	mvn.w	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fb12 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fce1 	bl	8003816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9b7 	bl	80031ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fcac 	bl	8003804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ac      	b.n	8003028 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 809f 	bhi.w	800301c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	0800301d 	.word	0x0800301d
 8002eec:	0800301d 	.word	0x0800301d
 8002ef0:	0800301d 	.word	0x0800301d
 8002ef4:	08002f59 	.word	0x08002f59
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	0800301d 	.word	0x0800301d
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	0800301d 	.word	0x0800301d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	08002fdb 	.word	0x08002fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f9d0 	bl	80032c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	619a      	str	r2, [r3, #24]
      break;
 8002f56:	e062      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa16 	bl	8003390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
      break;
 8002f98:	e041      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa5f 	bl	8003464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0208 	orr.w	r2, r2, #8
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e021      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 faa9 	bl	8003538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	61da      	str	r2, [r3, #28]
      break;
 800301a:	e000      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800301c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x18>
 8003044:	2302      	movs	r3, #2
 8003046:	e0b3      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x180>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d03e      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xd0>
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	f200 8087 	bhi.w	8003198 <HAL_TIM_ConfigClockSource+0x168>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	f000 8085 	beq.w	800319c <HAL_TIM_ConfigClockSource+0x16c>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d87f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d01a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xa2>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d87b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d050      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x116>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d877      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d03c      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xf6>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d873      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d058      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x136>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d86f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d064      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x156>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d86b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d060      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x156>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d867      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x156>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d05a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030d0:	e062      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 faee 	bl	80036c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e04e      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f000 fad7 	bl	80036c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003122:	609a      	str	r2, [r3, #8]
      break;
 8003124:	e03b      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f000 fa4e 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2150      	movs	r1, #80	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f000 faa5 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003144:	e02b      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 fa6c 	bl	8003630 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2160      	movs	r1, #96	; 0x60
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa95 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003164:	e01b      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fa2e 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2140      	movs	r1, #64	; 0x40
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa85 	bl	800368e <TIM_ITRx_SetConfig>
      break;
 8003184:	e00b      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fa7c 	bl	800368e <TIM_ITRx_SetConfig>
        break;
 8003196:	e002      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800319c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d108      	bne.n	8003274 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800

080032c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0201 	bic.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0302 	bic.w	r3, r3, #2
 800330c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a1c      	ldr	r2, [pc, #112]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0308 	bic.w	r3, r3, #8
 8003326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <TIM_OC1_SetConfig+0xc8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0210 	bic.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_OC2_SetConfig+0xd0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10d      	bne.n	800340c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <TIM_OC2_SetConfig+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d113      	bne.n	800343c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <TIM_OC3_SetConfig+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10d      	bne.n	80034de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <TIM_OC3_SetConfig+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40012c00 	.word	0x40012c00

08003538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <TIM_OC4_SetConfig+0x98>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d109      	bne.n	80035ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 0210 	bic.w	r2, r3, #16
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	031b      	lsls	r3, r3, #12
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f043 0307 	orr.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	609a      	str	r2, [r3, #8]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e046      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e03f      	b.n	80038ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd ff70 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fc85 	bl	800417c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08a      	sub	sp, #40	; 0x28
 80038c6:	af02      	add	r7, sp, #8
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d17c      	bne.n	80039dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_Transmit+0x2c>
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e075      	b.n	80039de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_UART_Transmit+0x3e>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e06e      	b.n	80039de <HAL_UART_Transmit+0x11c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2221      	movs	r2, #33	; 0x21
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003916:	f7fe f893 	bl	8001a40 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d108      	bne.n	8003944 <HAL_UART_Transmit+0x82>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003954:	e02a      	b.n	80039ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fa38 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e036      	b.n	80039de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3302      	adds	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	e007      	b.n	800399e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1cf      	bne.n	8003956 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	; 0x40
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fa08 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e006      	b.n	80039de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	4613      	mov	r3, r2
 80039f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d11d      	bne.n	8003a3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_UART_Receive_IT+0x26>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e016      	b.n	8003a3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Receive_IT+0x38>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e00f      	b.n	8003a3e <HAL_UART_Receive_IT+0x58>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa19 	bl	8003e6a <UART_Start_Receive_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x52>
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fac9 	bl	800402a <UART_Receive_IT>
      return;
 8003a98:	e17b      	b.n	8003d92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80b1 	beq.w	8003c04 <HAL_UART_IRQHandler+0x1bc>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x70>
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a6 	beq.w	8003c04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x90>
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_UART_IRQHandler+0xb0>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0202 	orr.w	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_UART_IRQHandler+0xd0>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f043 0204 	orr.w	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00f      	beq.n	8003b42 <HAL_UART_IRQHandler+0xfa>
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_UART_IRQHandler+0xee>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 811e 	beq.w	8003d88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <HAL_UART_IRQHandler+0x11e>
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa62 	bl	800402a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <HAL_UART_IRQHandler+0x146>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d031      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9a4 	bl	8003edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d023      	beq.n	8003bea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d013      	beq.n	8003be2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	4a76      	ldr	r2, [pc, #472]	; (8003d98 <HAL_UART_IRQHandler+0x350>)
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe f88c 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e00e      	b.n	8003c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8e3 	bl	8003dae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00a      	b.n	8003c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8df 	bl	8003dae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e006      	b.n	8003c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8db 	bl	8003dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bfe:	e0c3      	b.n	8003d88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	bf00      	nop
    return;
 8003c02:	e0c1      	b.n	8003d88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 80a1 	bne.w	8003d50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 809b 	beq.w	8003d50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8095 	beq.w	8003d50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04e      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c54:	8a3b      	ldrh	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8098 	beq.w	8003d8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c60:	8a3a      	ldrh	r2, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	f080 8092 	bcs.w	8003d8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8a3a      	ldrh	r2, [r7, #16]
 8003c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d02b      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0210 	bic.w	r2, r2, #16
 8003cc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd ffcf 	bl	8001c6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f86d 	bl	8003dc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ce6:	e051      	b.n	8003d8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d047      	beq.n	8003d90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d00:	8a7b      	ldrh	r3, [r7, #18]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0210 	bic.w	r2, r2, #16
 8003d42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d44:	8a7b      	ldrh	r3, [r7, #18]
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f839 	bl	8003dc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d4e:	e01f      	b.n	8003d90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_UART_IRQHandler+0x324>
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8f9 	bl	8003f5c <UART_Transmit_IT>
    return;
 8003d6a:	e012      	b.n	8003d92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_UART_IRQHandler+0x34a>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f93a 	bl	8003ffa <UART_EndTransmit_IT>
    return;
 8003d86:	e004      	b.n	8003d92 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d90:	bf00      	nop
  }
}
 8003d92:	3728      	adds	r7, #40	; 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08003f35 	.word	0x08003f35

08003d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	e02c      	b.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d028      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df6:	f7fd fe23 	bl	8001a40 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d21d      	bcs.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e00f      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0c3      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2222      	movs	r2, #34	; 0x22
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ef2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d107      	bne.n	8003f1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0210 	bic.w	r2, r2, #16
 8003f1a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff2d 	bl	8003dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	; 0x21
 8003f6e:	d13e      	bne.n	8003fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f78:	d114      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	e008      	b.n	8003fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6211      	str	r1, [r2, #32]
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff febe 	bl	8003d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b22      	cmp	r3, #34	; 0x22
 800403c:	f040 8099 	bne.w	8004172 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d117      	bne.n	800407a <UART_Receive_IT+0x50>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004068:	b29a      	uxth	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
 8004078:	e026      	b.n	80040c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d007      	beq.n	800409e <UART_Receive_IT+0x74>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <UART_Receive_IT+0x82>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d148      	bne.n	800416e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0220 	bic.w	r2, r2, #32
 80040ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	d123      	bne.n	8004164 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0210 	bic.w	r2, r2, #16
 8004130:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d10a      	bne.n	8004156 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe2f 	bl	8003dc0 <HAL_UARTEx_RxEventCallback>
 8004162:	e002      	b.n	800416a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc ff91 	bl	800108c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e002      	b.n	8004174 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041b6:	f023 030c 	bic.w	r3, r3, #12
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <UART_SetConfig+0x114>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7fe fb90 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	e002      	b.n	80041f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fb78 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80041f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <UART_SetConfig+0x118>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	0119      	lsls	r1, r3, #4
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <UART_SetConfig+0x118>)
 800422a:	fba3 0302 	umull	r0, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2064      	movs	r0, #100	; 0x64
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <UART_SetConfig+0x118>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004248:	4419      	add	r1, r3
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009a      	lsls	r2, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <UART_SetConfig+0x118>)
 8004262:	fba3 0302 	umull	r0, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2064      	movs	r0, #100	; 0x64
 800426a:	fb00 f303 	mul.w	r3, r0, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	3332      	adds	r3, #50	; 0x32
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <UART_SetConfig+0x118>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	440a      	add	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40013800 	.word	0x40013800
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000030 	.word	0x20000030

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4d0c      	ldr	r5, [pc, #48]	; (80042dc <__libc_init_array+0x38>)
 80042aa:	4c0d      	ldr	r4, [pc, #52]	; (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	f000 fc5c 	bl	8004b70 <_init>
 80042b8:	2600      	movs	r6, #0
 80042ba:	4d0a      	ldr	r5, [pc, #40]	; (80042e4 <__libc_init_array+0x40>)
 80042bc:	4c0a      	ldr	r4, [pc, #40]	; (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08004c0c 	.word	0x08004c0c
 80042e0:	08004c0c 	.word	0x08004c0c
 80042e4:	08004c0c 	.word	0x08004c0c
 80042e8:	08004c10 	.word	0x08004c10

080042ec <memset>:
 80042ec:	4603      	mov	r3, r0
 80042ee:	4402      	add	r2, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <siprintf>:
 80042fc:	b40e      	push	{r1, r2, r3}
 80042fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004302:	b500      	push	{lr}
 8004304:	b09c      	sub	sp, #112	; 0x70
 8004306:	ab1d      	add	r3, sp, #116	; 0x74
 8004308:	9002      	str	r0, [sp, #8]
 800430a:	9006      	str	r0, [sp, #24]
 800430c:	9107      	str	r1, [sp, #28]
 800430e:	9104      	str	r1, [sp, #16]
 8004310:	4808      	ldr	r0, [pc, #32]	; (8004334 <siprintf+0x38>)
 8004312:	4909      	ldr	r1, [pc, #36]	; (8004338 <siprintf+0x3c>)
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	a902      	add	r1, sp, #8
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	f000 f868 	bl	80043f4 <_svfiprintf_r>
 8004324:	2200      	movs	r2, #0
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	b01c      	add	sp, #112	; 0x70
 800432c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004330:	b003      	add	sp, #12
 8004332:	4770      	bx	lr
 8004334:	20000030 	.word	0x20000030
 8004338:	ffff0208 	.word	0xffff0208

0800433c <__ssputs_r>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	688e      	ldr	r6, [r1, #8]
 8004342:	4682      	mov	sl, r0
 8004344:	429e      	cmp	r6, r3
 8004346:	460c      	mov	r4, r1
 8004348:	4690      	mov	r8, r2
 800434a:	461f      	mov	r7, r3
 800434c:	d838      	bhi.n	80043c0 <__ssputs_r+0x84>
 800434e:	898a      	ldrh	r2, [r1, #12]
 8004350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004354:	d032      	beq.n	80043bc <__ssputs_r+0x80>
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	6909      	ldr	r1, [r1, #16]
 800435a:	3301      	adds	r3, #1
 800435c:	eba5 0901 	sub.w	r9, r5, r1
 8004360:	6965      	ldr	r5, [r4, #20]
 8004362:	444b      	add	r3, r9
 8004364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800436c:	106d      	asrs	r5, r5, #1
 800436e:	429d      	cmp	r5, r3
 8004370:	bf38      	it	cc
 8004372:	461d      	movcc	r5, r3
 8004374:	0553      	lsls	r3, r2, #21
 8004376:	d531      	bpl.n	80043dc <__ssputs_r+0xa0>
 8004378:	4629      	mov	r1, r5
 800437a:	f000 fb53 	bl	8004a24 <_malloc_r>
 800437e:	4606      	mov	r6, r0
 8004380:	b950      	cbnz	r0, 8004398 <__ssputs_r+0x5c>
 8004382:	230c      	movs	r3, #12
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f8ca 3000 	str.w	r3, [sl]
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004398:	464a      	mov	r2, r9
 800439a:	6921      	ldr	r1, [r4, #16]
 800439c:	f000 face 	bl	800493c <memcpy>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	6126      	str	r6, [r4, #16]
 80043ae:	444e      	add	r6, r9
 80043b0:	6026      	str	r6, [r4, #0]
 80043b2:	463e      	mov	r6, r7
 80043b4:	6165      	str	r5, [r4, #20]
 80043b6:	eba5 0509 	sub.w	r5, r5, r9
 80043ba:	60a5      	str	r5, [r4, #8]
 80043bc:	42be      	cmp	r6, r7
 80043be:	d900      	bls.n	80043c2 <__ssputs_r+0x86>
 80043c0:	463e      	mov	r6, r7
 80043c2:	4632      	mov	r2, r6
 80043c4:	4641      	mov	r1, r8
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	f000 fac6 	bl	8004958 <memmove>
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	1b9b      	subs	r3, r3, r6
 80043d2:	4432      	add	r2, r6
 80043d4:	2000      	movs	r0, #0
 80043d6:	60a3      	str	r3, [r4, #8]
 80043d8:	6022      	str	r2, [r4, #0]
 80043da:	e7db      	b.n	8004394 <__ssputs_r+0x58>
 80043dc:	462a      	mov	r2, r5
 80043de:	f000 fb7b 	bl	8004ad8 <_realloc_r>
 80043e2:	4606      	mov	r6, r0
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1e1      	bne.n	80043ac <__ssputs_r+0x70>
 80043e8:	4650      	mov	r0, sl
 80043ea:	6921      	ldr	r1, [r4, #16]
 80043ec:	f000 face 	bl	800498c <_free_r>
 80043f0:	e7c7      	b.n	8004382 <__ssputs_r+0x46>
	...

080043f4 <_svfiprintf_r>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	4698      	mov	r8, r3
 80043fa:	898b      	ldrh	r3, [r1, #12]
 80043fc:	4607      	mov	r7, r0
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	460d      	mov	r5, r1
 8004402:	4614      	mov	r4, r2
 8004404:	b09d      	sub	sp, #116	; 0x74
 8004406:	d50e      	bpl.n	8004426 <_svfiprintf_r+0x32>
 8004408:	690b      	ldr	r3, [r1, #16]
 800440a:	b963      	cbnz	r3, 8004426 <_svfiprintf_r+0x32>
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	f000 fb09 	bl	8004a24 <_malloc_r>
 8004412:	6028      	str	r0, [r5, #0]
 8004414:	6128      	str	r0, [r5, #16]
 8004416:	b920      	cbnz	r0, 8004422 <_svfiprintf_r+0x2e>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e0d1      	b.n	80045c6 <_svfiprintf_r+0x1d2>
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	616b      	str	r3, [r5, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	2320      	movs	r3, #32
 800442c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004430:	2330      	movs	r3, #48	; 0x30
 8004432:	f04f 0901 	mov.w	r9, #1
 8004436:	f8cd 800c 	str.w	r8, [sp, #12]
 800443a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045e0 <_svfiprintf_r+0x1ec>
 800443e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004442:	4623      	mov	r3, r4
 8004444:	469a      	mov	sl, r3
 8004446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444a:	b10a      	cbz	r2, 8004450 <_svfiprintf_r+0x5c>
 800444c:	2a25      	cmp	r2, #37	; 0x25
 800444e:	d1f9      	bne.n	8004444 <_svfiprintf_r+0x50>
 8004450:	ebba 0b04 	subs.w	fp, sl, r4
 8004454:	d00b      	beq.n	800446e <_svfiprintf_r+0x7a>
 8004456:	465b      	mov	r3, fp
 8004458:	4622      	mov	r2, r4
 800445a:	4629      	mov	r1, r5
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ff6d 	bl	800433c <__ssputs_r>
 8004462:	3001      	adds	r0, #1
 8004464:	f000 80aa 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446a:	445a      	add	r2, fp
 800446c:	9209      	str	r2, [sp, #36]	; 0x24
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a2 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004478:	2300      	movs	r3, #0
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004482:	f10a 0a01 	add.w	sl, sl, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	9307      	str	r3, [sp, #28]
 800448a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448e:	931a      	str	r3, [sp, #104]	; 0x68
 8004490:	4654      	mov	r4, sl
 8004492:	2205      	movs	r2, #5
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	4851      	ldr	r0, [pc, #324]	; (80045e0 <_svfiprintf_r+0x1ec>)
 800449a:	f000 fa41 	bl	8004920 <memchr>
 800449e:	9a04      	ldr	r2, [sp, #16]
 80044a0:	b9d8      	cbnz	r0, 80044da <_svfiprintf_r+0xe6>
 80044a2:	06d0      	lsls	r0, r2, #27
 80044a4:	bf44      	itt	mi
 80044a6:	2320      	movmi	r3, #32
 80044a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ac:	0711      	lsls	r1, r2, #28
 80044ae:	bf44      	itt	mi
 80044b0:	232b      	movmi	r3, #43	; 0x2b
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d015      	beq.n	80044ea <_svfiprintf_r+0xf6>
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	9a07      	ldr	r2, [sp, #28]
 80044c8:	4621      	mov	r1, r4
 80044ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ce:	3b30      	subs	r3, #48	; 0x30
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d94e      	bls.n	8004572 <_svfiprintf_r+0x17e>
 80044d4:	b1b0      	cbz	r0, 8004504 <_svfiprintf_r+0x110>
 80044d6:	9207      	str	r2, [sp, #28]
 80044d8:	e014      	b.n	8004504 <_svfiprintf_r+0x110>
 80044da:	eba0 0308 	sub.w	r3, r0, r8
 80044de:	fa09 f303 	lsl.w	r3, r9, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	46a2      	mov	sl, r4
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	e7d2      	b.n	8004490 <_svfiprintf_r+0x9c>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9103      	str	r1, [sp, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbb      	ittet	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	f042 0202 	orrlt.w	r2, r2, #2
 80044fc:	9307      	strge	r3, [sp, #28]
 80044fe:	9307      	strlt	r3, [sp, #28]
 8004500:	bfb8      	it	lt
 8004502:	9204      	strlt	r2, [sp, #16]
 8004504:	7823      	ldrb	r3, [r4, #0]
 8004506:	2b2e      	cmp	r3, #46	; 0x2e
 8004508:	d10c      	bne.n	8004524 <_svfiprintf_r+0x130>
 800450a:	7863      	ldrb	r3, [r4, #1]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d135      	bne.n	800457c <_svfiprintf_r+0x188>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	3402      	adds	r4, #2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9203      	str	r2, [sp, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045f0 <_svfiprintf_r+0x1fc>
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	7821      	ldrb	r1, [r4, #0]
 800452e:	f000 f9f7 	bl	8004920 <memchr>
 8004532:	b140      	cbz	r0, 8004546 <_svfiprintf_r+0x152>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	eba0 000a 	sub.w	r0, r0, sl
 800453a:	fa03 f000 	lsl.w	r0, r3, r0
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	3401      	adds	r4, #1
 8004542:	4303      	orrs	r3, r0
 8004544:	9304      	str	r3, [sp, #16]
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	2206      	movs	r2, #6
 800454c:	4825      	ldr	r0, [pc, #148]	; (80045e4 <_svfiprintf_r+0x1f0>)
 800454e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004552:	f000 f9e5 	bl	8004920 <memchr>
 8004556:	2800      	cmp	r0, #0
 8004558:	d038      	beq.n	80045cc <_svfiprintf_r+0x1d8>
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <_svfiprintf_r+0x1f4>)
 800455c:	bb1b      	cbnz	r3, 80045a6 <_svfiprintf_r+0x1b2>
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	3307      	adds	r3, #7
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	3308      	adds	r3, #8
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456c:	4433      	add	r3, r6
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	e767      	b.n	8004442 <_svfiprintf_r+0x4e>
 8004572:	460c      	mov	r4, r1
 8004574:	2001      	movs	r0, #1
 8004576:	fb0c 3202 	mla	r2, ip, r2, r3
 800457a:	e7a5      	b.n	80044c8 <_svfiprintf_r+0xd4>
 800457c:	2300      	movs	r3, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	4619      	mov	r1, r3
 8004584:	3401      	adds	r4, #1
 8004586:	9305      	str	r3, [sp, #20]
 8004588:	4620      	mov	r0, r4
 800458a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458e:	3a30      	subs	r2, #48	; 0x30
 8004590:	2a09      	cmp	r2, #9
 8004592:	d903      	bls.n	800459c <_svfiprintf_r+0x1a8>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0c5      	beq.n	8004524 <_svfiprintf_r+0x130>
 8004598:	9105      	str	r1, [sp, #20]
 800459a:	e7c3      	b.n	8004524 <_svfiprintf_r+0x130>
 800459c:	4604      	mov	r4, r0
 800459e:	2301      	movs	r3, #1
 80045a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a4:	e7f0      	b.n	8004588 <_svfiprintf_r+0x194>
 80045a6:	ab03      	add	r3, sp, #12
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	462a      	mov	r2, r5
 80045ac:	4638      	mov	r0, r7
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045b0:	a904      	add	r1, sp, #16
 80045b2:	f3af 8000 	nop.w
 80045b6:	1c42      	adds	r2, r0, #1
 80045b8:	4606      	mov	r6, r0
 80045ba:	d1d6      	bne.n	800456a <_svfiprintf_r+0x176>
 80045bc:	89ab      	ldrh	r3, [r5, #12]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	f53f af2c 	bmi.w	800441c <_svfiprintf_r+0x28>
 80045c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c6:	b01d      	add	sp, #116	; 0x74
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045cc:	ab03      	add	r3, sp, #12
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	462a      	mov	r2, r5
 80045d2:	4638      	mov	r0, r7
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045d6:	a904      	add	r1, sp, #16
 80045d8:	f000 f87c 	bl	80046d4 <_printf_i>
 80045dc:	e7eb      	b.n	80045b6 <_svfiprintf_r+0x1c2>
 80045de:	bf00      	nop
 80045e0:	08004bd8 	.word	0x08004bd8
 80045e4:	08004be2 	.word	0x08004be2
 80045e8:	00000000 	.word	0x00000000
 80045ec:	0800433d 	.word	0x0800433d
 80045f0:	08004bde 	.word	0x08004bde

080045f4 <_printf_common>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	4616      	mov	r6, r2
 80045fa:	4699      	mov	r9, r3
 80045fc:	688a      	ldr	r2, [r1, #8]
 80045fe:	690b      	ldr	r3, [r1, #16]
 8004600:	4607      	mov	r7, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	bfb8      	it	lt
 8004606:	4613      	movlt	r3, r2
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460e:	460c      	mov	r4, r1
 8004610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004614:	b10a      	cbz	r2, 800461a <_printf_common+0x26>
 8004616:	3301      	adds	r3, #1
 8004618:	6033      	str	r3, [r6, #0]
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	0699      	lsls	r1, r3, #26
 800461e:	bf42      	ittt	mi
 8004620:	6833      	ldrmi	r3, [r6, #0]
 8004622:	3302      	addmi	r3, #2
 8004624:	6033      	strmi	r3, [r6, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	f015 0506 	ands.w	r5, r5, #6
 800462c:	d106      	bne.n	800463c <_printf_common+0x48>
 800462e:	f104 0a19 	add.w	sl, r4, #25
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	42ab      	cmp	r3, r5
 800463a:	dc28      	bgt.n	800468e <_printf_common+0x9a>
 800463c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004640:	1e13      	subs	r3, r2, #0
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	bf18      	it	ne
 8004646:	2301      	movne	r3, #1
 8004648:	0692      	lsls	r2, r2, #26
 800464a:	d42d      	bmi.n	80046a8 <_printf_common+0xb4>
 800464c:	4649      	mov	r1, r9
 800464e:	4638      	mov	r0, r7
 8004650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d020      	beq.n	800469c <_printf_common+0xa8>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	68e5      	ldr	r5, [r4, #12]
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	2b04      	cmp	r3, #4
 8004664:	bf18      	it	ne
 8004666:	2500      	movne	r5, #0
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	68a3      	ldr	r3, [r4, #8]
 8004670:	bf08      	it	eq
 8004672:	1aad      	subeq	r5, r5, r2
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf08      	it	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	4293      	cmp	r3, r2
 800467e:	bfc4      	itt	gt
 8004680:	1a9b      	subgt	r3, r3, r2
 8004682:	18ed      	addgt	r5, r5, r3
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xcc>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xac>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4649      	mov	r1, r9
 8004694:	4638      	mov	r0, r7
 8004696:	47c0      	blx	r8
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xb0>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c4      	b.n	8004632 <_printf_common+0x3e>
 80046a8:	2030      	movs	r0, #48	; 0x30
 80046aa:	18e1      	adds	r1, r4, r3
 80046ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b6:	4422      	add	r2, r4
 80046b8:	3302      	adds	r3, #2
 80046ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046be:	e7c5      	b.n	800464c <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4649      	mov	r1, r9
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c0      	blx	r8
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa8>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x92>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	460c      	mov	r4, r1
 80046da:	7e27      	ldrb	r7, [r4, #24]
 80046dc:	4691      	mov	r9, r2
 80046de:	2f78      	cmp	r7, #120	; 0x78
 80046e0:	4680      	mov	r8, r0
 80046e2:	469a      	mov	sl, r3
 80046e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	; 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d9 	beq.w	80048a8 <_printf_i+0x1d4>
 80046f6:	2f58      	cmp	r7, #88	; 0x58
 80046f8:	f000 80a4 	beq.w	8004844 <_printf_i+0x170>
 80046fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a001      	add	r0, pc, #4	; (adr r0, 8004714 <_printf_i+0x40>)
 8004710:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	0800488f 	.word	0x0800488f
 8004744:	080047b1 	.word	0x080047b1
 8004748:	08004871 	.word	0x08004871
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048b1 	.word	0x080048b1
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047b1 	.word	0x080047b1
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004879 	.word	0x08004879
 800476c:	680b      	ldr	r3, [r1, #0]
 800476e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	600a      	str	r2, [r1, #0]
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e0a4      	b.n	80048ca <_printf_i+0x1f6>
 8004780:	6825      	ldr	r5, [r4, #0]
 8004782:	6808      	ldr	r0, [r1, #0]
 8004784:	062e      	lsls	r6, r5, #24
 8004786:	f100 0304 	add.w	r3, r0, #4
 800478a:	d50a      	bpl.n	80047a2 <_printf_i+0xce>
 800478c:	6805      	ldr	r5, [r0, #0]
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	2d00      	cmp	r5, #0
 8004792:	da03      	bge.n	800479c <_printf_i+0xc8>
 8004794:	232d      	movs	r3, #45	; 0x2d
 8004796:	426d      	negs	r5, r5
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479c:	230a      	movs	r3, #10
 800479e:	485e      	ldr	r0, [pc, #376]	; (8004918 <_printf_i+0x244>)
 80047a0:	e019      	b.n	80047d6 <_printf_i+0x102>
 80047a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047a6:	6805      	ldr	r5, [r0, #0]
 80047a8:	600b      	str	r3, [r1, #0]
 80047aa:	bf18      	it	ne
 80047ac:	b22d      	sxthne	r5, r5
 80047ae:	e7ef      	b.n	8004790 <_printf_i+0xbc>
 80047b0:	680b      	ldr	r3, [r1, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	1d18      	adds	r0, r3, #4
 80047b6:	6008      	str	r0, [r1, #0]
 80047b8:	0628      	lsls	r0, r5, #24
 80047ba:	d501      	bpl.n	80047c0 <_printf_i+0xec>
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	e002      	b.n	80047c6 <_printf_i+0xf2>
 80047c0:	0669      	lsls	r1, r5, #25
 80047c2:	d5fb      	bpl.n	80047bc <_printf_i+0xe8>
 80047c4:	881d      	ldrh	r5, [r3, #0]
 80047c6:	2f6f      	cmp	r7, #111	; 0x6f
 80047c8:	bf0c      	ite	eq
 80047ca:	2308      	moveq	r3, #8
 80047cc:	230a      	movne	r3, #10
 80047ce:	4852      	ldr	r0, [pc, #328]	; (8004918 <_printf_i+0x244>)
 80047d0:	2100      	movs	r1, #0
 80047d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d6:	6866      	ldr	r6, [r4, #4]
 80047d8:	2e00      	cmp	r6, #0
 80047da:	bfa8      	it	ge
 80047dc:	6821      	ldrge	r1, [r4, #0]
 80047de:	60a6      	str	r6, [r4, #8]
 80047e0:	bfa4      	itt	ge
 80047e2:	f021 0104 	bicge.w	r1, r1, #4
 80047e6:	6021      	strge	r1, [r4, #0]
 80047e8:	b90d      	cbnz	r5, 80047ee <_printf_i+0x11a>
 80047ea:	2e00      	cmp	r6, #0
 80047ec:	d04d      	beq.n	800488a <_printf_i+0x1b6>
 80047ee:	4616      	mov	r6, r2
 80047f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f4:	fb03 5711 	mls	r7, r3, r1, r5
 80047f8:	5dc7      	ldrb	r7, [r0, r7]
 80047fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047fe:	462f      	mov	r7, r5
 8004800:	42bb      	cmp	r3, r7
 8004802:	460d      	mov	r5, r1
 8004804:	d9f4      	bls.n	80047f0 <_printf_i+0x11c>
 8004806:	2b08      	cmp	r3, #8
 8004808:	d10b      	bne.n	8004822 <_printf_i+0x14e>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	07df      	lsls	r7, r3, #31
 800480e:	d508      	bpl.n	8004822 <_printf_i+0x14e>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	6861      	ldr	r1, [r4, #4]
 8004814:	4299      	cmp	r1, r3
 8004816:	bfde      	ittt	le
 8004818:	2330      	movle	r3, #48	; 0x30
 800481a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800481e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004822:	1b92      	subs	r2, r2, r6
 8004824:	6122      	str	r2, [r4, #16]
 8004826:	464b      	mov	r3, r9
 8004828:	4621      	mov	r1, r4
 800482a:	4640      	mov	r0, r8
 800482c:	f8cd a000 	str.w	sl, [sp]
 8004830:	aa03      	add	r2, sp, #12
 8004832:	f7ff fedf 	bl	80045f4 <_printf_common>
 8004836:	3001      	adds	r0, #1
 8004838:	d14c      	bne.n	80048d4 <_printf_i+0x200>
 800483a:	f04f 30ff 	mov.w	r0, #4294967295
 800483e:	b004      	add	sp, #16
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	4834      	ldr	r0, [pc, #208]	; (8004918 <_printf_i+0x244>)
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800484a:	680e      	ldr	r6, [r1, #0]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004852:	061f      	lsls	r7, r3, #24
 8004854:	600e      	str	r6, [r1, #0]
 8004856:	d514      	bpl.n	8004882 <_printf_i+0x1ae>
 8004858:	07d9      	lsls	r1, r3, #31
 800485a:	bf44      	itt	mi
 800485c:	f043 0320 	orrmi.w	r3, r3, #32
 8004860:	6023      	strmi	r3, [r4, #0]
 8004862:	b91d      	cbnz	r5, 800486c <_printf_i+0x198>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2310      	movs	r3, #16
 800486e:	e7af      	b.n	80047d0 <_printf_i+0xfc>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	f043 0320 	orr.w	r3, r3, #32
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	2378      	movs	r3, #120	; 0x78
 800487a:	4828      	ldr	r0, [pc, #160]	; (800491c <_printf_i+0x248>)
 800487c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004880:	e7e3      	b.n	800484a <_printf_i+0x176>
 8004882:	065e      	lsls	r6, r3, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	e7e6      	b.n	8004858 <_printf_i+0x184>
 800488a:	4616      	mov	r6, r2
 800488c:	e7bb      	b.n	8004806 <_printf_i+0x132>
 800488e:	680b      	ldr	r3, [r1, #0]
 8004890:	6826      	ldr	r6, [r4, #0]
 8004892:	1d1d      	adds	r5, r3, #4
 8004894:	6960      	ldr	r0, [r4, #20]
 8004896:	600d      	str	r5, [r1, #0]
 8004898:	0635      	lsls	r5, r6, #24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	d501      	bpl.n	80048a2 <_printf_i+0x1ce>
 800489e:	6018      	str	r0, [r3, #0]
 80048a0:	e002      	b.n	80048a8 <_printf_i+0x1d4>
 80048a2:	0671      	lsls	r1, r6, #25
 80048a4:	d5fb      	bpl.n	800489e <_printf_i+0x1ca>
 80048a6:	8018      	strh	r0, [r3, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	4616      	mov	r6, r2
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	e7ba      	b.n	8004826 <_printf_i+0x152>
 80048b0:	680b      	ldr	r3, [r1, #0]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	600a      	str	r2, [r1, #0]
 80048b6:	681e      	ldr	r6, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4630      	mov	r0, r6
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	f000 f82f 	bl	8004920 <memchr>
 80048c2:	b108      	cbz	r0, 80048c8 <_printf_i+0x1f4>
 80048c4:	1b80      	subs	r0, r0, r6
 80048c6:	6060      	str	r0, [r4, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	2300      	movs	r3, #0
 80048ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d2:	e7a8      	b.n	8004826 <_printf_i+0x152>
 80048d4:	4632      	mov	r2, r6
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	47d0      	blx	sl
 80048de:	3001      	adds	r0, #1
 80048e0:	d0ab      	beq.n	800483a <_printf_i+0x166>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	079b      	lsls	r3, r3, #30
 80048e6:	d413      	bmi.n	8004910 <_printf_i+0x23c>
 80048e8:	68e0      	ldr	r0, [r4, #12]
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	4298      	cmp	r0, r3
 80048ee:	bfb8      	it	lt
 80048f0:	4618      	movlt	r0, r3
 80048f2:	e7a4      	b.n	800483e <_printf_i+0x16a>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4632      	mov	r2, r6
 80048f8:	4649      	mov	r1, r9
 80048fa:	4640      	mov	r0, r8
 80048fc:	47d0      	blx	sl
 80048fe:	3001      	adds	r0, #1
 8004900:	d09b      	beq.n	800483a <_printf_i+0x166>
 8004902:	3501      	adds	r5, #1
 8004904:	68e3      	ldr	r3, [r4, #12]
 8004906:	9903      	ldr	r1, [sp, #12]
 8004908:	1a5b      	subs	r3, r3, r1
 800490a:	42ab      	cmp	r3, r5
 800490c:	dcf2      	bgt.n	80048f4 <_printf_i+0x220>
 800490e:	e7eb      	b.n	80048e8 <_printf_i+0x214>
 8004910:	2500      	movs	r5, #0
 8004912:	f104 0619 	add.w	r6, r4, #25
 8004916:	e7f5      	b.n	8004904 <_printf_i+0x230>
 8004918:	08004be9 	.word	0x08004be9
 800491c:	08004bfa 	.word	0x08004bfa

08004920 <memchr>:
 8004920:	4603      	mov	r3, r0
 8004922:	b510      	push	{r4, lr}
 8004924:	b2c9      	uxtb	r1, r1
 8004926:	4402      	add	r2, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	4618      	mov	r0, r3
 800492c:	d101      	bne.n	8004932 <memchr+0x12>
 800492e:	2000      	movs	r0, #0
 8004930:	e003      	b.n	800493a <memchr+0x1a>
 8004932:	7804      	ldrb	r4, [r0, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	428c      	cmp	r4, r1
 8004938:	d1f6      	bne.n	8004928 <memchr+0x8>
 800493a:	bd10      	pop	{r4, pc}

0800493c <memcpy>:
 800493c:	440a      	add	r2, r1
 800493e:	4291      	cmp	r1, r2
 8004940:	f100 33ff 	add.w	r3, r0, #4294967295
 8004944:	d100      	bne.n	8004948 <memcpy+0xc>
 8004946:	4770      	bx	lr
 8004948:	b510      	push	{r4, lr}
 800494a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494e:	4291      	cmp	r1, r2
 8004950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004954:	d1f9      	bne.n	800494a <memcpy+0xe>
 8004956:	bd10      	pop	{r4, pc}

08004958 <memmove>:
 8004958:	4288      	cmp	r0, r1
 800495a:	b510      	push	{r4, lr}
 800495c:	eb01 0402 	add.w	r4, r1, r2
 8004960:	d902      	bls.n	8004968 <memmove+0x10>
 8004962:	4284      	cmp	r4, r0
 8004964:	4623      	mov	r3, r4
 8004966:	d807      	bhi.n	8004978 <memmove+0x20>
 8004968:	1e43      	subs	r3, r0, #1
 800496a:	42a1      	cmp	r1, r4
 800496c:	d008      	beq.n	8004980 <memmove+0x28>
 800496e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004976:	e7f8      	b.n	800496a <memmove+0x12>
 8004978:	4601      	mov	r1, r0
 800497a:	4402      	add	r2, r0
 800497c:	428a      	cmp	r2, r1
 800497e:	d100      	bne.n	8004982 <memmove+0x2a>
 8004980:	bd10      	pop	{r4, pc}
 8004982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800498a:	e7f7      	b.n	800497c <memmove+0x24>

0800498c <_free_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	2900      	cmp	r1, #0
 8004992:	d043      	beq.n	8004a1c <_free_r+0x90>
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f0c      	subs	r4, r1, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfb8      	it	lt
 800499e:	18e4      	addlt	r4, r4, r3
 80049a0:	f000 f8d0 	bl	8004b44 <__malloc_lock>
 80049a4:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <_free_r+0x94>)
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	4610      	mov	r0, r2
 80049aa:	b933      	cbnz	r3, 80049ba <_free_r+0x2e>
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6014      	str	r4, [r2, #0]
 80049b0:	4628      	mov	r0, r5
 80049b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b6:	f000 b8cb 	b.w	8004b50 <__malloc_unlock>
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	d90a      	bls.n	80049d4 <_free_r+0x48>
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	1862      	adds	r2, r4, r1
 80049c2:	4293      	cmp	r3, r2
 80049c4:	bf01      	itttt	eq
 80049c6:	681a      	ldreq	r2, [r3, #0]
 80049c8:	685b      	ldreq	r3, [r3, #4]
 80049ca:	1852      	addeq	r2, r2, r1
 80049cc:	6022      	streq	r2, [r4, #0]
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	6004      	str	r4, [r0, #0]
 80049d2:	e7ed      	b.n	80049b0 <_free_r+0x24>
 80049d4:	461a      	mov	r2, r3
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b10b      	cbz	r3, 80049de <_free_r+0x52>
 80049da:	42a3      	cmp	r3, r4
 80049dc:	d9fa      	bls.n	80049d4 <_free_r+0x48>
 80049de:	6811      	ldr	r1, [r2, #0]
 80049e0:	1850      	adds	r0, r2, r1
 80049e2:	42a0      	cmp	r0, r4
 80049e4:	d10b      	bne.n	80049fe <_free_r+0x72>
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	4401      	add	r1, r0
 80049ea:	1850      	adds	r0, r2, r1
 80049ec:	4283      	cmp	r3, r0
 80049ee:	6011      	str	r1, [r2, #0]
 80049f0:	d1de      	bne.n	80049b0 <_free_r+0x24>
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4401      	add	r1, r0
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e7d8      	b.n	80049b0 <_free_r+0x24>
 80049fe:	d902      	bls.n	8004a06 <_free_r+0x7a>
 8004a00:	230c      	movs	r3, #12
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	e7d4      	b.n	80049b0 <_free_r+0x24>
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1821      	adds	r1, r4, r0
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	bf01      	itttt	eq
 8004a0e:	6819      	ldreq	r1, [r3, #0]
 8004a10:	685b      	ldreq	r3, [r3, #4]
 8004a12:	1809      	addeq	r1, r1, r0
 8004a14:	6021      	streq	r1, [r4, #0]
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	6054      	str	r4, [r2, #4]
 8004a1a:	e7c9      	b.n	80049b0 <_free_r+0x24>
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000118 	.word	0x20000118

08004a24 <_malloc_r>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	1ccd      	adds	r5, r1, #3
 8004a28:	f025 0503 	bic.w	r5, r5, #3
 8004a2c:	3508      	adds	r5, #8
 8004a2e:	2d0c      	cmp	r5, #12
 8004a30:	bf38      	it	cc
 8004a32:	250c      	movcc	r5, #12
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	4606      	mov	r6, r0
 8004a38:	db01      	blt.n	8004a3e <_malloc_r+0x1a>
 8004a3a:	42a9      	cmp	r1, r5
 8004a3c:	d903      	bls.n	8004a46 <_malloc_r+0x22>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a46:	f000 f87d 	bl	8004b44 <__malloc_lock>
 8004a4a:	4921      	ldr	r1, [pc, #132]	; (8004ad0 <_malloc_r+0xac>)
 8004a4c:	680a      	ldr	r2, [r1, #0]
 8004a4e:	4614      	mov	r4, r2
 8004a50:	b99c      	cbnz	r4, 8004a7a <_malloc_r+0x56>
 8004a52:	4f20      	ldr	r7, [pc, #128]	; (8004ad4 <_malloc_r+0xb0>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b923      	cbnz	r3, 8004a62 <_malloc_r+0x3e>
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 f862 	bl	8004b24 <_sbrk_r>
 8004a60:	6038      	str	r0, [r7, #0]
 8004a62:	4629      	mov	r1, r5
 8004a64:	4630      	mov	r0, r6
 8004a66:	f000 f85d 	bl	8004b24 <_sbrk_r>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	d123      	bne.n	8004ab6 <_malloc_r+0x92>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	4630      	mov	r0, r6
 8004a72:	6033      	str	r3, [r6, #0]
 8004a74:	f000 f86c 	bl	8004b50 <__malloc_unlock>
 8004a78:	e7e3      	b.n	8004a42 <_malloc_r+0x1e>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	1b5b      	subs	r3, r3, r5
 8004a7e:	d417      	bmi.n	8004ab0 <_malloc_r+0x8c>
 8004a80:	2b0b      	cmp	r3, #11
 8004a82:	d903      	bls.n	8004a8c <_malloc_r+0x68>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	441c      	add	r4, r3
 8004a88:	6025      	str	r5, [r4, #0]
 8004a8a:	e004      	b.n	8004a96 <_malloc_r+0x72>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	bf0c      	ite	eq
 8004a92:	600b      	streq	r3, [r1, #0]
 8004a94:	6053      	strne	r3, [r2, #4]
 8004a96:	4630      	mov	r0, r6
 8004a98:	f000 f85a 	bl	8004b50 <__malloc_unlock>
 8004a9c:	f104 000b 	add.w	r0, r4, #11
 8004aa0:	1d23      	adds	r3, r4, #4
 8004aa2:	f020 0007 	bic.w	r0, r0, #7
 8004aa6:	1ac2      	subs	r2, r0, r3
 8004aa8:	d0cc      	beq.n	8004a44 <_malloc_r+0x20>
 8004aaa:	1a1b      	subs	r3, r3, r0
 8004aac:	50a3      	str	r3, [r4, r2]
 8004aae:	e7c9      	b.n	8004a44 <_malloc_r+0x20>
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	6864      	ldr	r4, [r4, #4]
 8004ab4:	e7cc      	b.n	8004a50 <_malloc_r+0x2c>
 8004ab6:	1cc4      	adds	r4, r0, #3
 8004ab8:	f024 0403 	bic.w	r4, r4, #3
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d0e3      	beq.n	8004a88 <_malloc_r+0x64>
 8004ac0:	1a21      	subs	r1, r4, r0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f82e 	bl	8004b24 <_sbrk_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d1dd      	bne.n	8004a88 <_malloc_r+0x64>
 8004acc:	e7cf      	b.n	8004a6e <_malloc_r+0x4a>
 8004ace:	bf00      	nop
 8004ad0:	20000118 	.word	0x20000118
 8004ad4:	2000011c 	.word	0x2000011c

08004ad8 <_realloc_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	4607      	mov	r7, r0
 8004adc:	4614      	mov	r4, r2
 8004ade:	460e      	mov	r6, r1
 8004ae0:	b921      	cbnz	r1, 8004aec <_realloc_r+0x14>
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ae8:	f7ff bf9c 	b.w	8004a24 <_malloc_r>
 8004aec:	b922      	cbnz	r2, 8004af8 <_realloc_r+0x20>
 8004aee:	f7ff ff4d 	bl	800498c <_free_r>
 8004af2:	4625      	mov	r5, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af8:	f000 f830 	bl	8004b5c <_malloc_usable_size_r>
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d20f      	bcs.n	8004b20 <_realloc_r+0x48>
 8004b00:	4621      	mov	r1, r4
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7ff ff8e 	bl	8004a24 <_malloc_r>
 8004b08:	4605      	mov	r5, r0
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d0f2      	beq.n	8004af4 <_realloc_r+0x1c>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4622      	mov	r2, r4
 8004b12:	f7ff ff13 	bl	800493c <memcpy>
 8004b16:	4631      	mov	r1, r6
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f7ff ff37 	bl	800498c <_free_r>
 8004b1e:	e7e9      	b.n	8004af4 <_realloc_r+0x1c>
 8004b20:	4635      	mov	r5, r6
 8004b22:	e7e7      	b.n	8004af4 <_realloc_r+0x1c>

08004b24 <_sbrk_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	2300      	movs	r3, #0
 8004b28:	4d05      	ldr	r5, [pc, #20]	; (8004b40 <_sbrk_r+0x1c>)
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fc fe8e 	bl	8001850 <_sbrk>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_sbrk_r+0x1a>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_sbrk_r+0x1a>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000258 	.word	0x20000258

08004b44 <__malloc_lock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__malloc_lock+0x8>)
 8004b46:	f000 b811 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	20000260 	.word	0x20000260

08004b50 <__malloc_unlock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_unlock+0x8>)
 8004b52:	f000 b80c 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	20000260 	.word	0x20000260

08004b5c <_malloc_usable_size_r>:
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f18      	subs	r0, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbc      	itt	lt
 8004b66:	580b      	ldrlt	r3, [r1, r0]
 8004b68:	18c0      	addlt	r0, r0, r3
 8004b6a:	4770      	bx	lr

08004b6c <__retarget_lock_acquire_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_release_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <_init>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr

08004b7c <_fini>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr
