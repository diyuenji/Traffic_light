
btl_vxl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004c2c  08004c2c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c2c  08004c2c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000094  08004cc8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004cc8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c10  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d37  00000000  00000000  00035ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00038a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e54  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c8  00000000  00000000  0005429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b10b  00000000  00000000  00065764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f086f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000f08c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b90 	.word	0x08004b90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004b90 	.word	0x08004b90

0800014c <isButtonPress>:
int keybuffer[NUM_OF_BUTTONS];
int counter_Button[NUM_OF_BUTTONS];
int flagforLongPress[NUM_OF_BUTTONS];
int flagforPress[NUM_OF_BUTTONS];

int isButtonPress(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (flagforPress[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
		flagforPress[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000120 	.word	0x20000120

08000180 <isButtonLongPress>:

int isButtonLongPress(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	return (flagforLongPress[index] == 1);
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <isButtonLongPress+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	bf0c      	ite	eq
 8000194:	2301      	moveq	r3, #1
 8000196:	2300      	movne	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000160 	.word	0x20000160

080001a8 <button_read>:

void button_read(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e08c      	b.n	80002ce <button_read+0x126>
		key1[i] = key2[i];
 80001b4:	4a4a      	ldr	r2, [pc, #296]	; (80002e0 <button_read+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001bc:	4949      	ldr	r1, [pc, #292]	; (80002e4 <button_read+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <button_read+0x36>
			key2[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001ca:	2101      	movs	r1, #1
 80001cc:	4846      	ldr	r0, [pc, #280]	; (80002e8 <button_read+0x140>)
 80001ce:	f001 ff93 	bl	80020f8 <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4619      	mov	r1, r3
 80001d6:	4a42      	ldr	r2, [pc, #264]	; (80002e0 <button_read+0x138>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 1){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d109      	bne.n	80001f8 <button_read+0x50>
			key2[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e4:	2102      	movs	r1, #2
 80001e6:	4840      	ldr	r0, [pc, #256]	; (80002e8 <button_read+0x140>)
 80001e8:	f001 ff86 	bl	80020f8 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a3b      	ldr	r2, [pc, #236]	; (80002e0 <button_read+0x138>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (i == 2){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d109      	bne.n	8000212 <button_read+0x6a>
			key2[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fe:	2110      	movs	r1, #16
 8000200:	4839      	ldr	r0, [pc, #228]	; (80002e8 <button_read+0x140>)
 8000202:	f001 ff79 	bl	80020f8 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a35      	ldr	r2, [pc, #212]	; (80002e0 <button_read+0x138>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (i == 3){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d109      	bne.n	800022c <button_read+0x84>
			key2[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000218:	2101      	movs	r1, #1
 800021a:	4834      	ldr	r0, [pc, #208]	; (80002ec <button_read+0x144>)
 800021c:	f001 ff6c 	bl	80020f8 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <button_read+0x138>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (key2[i] == key1[i]){
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <button_read+0x138>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492b      	ldr	r1, [pc, #172]	; (80002e4 <button_read+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d143      	bne.n	80002c8 <button_read+0x120>
				if (keybuffer[i] != key2[i]){
 8000240:	4a2b      	ldr	r2, [pc, #172]	; (80002f0 <button_read+0x148>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4925      	ldr	r1, [pc, #148]	; (80002e0 <button_read+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d01e      	beq.n	8000292 <button_read+0xea>
					keybuffer[i] = key2[i];
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <button_read+0x138>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4924      	ldr	r1, [pc, #144]	; (80002f0 <button_read+0x148>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (keybuffer[i] == BUTTON_PRESSED){
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <button_read+0x148>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d105      	bne.n	800027c <button_read+0xd4>
						flagforPress[i] = 1;
 8000270:	4a20      	ldr	r2, [pc, #128]	; (80002f4 <button_read+0x14c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800027a:	e025      	b.n	80002c8 <button_read+0x120>
					} else {
						flagforLongPress[i] = 0;
 800027c:	4a1e      	ldr	r2, [pc, #120]	; (80002f8 <button_read+0x150>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2100      	movs	r1, #0
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counter_Button[i] = 0;
 8000286:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <button_read+0x154>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2100      	movs	r1, #0
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e01a      	b.n	80002c8 <button_read+0x120>
					}
				} else {
					if (keybuffer[i] == BUTTON_PRESSED){
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <button_read+0x148>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d114      	bne.n	80002c8 <button_read+0x120>
						if (counter_Button[i] < TIME_FOR_LONGPRESS ){
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <button_read+0x154>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	2b95      	cmp	r3, #149	; 0x95
 80002a8:	dc09      	bgt.n	80002be <button_read+0x116>
							counter_Button[i]++;
 80002aa:	4a14      	ldr	r2, [pc, #80]	; (80002fc <button_read+0x154>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	4911      	ldr	r1, [pc, #68]	; (80002fc <button_read+0x154>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002bc:	e004      	b.n	80002c8 <button_read+0x120>
						} else {
							flagforLongPress[i] = 1;
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <button_read+0x150>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2101      	movs	r1, #1
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < NUM_OF_BUTTONS; i++){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	f77f af6f 	ble.w	80001b4 <button_read+0xc>
						}
					}
				}
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000170 	.word	0x20000170
 80002e4:	20000150 	.word	0x20000150
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	20000140 	.word	0x20000140
 80002f4:	20000120 	.word	0x20000120
 80002f8:	20000160 	.word	0x20000160
 80002fc:	20000130 	.word	0x20000130

08000300 <buzzer>:
 *  Created on: Dec 8, 2022
 *      Author: Admin
 */

#include "buzzer.h"
void buzzer(int freq){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, freq);
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <buzzer+0x1c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000180 	.word	0x20000180

08000320 <fsm_auto_run>:


#include "fsm_auto.h"


void fsm_auto_run(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	switch (status){
 8000324:	4b91      	ldr	r3, [pc, #580]	; (800056c <fsm_auto_run+0x24c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	f200 8193 	bhi.w	8000654 <fsm_auto_run+0x334>
 800032e:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <fsm_auto_run+0x14>)
 8000330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000334:	08000349 	.word	0x08000349
 8000338:	08000379 	.word	0x08000379
 800033c:	0800041d 	.word	0x0800041d
 8000340:	080004c9 	.word	0x080004c9
 8000344:	0800059d 	.word	0x0800059d
		case INIT:
			setTimer1(green_time_2 * 1000);
 8000348:	4b89      	ldr	r3, [pc, #548]	; (8000570 <fsm_auto_run+0x250>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f89b 	bl	8001490 <setTimer1>
			setTimer2(10);
 800035a:	200a      	movs	r0, #10
 800035c:	f001 f8b4 	bl	80014c8 <setTimer2>
			status = RED1_GREEN2;
 8000360:	4b82      	ldr	r3, [pc, #520]	; (800056c <fsm_auto_run+0x24c>)
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
			val_info1= red_time_1;
 8000366:	4b83      	ldr	r3, [pc, #524]	; (8000574 <fsm_auto_run+0x254>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a83      	ldr	r2, [pc, #524]	; (8000578 <fsm_auto_run+0x258>)
 800036c:	6013      	str	r3, [r2, #0]
			val_info2=green_time_2;
 800036e:	4b80      	ldr	r3, [pc, #512]	; (8000570 <fsm_auto_run+0x250>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a82      	ldr	r2, [pc, #520]	; (800057c <fsm_auto_run+0x25c>)
 8000374:	6013      	str	r3, [r2, #0]

			break;
 8000376:	e16d      	b.n	8000654 <fsm_auto_run+0x334>

		case RED1_GREEN2:
			setLEDRED1();
 8000378:	f000 fdae 	bl	8000ed8 <setLEDRED1>
			setLEDGREEN2();
 800037c:	f000 fe08 	bl	8000f90 <setLEDGREEN2>

			if (timer1_flag == 1){
 8000380:	4b7f      	ldr	r3, [pc, #508]	; (8000580 <fsm_auto_run+0x260>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d112      	bne.n	80003ae <fsm_auto_run+0x8e>
				setTimer1(yellow_time_2 * 1000);
 8000388:	4b7e      	ldr	r3, [pc, #504]	; (8000584 <fsm_auto_run+0x264>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f001 f87b 	bl	8001490 <setTimer1>
				setTimer2(10);
 800039a:	200a      	movs	r0, #10
 800039c:	f001 f894 	bl	80014c8 <setTimer2>
				status = RED1_YELLOW2;
 80003a0:	4b72      	ldr	r3, [pc, #456]	; (800056c <fsm_auto_run+0x24c>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	601a      	str	r2, [r3, #0]
				val_info2=yellow_time_2;
 80003a6:	4b77      	ldr	r3, [pc, #476]	; (8000584 <fsm_auto_run+0x264>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a74      	ldr	r2, [pc, #464]	; (800057c <fsm_auto_run+0x25c>)
 80003ac:	6013      	str	r3, [r2, #0]
			}

			if (timer2_flag == 1){
 80003ae:	4b76      	ldr	r3, [pc, #472]	; (8000588 <fsm_auto_run+0x268>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d113      	bne.n	80003de <fsm_auto_run+0xbe>
				send_info(0);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f001 fa96 	bl	80018e8 <send_info>
				send_info(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f001 fa93 	bl	80018e8 <send_info>
				setTimer2(1000);
 80003c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c6:	f001 f87f 	bl	80014c8 <setTimer2>
				val_info1--;
 80003ca:	4b6b      	ldr	r3, [pc, #428]	; (8000578 <fsm_auto_run+0x258>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a69      	ldr	r2, [pc, #420]	; (8000578 <fsm_auto_run+0x258>)
 80003d2:	6013      	str	r3, [r2, #0]
				val_info2--;
 80003d4:	4b69      	ldr	r3, [pc, #420]	; (800057c <fsm_auto_run+0x25c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a68      	ldr	r2, [pc, #416]	; (800057c <fsm_auto_run+0x25c>)
 80003dc:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff feb4 	bl	800014c <isButtonPress>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 812d 	beq.w	8000646 <fsm_auto_run+0x326>
				setTimer2(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f001 f86b 	bl	80014c8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 80003f2:	4b66      	ldr	r3, [pc, #408]	; (800058c <fsm_auto_run+0x26c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003fa:	fb02 f303 	mul.w	r3, r2, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f846 	bl	8001490 <setTimer1>
				val_info1=time_man_mode;
 8000404:	4b61      	ldr	r3, [pc, #388]	; (800058c <fsm_auto_run+0x26c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a5b      	ldr	r2, [pc, #364]	; (8000578 <fsm_auto_run+0x258>)
 800040a:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800040c:	4b5f      	ldr	r3, [pc, #380]	; (800058c <fsm_auto_run+0x26c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a5a      	ldr	r2, [pc, #360]	; (800057c <fsm_auto_run+0x25c>)
 8000412:	6013      	str	r3, [r2, #0]
				status = MAN_RED1_GREEN2;
 8000414:	4b55      	ldr	r3, [pc, #340]	; (800056c <fsm_auto_run+0x24c>)
 8000416:	2214      	movs	r2, #20
 8000418:	601a      	str	r2, [r3, #0]
			}
			break;
 800041a:	e114      	b.n	8000646 <fsm_auto_run+0x326>

		case RED1_YELLOW2:
			setLEDRED1();
 800041c:	f000 fd5c 	bl	8000ed8 <setLEDRED1>
			setLEDYELLOW2();
 8000420:	f000 fda6 	bl	8000f70 <setLEDYELLOW2>

			if (timer1_flag == 1){
 8000424:	4b56      	ldr	r3, [pc, #344]	; (8000580 <fsm_auto_run+0x260>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d116      	bne.n	800045a <fsm_auto_run+0x13a>
				setTimer1(green_time_1 * 1000);
 800042c:	4b58      	ldr	r3, [pc, #352]	; (8000590 <fsm_auto_run+0x270>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f001 f829 	bl	8001490 <setTimer1>
				setTimer2(10);
 800043e:	200a      	movs	r0, #10
 8000440:	f001 f842 	bl	80014c8 <setTimer2>
				val_info1=green_time_1;
 8000444:	4b52      	ldr	r3, [pc, #328]	; (8000590 <fsm_auto_run+0x270>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a4b      	ldr	r2, [pc, #300]	; (8000578 <fsm_auto_run+0x258>)
 800044a:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2;
 800044c:	4b51      	ldr	r3, [pc, #324]	; (8000594 <fsm_auto_run+0x274>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a4a      	ldr	r2, [pc, #296]	; (800057c <fsm_auto_run+0x25c>)
 8000452:	6013      	str	r3, [r2, #0]
				status = GREEN1_RED2;
 8000454:	4b45      	ldr	r3, [pc, #276]	; (800056c <fsm_auto_run+0x24c>)
 8000456:	2203      	movs	r2, #3
 8000458:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 800045a:	4b4b      	ldr	r3, [pc, #300]	; (8000588 <fsm_auto_run+0x268>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d113      	bne.n	800048a <fsm_auto_run+0x16a>
				send_info(0);
 8000462:	2000      	movs	r0, #0
 8000464:	f001 fa40 	bl	80018e8 <send_info>
				send_info(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f001 fa3d 	bl	80018e8 <send_info>
				setTimer2(1000);
 800046e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000472:	f001 f829 	bl	80014c8 <setTimer2>
				val_info1--;
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <fsm_auto_run+0x258>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a3e      	ldr	r2, [pc, #248]	; (8000578 <fsm_auto_run+0x258>)
 800047e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000480:	4b3e      	ldr	r3, [pc, #248]	; (800057c <fsm_auto_run+0x25c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a3d      	ldr	r2, [pc, #244]	; (800057c <fsm_auto_run+0x25c>)
 8000488:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff fe5e 	bl	800014c <isButtonPress>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 80d9 	beq.w	800064a <fsm_auto_run+0x32a>
				setTimer2(10);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 f815 	bl	80014c8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 800049e:	4b3b      	ldr	r3, [pc, #236]	; (800058c <fsm_auto_run+0x26c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fff0 	bl	8001490 <setTimer1>
				val_info1=time_man_mode;
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <fsm_auto_run+0x26c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a30      	ldr	r2, [pc, #192]	; (8000578 <fsm_auto_run+0x258>)
 80004b6:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80004b8:	4b34      	ldr	r3, [pc, #208]	; (800058c <fsm_auto_run+0x26c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	; (800057c <fsm_auto_run+0x25c>)
 80004be:	6013      	str	r3, [r2, #0]
				status = MAN_RED1_YELLOW2;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <fsm_auto_run+0x24c>)
 80004c2:	2215      	movs	r2, #21
 80004c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80004c6:	e0c0      	b.n	800064a <fsm_auto_run+0x32a>

		case GREEN1_RED2:
			setLEDRED2();
 80004c8:	f000 fd42 	bl	8000f50 <setLEDRED2>
			setLEDGREEN1();
 80004cc:	f000 fd2c 	bl	8000f28 <setLEDGREEN1>

			if (timer1_flag == 1){
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <fsm_auto_run+0x260>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d112      	bne.n	80004fe <fsm_auto_run+0x1de>
				setTimer1(yellow_time_1 * 1000);
 80004d8:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <fsm_auto_run+0x278>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ffd3 	bl	8001490 <setTimer1>
				setTimer2(10);
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 ffec 	bl	80014c8 <setTimer2>
				val_info1=yellow_time_1;
 80004f0:	4b29      	ldr	r3, [pc, #164]	; (8000598 <fsm_auto_run+0x278>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a20      	ldr	r2, [pc, #128]	; (8000578 <fsm_auto_run+0x258>)
 80004f6:	6013      	str	r3, [r2, #0]
				status = YELLOW1_RED2;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <fsm_auto_run+0x24c>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	601a      	str	r2, [r3, #0]
			}

			if (timer2_flag == 1){
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <fsm_auto_run+0x268>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d113      	bne.n	800052e <fsm_auto_run+0x20e>
				send_info(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f001 f9ee 	bl	80018e8 <send_info>
				send_info(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f9eb 	bl	80018e8 <send_info>
				setTimer2(1000);
 8000512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000516:	f000 ffd7 	bl	80014c8 <setTimer2>
				val_info1--;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <fsm_auto_run+0x258>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <fsm_auto_run+0x258>)
 8000522:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <fsm_auto_run+0x25c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <fsm_auto_run+0x25c>)
 800052c:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff fe0c 	bl	800014c <isButtonPress>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 8089 	beq.w	800064e <fsm_auto_run+0x32e>
				setTimer2(10);
 800053c:	200a      	movs	r0, #10
 800053e:	f000 ffc3 	bl	80014c8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <fsm_auto_run+0x26c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ff9e 	bl	8001490 <setTimer1>
				val_info1=time_man_mode;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <fsm_auto_run+0x26c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <fsm_auto_run+0x258>)
 800055a:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <fsm_auto_run+0x26c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <fsm_auto_run+0x25c>)
 8000562:	6013      	str	r3, [r2, #0]
				status = MAN_GREEN1_RED2;
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <fsm_auto_run+0x24c>)
 8000566:	2216      	movs	r2, #22
 8000568:	601a      	str	r2, [r3, #0]
			}
			break;
 800056a:	e070      	b.n	800064e <fsm_auto_run+0x32e>
 800056c:	200000b8 	.word	0x200000b8
 8000570:	20000010 	.word	0x20000010
 8000574:	20000000 	.word	0x20000000
 8000578:	2000001c 	.word	0x2000001c
 800057c:	20000020 	.word	0x20000020
 8000580:	200000f8 	.word	0x200000f8
 8000584:	20000014 	.word	0x20000014
 8000588:	20000100 	.word	0x20000100
 800058c:	20000018 	.word	0x20000018
 8000590:	20000004 	.word	0x20000004
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000008 	.word	0x20000008

		case YELLOW1_RED2:
			setLEDRED2();
 800059c:	f000 fcd8 	bl	8000f50 <setLEDRED2>
			setLEDYELLOW1();
 80005a0:	f000 fcae 	bl	8000f00 <setLEDYELLOW1>

			if (timer1_flag == 1){
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <fsm_auto_run+0x338>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d116      	bne.n	80005da <fsm_auto_run+0x2ba>
				setTimer1(green_time_2 * 1000);
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <fsm_auto_run+0x33c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff69 	bl	8001490 <setTimer1>
				setTimer2(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f000 ff82 	bl	80014c8 <setTimer2>
				val_info1=red_time_1;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <fsm_auto_run+0x340>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <fsm_auto_run+0x344>)
 80005ca:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <fsm_auto_run+0x33c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <fsm_auto_run+0x348>)
 80005d2:	6013      	str	r3, [r2, #0]
				status = RED1_GREEN2;
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <fsm_auto_run+0x34c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
			}
			if (timer2_flag == 1){
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <fsm_auto_run+0x350>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d113      	bne.n	800060a <fsm_auto_run+0x2ea>
				send_info(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f980 	bl	80018e8 <send_info>
				send_info(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 f97d 	bl	80018e8 <send_info>
				setTimer2(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 ff69 	bl	80014c8 <setTimer2>
				val_info1--;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <fsm_auto_run+0x344>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <fsm_auto_run+0x344>)
 80005fe:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <fsm_auto_run+0x348>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b01      	subs	r3, #1
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <fsm_auto_run+0x348>)
 8000608:	6013      	str	r3, [r2, #0]
			}

			if (isButtonPress(1)){
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff fd9e 	bl	800014c <isButtonPress>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01d      	beq.n	8000652 <fsm_auto_run+0x332>
				setTimer2(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 ff56 	bl	80014c8 <setTimer2>
				setTimer1(time_man_mode * 1000);
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <fsm_auto_run+0x354>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000624:	fb02 f303 	mul.w	r3, r2, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ff31 	bl	8001490 <setTimer1>
				val_info1=time_man_mode;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <fsm_auto_run+0x354>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <fsm_auto_run+0x344>)
 8000634:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <fsm_auto_run+0x354>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <fsm_auto_run+0x348>)
 800063c:	6013      	str	r3, [r2, #0]
				status = MAN_YELLOW1_RED2;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <fsm_auto_run+0x34c>)
 8000640:	2217      	movs	r2, #23
 8000642:	601a      	str	r2, [r3, #0]
			}
			break;
 8000644:	e005      	b.n	8000652 <fsm_auto_run+0x332>
			break;
 8000646:	bf00      	nop
 8000648:	e004      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 800064a:	bf00      	nop
 800064c:	e002      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 800064e:	bf00      	nop
 8000650:	e000      	b.n	8000654 <fsm_auto_run+0x334>
			break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000f8 	.word	0x200000f8
 800065c:	20000010 	.word	0x20000010
 8000660:	20000000 	.word	0x20000000
 8000664:	2000001c 	.word	0x2000001c
 8000668:	20000020 	.word	0x20000020
 800066c:	200000b8 	.word	0x200000b8
 8000670:	20000100 	.word	0x20000100
 8000674:	20000018 	.word	0x20000018

08000678 <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	switch(status){
 800067c:	4b9a      	ldr	r3, [pc, #616]	; (80008e8 <fsm_manual_run+0x270>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b14      	subs	r3, #20
 8000682:	2b03      	cmp	r3, #3
 8000684:	f200 81a7 	bhi.w	80009d6 <fsm_manual_run+0x35e>
 8000688:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <fsm_manual_run+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006a1 	.word	0x080006a1
 8000694:	08000763 	.word	0x08000763
 8000698:	08000827 	.word	0x08000827
 800069c:	08000915 	.word	0x08000915

		case MAN_RED1_GREEN2:
			setLEDRED1();
 80006a0:	f000 fc1a 	bl	8000ed8 <setLEDRED1>
			setLEDGREEN2();
 80006a4:	f000 fc74 	bl	8000f90 <setLEDGREEN2>
			if(timer1_flag == 1){
 80006a8:	4b90      	ldr	r3, [pc, #576]	; (80008ec <fsm_manual_run+0x274>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d111      	bne.n	80006d4 <fsm_manual_run+0x5c>
				status=RED1_GREEN2;
 80006b0:	4b8d      	ldr	r3, [pc, #564]	; (80008e8 <fsm_manual_run+0x270>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 ff06 	bl	80014c8 <setTimer2>
				setTimer1(3000);
 80006bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c0:	f000 fee6 	bl	8001490 <setTimer1>
				val_info1= red_time_1;
 80006c4:	4b8a      	ldr	r3, [pc, #552]	; (80008f0 <fsm_manual_run+0x278>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a8a      	ldr	r2, [pc, #552]	; (80008f4 <fsm_manual_run+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <fsm_manual_run+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a8a      	ldr	r2, [pc, #552]	; (80008fc <fsm_manual_run+0x284>)
 80006d2:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 80006d4:	4b8a      	ldr	r3, [pc, #552]	; (8000900 <fsm_manual_run+0x288>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d113      	bne.n	8000704 <fsm_manual_run+0x8c>
				send_info(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f903 	bl	80018e8 <send_info>
				send_info(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f001 f900 	bl	80018e8 <send_info>
				setTimer2(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 feec 	bl	80014c8 <setTimer2>
				val_info1--;
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <fsm_manual_run+0x27c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a7f      	ldr	r2, [pc, #508]	; (80008f4 <fsm_manual_run+0x27c>)
 80006f8:	6013      	str	r3, [r2, #0]
				val_info2--;
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <fsm_manual_run+0x284>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a7e      	ldr	r2, [pc, #504]	; (80008fc <fsm_manual_run+0x284>)
 8000702:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff fd21 	bl	800014c <isButtonPress>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d013      	beq.n	8000738 <fsm_manual_run+0xc0>
				status=MAN_RED1_YELLOW2;
 8000710:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <fsm_manual_run+0x270>)
 8000712:	2215      	movs	r2, #21
 8000714:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 8000716:	4b7b      	ldr	r3, [pc, #492]	; (8000904 <fsm_manual_run+0x28c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <fsm_manual_run+0x27c>)
 800071c:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 800071e:	4b79      	ldr	r3, [pc, #484]	; (8000904 <fsm_manual_run+0x28c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <fsm_manual_run+0x284>)
 8000724:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 8000726:	4b77      	ldr	r3, [pc, #476]	; (8000904 <fsm_manual_run+0x28c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 feac 	bl	8001490 <setTimer1>
			}

			if (isButtonPress(1)){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPress>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 814a 	beq.w	80009da <fsm_manual_run+0x362>
				status = TUNING_RED1;
 8000746:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <fsm_manual_run+0x270>)
 8000748:	2228      	movs	r2, #40	; 0x28
 800074a:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 800074c:	4b68      	ldr	r3, [pc, #416]	; (80008f0 <fsm_manual_run+0x278>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a68      	ldr	r2, [pc, #416]	; (80008f4 <fsm_manual_run+0x27c>)
 8000752:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 f8c7 	bl	80018e8 <send_info>
				setTimer1(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fe98 	bl	8001490 <setTimer1>
			}

			break;
 8000760:	e13b      	b.n	80009da <fsm_manual_run+0x362>

		case MAN_RED1_YELLOW2:
			setLEDYELLOW2();
 8000762:	f000 fc05 	bl	8000f70 <setLEDYELLOW2>
			if(timer1_flag==1){
 8000766:	4b61      	ldr	r3, [pc, #388]	; (80008ec <fsm_manual_run+0x274>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d114      	bne.n	8000798 <fsm_manual_run+0x120>
				status=RED1_YELLOW2;
 800076e:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <fsm_manual_run+0x270>)
 8000770:	2202      	movs	r2, #2
 8000772:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 8000774:	200a      	movs	r0, #10
 8000776:	f000 fea7 	bl	80014c8 <setTimer2>
				setTimer1(2000);
 800077a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800077e:	f000 fe87 	bl	8001490 <setTimer1>
				val_info1= red_time_1-green_time_2;
 8000782:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <fsm_manual_run+0x278>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <fsm_manual_run+0x280>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	4a59      	ldr	r2, [pc, #356]	; (80008f4 <fsm_manual_run+0x27c>)
 800078e:	6013      	str	r3, [r2, #0]
				val_info2=yellow_time_2;
 8000790:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <fsm_manual_run+0x290>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a59      	ldr	r2, [pc, #356]	; (80008fc <fsm_manual_run+0x284>)
 8000796:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 8000798:	4b59      	ldr	r3, [pc, #356]	; (8000900 <fsm_manual_run+0x288>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d113      	bne.n	80007c8 <fsm_manual_run+0x150>
				send_info(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f001 f8a1 	bl	80018e8 <send_info>
				send_info(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 f89e 	bl	80018e8 <send_info>
				setTimer2(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fe8a 	bl	80014c8 <setTimer2>
				val_info1--;
 80007b4:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <fsm_manual_run+0x27c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <fsm_manual_run+0x27c>)
 80007bc:	6013      	str	r3, [r2, #0]
				val_info2--;
 80007be:	4b4f      	ldr	r3, [pc, #316]	; (80008fc <fsm_manual_run+0x284>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <fsm_manual_run+0x284>)
 80007c6:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fcbf 	bl	800014c <isButtonPress>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <fsm_manual_run+0x184>
				status=MAN_GREEN1_RED2;
 80007d4:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <fsm_manual_run+0x270>)
 80007d6:	2216      	movs	r2, #22
 80007d8:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 80007da:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <fsm_manual_run+0x28c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a45      	ldr	r2, [pc, #276]	; (80008f4 <fsm_manual_run+0x27c>)
 80007e0:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80007e2:	4b48      	ldr	r3, [pc, #288]	; (8000904 <fsm_manual_run+0x28c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a45      	ldr	r2, [pc, #276]	; (80008fc <fsm_manual_run+0x284>)
 80007e8:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <fsm_manual_run+0x28c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	fb02 f303 	mul.w	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fe4a 	bl	8001490 <setTimer1>
			}

			if (isButtonPress(1)){
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fca5 	bl	800014c <isButtonPress>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80ea 	beq.w	80009de <fsm_manual_run+0x366>
				status = TUNING_RED1;
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <fsm_manual_run+0x270>)
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <fsm_manual_run+0x278>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a37      	ldr	r2, [pc, #220]	; (80008f4 <fsm_manual_run+0x27c>)
 8000816:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000818:	2000      	movs	r0, #0
 800081a:	f001 f865 	bl	80018e8 <send_info>
				setTimer1(10);
 800081e:	200a      	movs	r0, #10
 8000820:	f000 fe36 	bl	8001490 <setTimer1>
			}

			break;
 8000824:	e0db      	b.n	80009de <fsm_manual_run+0x366>

		case MAN_GREEN1_RED2:
			setLEDGREEN1();
 8000826:	f000 fb7f 	bl	8000f28 <setLEDGREEN1>
			setLEDRED2();
 800082a:	f000 fb91 	bl	8000f50 <setLEDRED2>
			if(timer1_flag==1){
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <fsm_manual_run+0x274>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d111      	bne.n	800085a <fsm_manual_run+0x1e2>
				status=GREEN1_RED2;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <fsm_manual_run+0x270>)
 8000838:	2203      	movs	r2, #3
 800083a:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 800083c:	200a      	movs	r0, #10
 800083e:	f000 fe43 	bl	80014c8 <setTimer2>
				setTimer1(3000);
 8000842:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000846:	f000 fe23 	bl	8001490 <setTimer1>
				val_info1= green_time_1;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <fsm_manual_run+0x294>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <fsm_manual_run+0x27c>)
 8000850:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <fsm_manual_run+0x298>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <fsm_manual_run+0x284>)
 8000858:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <fsm_manual_run+0x288>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d113      	bne.n	800088a <fsm_manual_run+0x212>
				send_info(0);
 8000862:	2000      	movs	r0, #0
 8000864:	f001 f840 	bl	80018e8 <send_info>
				send_info(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f001 f83d 	bl	80018e8 <send_info>
				setTimer2(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000872:	f000 fe29 	bl	80014c8 <setTimer2>
				val_info1--;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <fsm_manual_run+0x27c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <fsm_manual_run+0x27c>)
 800087e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <fsm_manual_run+0x284>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <fsm_manual_run+0x284>)
 8000888:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fc5e 	bl	800014c <isButtonPress>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d013      	beq.n	80008be <fsm_manual_run+0x246>
				status=MAN_YELLOW1_RED2;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <fsm_manual_run+0x270>)
 8000898:	2217      	movs	r2, #23
 800089a:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <fsm_manual_run+0x28c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <fsm_manual_run+0x27c>)
 80008a2:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <fsm_manual_run+0x28c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <fsm_manual_run+0x284>)
 80008aa:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <fsm_manual_run+0x28c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fde9 	bl	8001490 <setTimer1>
			}

			if (isButtonPress(1)){
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fc44 	bl	800014c <isButtonPress>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f000 808b 	beq.w	80009e2 <fsm_manual_run+0x36a>
				status = TUNING_RED1;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <fsm_manual_run+0x270>)
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <fsm_manual_run+0x278>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <fsm_manual_run+0x27c>)
 80008d8:	6013      	str	r3, [r2, #0]
				send_info(0);
 80008da:	2000      	movs	r0, #0
 80008dc:	f001 f804 	bl	80018e8 <send_info>
				setTimer1(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 fdd5 	bl	8001490 <setTimer1>
			}

			break;
 80008e6:	e07c      	b.n	80009e2 <fsm_manual_run+0x36a>
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	200000f8 	.word	0x200000f8
 80008f0:	20000000 	.word	0x20000000
 80008f4:	2000001c 	.word	0x2000001c
 80008f8:	20000010 	.word	0x20000010
 80008fc:	20000020 	.word	0x20000020
 8000900:	20000100 	.word	0x20000100
 8000904:	20000018 	.word	0x20000018
 8000908:	20000014 	.word	0x20000014
 800090c:	20000004 	.word	0x20000004
 8000910:	2000000c 	.word	0x2000000c

		case MAN_YELLOW1_RED2:
			setLEDYELLOW1();
 8000914:	f000 faf4 	bl	8000f00 <setLEDYELLOW1>

			if(timer1_flag==1){
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <fsm_manual_run+0x374>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d114      	bne.n	800094a <fsm_manual_run+0x2d2>
				status=YELLOW1_RED2;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <fsm_manual_run+0x378>)
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
				setTimer2(10);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 fdce 	bl	80014c8 <setTimer2>
				setTimer1(2000);
 800092c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000930:	f000 fdae 	bl	8001490 <setTimer1>
				val_info1= yellow_time_1;
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <fsm_manual_run+0x37c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <fsm_manual_run+0x380>)
 800093a:	6013      	str	r3, [r2, #0]
				val_info2=red_time_2-green_time_1;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <fsm_manual_run+0x384>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <fsm_manual_run+0x388>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <fsm_manual_run+0x38c>)
 8000948:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1){
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <fsm_manual_run+0x390>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d113      	bne.n	800097a <fsm_manual_run+0x302>
				send_info(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 ffc8 	bl	80018e8 <send_info>
				send_info(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 ffc5 	bl	80018e8 <send_info>
				setTimer2(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fdb1 	bl	80014c8 <setTimer2>
				val_info1--;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <fsm_manual_run+0x380>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <fsm_manual_run+0x380>)
 800096e:	6013      	str	r3, [r2, #0]
				val_info2--;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <fsm_manual_run+0x38c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <fsm_manual_run+0x38c>)
 8000978:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(2)){
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fbe6 	bl	800014c <isButtonPress>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d013      	beq.n	80009ae <fsm_manual_run+0x336>
				status=MAN_RED1_GREEN2;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <fsm_manual_run+0x378>)
 8000988:	2214      	movs	r2, #20
 800098a:	601a      	str	r2, [r3, #0]
				val_info1=time_man_mode;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <fsm_manual_run+0x394>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <fsm_manual_run+0x380>)
 8000992:	6013      	str	r3, [r2, #0]
				val_info2=time_man_mode;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <fsm_manual_run+0x394>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <fsm_manual_run+0x38c>)
 800099a:	6013      	str	r3, [r2, #0]
				setTimer1(time_man_mode * 1000);
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <fsm_manual_run+0x394>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fd71 	bl	8001490 <setTimer1>
			}

			if (isButtonPress(1)){
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fbcc 	bl	800014c <isButtonPress>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d015      	beq.n	80009e6 <fsm_manual_run+0x36e>
				status = TUNING_RED1;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <fsm_manual_run+0x378>)
 80009bc:	2228      	movs	r2, #40	; 0x28
 80009be:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <fsm_manual_run+0x398>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <fsm_manual_run+0x380>)
 80009c6:	6013      	str	r3, [r2, #0]
				send_info(0);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 ff8d 	bl	80018e8 <send_info>
				setTimer1(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f000 fd5e 	bl	8001490 <setTimer1>
			}

			break;
 80009d4:	e007      	b.n	80009e6 <fsm_manual_run+0x36e>

		default:
			break;
 80009d6:	bf00      	nop
 80009d8:	e006      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009da:	bf00      	nop
 80009dc:	e004      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009de:	bf00      	nop
 80009e0:	e002      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009e2:	bf00      	nop
 80009e4:	e000      	b.n	80009e8 <fsm_manual_run+0x370>
			break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000f8 	.word	0x200000f8
 80009f0:	200000b8 	.word	0x200000b8
 80009f4:	20000008 	.word	0x20000008
 80009f8:	2000001c 	.word	0x2000001c
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000020 	.word	0x20000020
 8000a08:	20000100 	.word	0x20000100
 8000a0c:	20000018 	.word	0x20000018
 8000a10:	20000000 	.word	0x20000000

08000a14 <fsm_pedes_run>:
 */


#include "fsm_pedes.h"
int freq=0;
void fsm_pedes_run(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	switch (status_pedes){
 8000a18:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b32      	cmp	r3, #50	; 0x32
 8000a1e:	d002      	beq.n	8000a26 <fsm_pedes_run+0x12>
 8000a20:	2b33      	cmp	r3, #51	; 0x33
 8000a22:	d01b      	beq.n	8000a5c <fsm_pedes_run+0x48>
			}
			buzzer(0);
			break;

	}
}
 8000a24:	e081      	b.n	8000b2a <fsm_pedes_run+0x116>
			clearLED3();
 8000a26:	f000 fb23 	bl	8001070 <clearLED3>
			if (isButtonPress(0)){
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fb8e 	bl	800014c <isButtonPress>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d078      	beq.n	8000b28 <fsm_pedes_run+0x114>
				setTimer3((red_time_1 + red_time_2) * 2 * 1000);
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <fsm_pedes_run+0x120>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <fsm_pedes_run+0x124>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fd59 	bl	8001500 <setTimer3>
				status_pedes = PEDES_RUN;
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000a50:	2233      	movs	r2, #51	; 0x33
 8000a52:	601a      	str	r2, [r3, #0]
				setTimer4(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f000 fd6f 	bl	8001538 <setTimer4>
			break;
 8000a5a:	e065      	b.n	8000b28 <fsm_pedes_run+0x114>
			if (status == GREEN1_RED2){
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <fsm_pedes_run+0x128>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d102      	bne.n	8000a6a <fsm_pedes_run+0x56>
				setLEDRED3();
 8000a64:	f000 faa4 	bl	8000fb0 <setLEDRED3>
 8000a68:	e050      	b.n	8000b0c <fsm_pedes_run+0xf8>
			} else if (status == YELLOW1_RED2){
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <fsm_pedes_run+0x128>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d102      	bne.n	8000a78 <fsm_pedes_run+0x64>
				setLEDRED3();
 8000a72:	f000 fa9d 	bl	8000fb0 <setLEDRED3>
 8000a76:	e049      	b.n	8000b0c <fsm_pedes_run+0xf8>
			} else if (val_info1<yellow_pedes_time){
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <fsm_pedes_run+0x12c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	dc1d      	bgt.n	8000abc <fsm_pedes_run+0xa8>
				setLEDYELLOW3();
 8000a80:	f000 faaa 	bl	8000fd8 <setLEDYELLOW3>
				if(timer4_flag==1){
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <fsm_pedes_run+0x130>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d13f      	bne.n	8000b0c <fsm_pedes_run+0xf8>
					freq=(red_time_1-val_info1)*100>5000?5000:(red_time_1-val_info1)*100;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <fsm_pedes_run+0x120>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <fsm_pedes_run+0x12c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2264      	movs	r2, #100	; 0x64
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	bfa8      	it	ge
 8000aa4:	4613      	movge	r3, r2
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <fsm_pedes_run+0x134>)
 8000aa8:	6013      	str	r3, [r2, #0]
					buzzer(freq);
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <fsm_pedes_run+0x134>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fc26 	bl	8000300 <buzzer>
					setTimer4(250);
 8000ab4:	20fa      	movs	r0, #250	; 0xfa
 8000ab6:	f000 fd3f 	bl	8001538 <setTimer4>
 8000aba:	e027      	b.n	8000b0c <fsm_pedes_run+0xf8>
				setLEDGREEN3();
 8000abc:	f000 faa0 	bl	8001000 <setLEDGREEN3>
				if(timer4_flag==1){
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <fsm_pedes_run+0x130>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d121      	bne.n	8000b0c <fsm_pedes_run+0xf8>
					freq=(red_time_1-val_info1)*100>2000?2000:(red_time_1-val_info1)*30;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <fsm_pedes_run+0x120>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <fsm_pedes_run+0x12c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2264      	movs	r2, #100	; 0x64
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000adc:	dc09      	bgt.n	8000af2 <fsm_pedes_run+0xde>
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <fsm_pedes_run+0x120>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <fsm_pedes_run+0x12c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1ad2      	subs	r2, r2, r3
 8000ae8:	4613      	mov	r3, r2
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	e001      	b.n	8000af6 <fsm_pedes_run+0xe2>
 8000af2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <fsm_pedes_run+0x134>)
 8000af8:	6013      	str	r3, [r2, #0]
					buzzer(freq);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <fsm_pedes_run+0x134>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fbfe 	bl	8000300 <buzzer>
					setTimer4(5000);
 8000b04:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b08:	f000 fd16 	bl	8001538 <setTimer4>
			if (timer3_flag == 1){
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <fsm_pedes_run+0x138>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d105      	bne.n	8000b20 <fsm_pedes_run+0x10c>
				status_pedes = INIT_PEDES;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <fsm_pedes_run+0x11c>)
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	601a      	str	r2, [r3, #0]
				buzzer(0);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fbf0 	bl	8000300 <buzzer>
			buzzer(0);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fbed 	bl	8000300 <buzzer>
			break;
 8000b26:	e000      	b.n	8000b2a <fsm_pedes_run+0x116>
			break;
 8000b28:	bf00      	nop
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	20000000 	.word	0x20000000
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	200000b8 	.word	0x200000b8
 8000b40:	2000001c 	.word	0x2000001c
 8000b44:	20000110 	.word	0x20000110
 8000b48:	200000b0 	.word	0x200000b0
 8000b4c:	20000108 	.word	0x20000108

08000b50 <fsm_tuning_run>:

#include "fsm_tuning.h"



void fsm_tuning_run(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	switch(status){
 8000b54:	4b93      	ldr	r3, [pc, #588]	; (8000da4 <fsm_tuning_run+0x254>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b28      	subs	r3, #40	; 0x28
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	f200 81a1 	bhi.w	8000ea2 <fsm_tuning_run+0x352>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <fsm_tuning_run+0x18>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000c2d 	.word	0x08000c2d
 8000b70:	08000ce1 	.word	0x08000ce1
 8000b74:	08000dd5 	.word	0x08000dd5

		case TUNING_RED1:
			setLEDRED1();
 8000b78:	f000 f9ae 	bl	8000ed8 <setLEDRED1>
			clearLED2();
 8000b7c:	f000 fa68 	bl	8001050 <clearLED2>
			if(isButtonPress(2)){
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fae3 	bl	800014c <isButtonPress>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00e      	beq.n	8000baa <fsm_tuning_run+0x5a>
				RED_INC++;
 8000b8c:	4b86      	ldr	r3, [pc, #536]	; (8000da8 <fsm_tuning_run+0x258>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a85      	ldr	r2, [pc, #532]	; (8000da8 <fsm_tuning_run+0x258>)
 8000b94:	6013      	str	r3, [r2, #0]
				val_info1=RED_INC+red_time_1;
 8000b96:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <fsm_tuning_run+0x258>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b84      	ldr	r3, [pc, #528]	; (8000dac <fsm_tuning_run+0x25c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a83      	ldr	r2, [pc, #524]	; (8000db0 <fsm_tuning_run+0x260>)
 8000ba2:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fe9f 	bl	80018e8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff fae8 	bl	8000180 <isButtonLongPress>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <fsm_tuning_run+0x92>
				if (timer1_flag == 1){
 8000bb6:	4b7f      	ldr	r3, [pc, #508]	; (8000db4 <fsm_tuning_run+0x264>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d111      	bne.n	8000be2 <fsm_tuning_run+0x92>
					RED_INC--;
 8000bbe:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <fsm_tuning_run+0x258>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a78      	ldr	r2, [pc, #480]	; (8000da8 <fsm_tuning_run+0x258>)
 8000bc6:	6013      	str	r3, [r2, #0]
					val_info1=RED_INC+red_time_1;
 8000bc8:	4b77      	ldr	r3, [pc, #476]	; (8000da8 <fsm_tuning_run+0x258>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b77      	ldr	r3, [pc, #476]	; (8000dac <fsm_tuning_run+0x25c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <fsm_tuning_run+0x260>)
 8000bd4:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 fe86 	bl	80018e8 <send_info>
					setTimer1(200);
 8000bdc:	20c8      	movs	r0, #200	; 0xc8
 8000bde:	f000 fc57 	bl	8001490 <setTimer1>
				}
			}
			if(isButtonPress(3)){
 8000be2:	2003      	movs	r0, #3
 8000be4:	f7ff fab2 	bl	800014c <isButtonPress>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <fsm_tuning_run+0xac>
				red_time_1+=RED_INC;
 8000bee:	4b6f      	ldr	r3, [pc, #444]	; (8000dac <fsm_tuning_run+0x25c>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b6d      	ldr	r3, [pc, #436]	; (8000da8 <fsm_tuning_run+0x258>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a6c      	ldr	r2, [pc, #432]	; (8000dac <fsm_tuning_run+0x25c>)
 8000bfa:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff faa5 	bl	800014c <isButtonPress>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 814e 	beq.w	8000ea6 <fsm_tuning_run+0x356>
				RED_INC=0;
 8000c0a:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <fsm_tuning_run+0x258>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
				status=TUNING_GREEN1;
 8000c10:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <fsm_tuning_run+0x254>)
 8000c12:	2229      	movs	r2, #41	; 0x29
 8000c14:	601a      	str	r2, [r3, #0]
				val_info1=green_time_1;
 8000c16:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <fsm_tuning_run+0x268>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a65      	ldr	r2, [pc, #404]	; (8000db0 <fsm_tuning_run+0x260>)
 8000c1c:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fe62 	bl	80018e8 <send_info>
				setTimer1(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f000 fc33 	bl	8001490 <setTimer1>
			}
			break;
 8000c2a:	e13c      	b.n	8000ea6 <fsm_tuning_run+0x356>

		case TUNING_GREEN1:

			setLEDGREEN1();
 8000c2c:	f000 f97c 	bl	8000f28 <setLEDGREEN1>
			clearLED2();
 8000c30:	f000 fa0e 	bl	8001050 <clearLED2>

			if(isButtonPress(2)){
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fa89 	bl	800014c <isButtonPress>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00e      	beq.n	8000c5e <fsm_tuning_run+0x10e>
				GREEN_INC++;
 8000c40:	4b5e      	ldr	r3, [pc, #376]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a5d      	ldr	r2, [pc, #372]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c48:	6013      	str	r3, [r2, #0]
				val_info1=GREEN_INC+green_time_1;
 8000c4a:	4b5c      	ldr	r3, [pc, #368]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <fsm_tuning_run+0x268>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <fsm_tuning_run+0x260>)
 8000c56:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fe45 	bl	80018e8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fa8e 	bl	8000180 <isButtonLongPress>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d015      	beq.n	8000c96 <fsm_tuning_run+0x146>
				if (timer1_flag == 1){
 8000c6a:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <fsm_tuning_run+0x264>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d111      	bne.n	8000c96 <fsm_tuning_run+0x146>
					GREEN_INC--;
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c7a:	6013      	str	r3, [r2, #0]
					val_info1=GREEN_INC+green_time_1;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <fsm_tuning_run+0x268>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a4a      	ldr	r2, [pc, #296]	; (8000db0 <fsm_tuning_run+0x260>)
 8000c88:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 fe2c 	bl	80018e8 <send_info>
					setTimer1(200);
 8000c90:	20c8      	movs	r0, #200	; 0xc8
 8000c92:	f000 fbfd 	bl	8001490 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000c96:	2003      	movs	r0, #3
 8000c98:	f7ff fa58 	bl	800014c <isButtonPress>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <fsm_tuning_run+0x160>
				green_time_1+=GREEN_INC;
 8000ca2:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <fsm_tuning_run+0x268>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <fsm_tuning_run+0x268>)
 8000cae:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fa4b 	bl	800014c <isButtonPress>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 80f6 	beq.w	8000eaa <fsm_tuning_run+0x35a>
				GREEN_INC=0;
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <fsm_tuning_run+0x26c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
				status=TUNING_YELLOW1;
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <fsm_tuning_run+0x254>)
 8000cc6:	222a      	movs	r2, #42	; 0x2a
 8000cc8:	601a      	str	r2, [r3, #0]
				val_info1=yellow_time_1;
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a38      	ldr	r2, [pc, #224]	; (8000db0 <fsm_tuning_run+0x260>)
 8000cd0:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 fe08 	bl	80018e8 <send_info>
				setTimer1(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fbd9 	bl	8001490 <setTimer1>
			}
			break;
 8000cde:	e0e4      	b.n	8000eaa <fsm_tuning_run+0x35a>

		case TUNING_YELLOW1:
			setLEDYELLOW1();
 8000ce0:	f000 f90e 	bl	8000f00 <setLEDYELLOW1>
			clearLED2();
 8000ce4:	f000 f9b4 	bl	8001050 <clearLED2>

			if(isButtonPress(2)){
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fa2f 	bl	800014c <isButtonPress>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00e      	beq.n	8000d12 <fsm_tuning_run+0x1c2>
				YELLOW_INC++;
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000cfc:	6013      	str	r3, [r2, #0]
				val_info1=YELLOW_INC+yellow_time_1;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <fsm_tuning_run+0x260>)
 8000d0a:	6013      	str	r3, [r2, #0]
				send_info(0);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fdeb 	bl	80018e8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000d12:	2002      	movs	r0, #2
 8000d14:	f7ff fa34 	bl	8000180 <isButtonLongPress>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d015      	beq.n	8000d4a <fsm_tuning_run+0x1fa>
				if (timer1_flag == 1){
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <fsm_tuning_run+0x264>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d111      	bne.n	8000d4a <fsm_tuning_run+0x1fa>
					YELLOW_INC--;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d2e:	6013      	str	r3, [r2, #0]
					val_info1=YELLOW_INC+yellow_time_1;
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <fsm_tuning_run+0x260>)
 8000d3c:	6013      	str	r3, [r2, #0]
					send_info(0);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 fdd2 	bl	80018e8 <send_info>
					setTimer1(200);
 8000d44:	20c8      	movs	r0, #200	; 0xc8
 8000d46:	f000 fba3 	bl	8001490 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff f9fe 	bl	800014c <isButtonPress>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <fsm_tuning_run+0x214>
				yellow_time_1+=YELLOW_INC;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000d62:	6013      	str	r3, [r2, #0]

			}
			if(isButtonPress(1)){
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff f9f1 	bl	800014c <isButtonPress>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 809e 	beq.w	8000eae <fsm_tuning_run+0x35e>
				YELLOW_INC=0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <fsm_tuning_run+0x274>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
				red_time_2=yellow_time_1+green_time_1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <fsm_tuning_run+0x270>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <fsm_tuning_run+0x268>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <fsm_tuning_run+0x278>)
 8000d84:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <fsm_tuning_run+0x27c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <fsm_tuning_run+0x280>)
 8000d8c:	6013      	str	r3, [r2, #0]
				send_info(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fdaa 	bl	80018e8 <send_info>
				status=TUNING_GREEN2;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <fsm_tuning_run+0x254>)
 8000d96:	222b      	movs	r2, #43	; 0x2b
 8000d98:	601a      	str	r2, [r3, #0]
				setTimer1(10);
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f000 fb78 	bl	8001490 <setTimer1>
			}
			break;
 8000da0:	e085      	b.n	8000eae <fsm_tuning_run+0x35e>
 8000da2:	bf00      	nop
 8000da4:	200000b8 	.word	0x200000b8
 8000da8:	200000bc 	.word	0x200000bc
 8000dac:	20000000 	.word	0x20000000
 8000db0:	2000001c 	.word	0x2000001c
 8000db4:	200000f8 	.word	0x200000f8
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	200000c4 	.word	0x200000c4
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200000c0 	.word	0x200000c0
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000010 	.word	0x20000010
 8000dd0:	20000020 	.word	0x20000020

		case TUNING_GREEN2:
			setLEDGREEN2();
 8000dd4:	f000 f8dc 	bl	8000f90 <setLEDGREEN2>
			clearLED1();
 8000dd8:	f000 f926 	bl	8001028 <clearLED1>

			if(isButtonPress(2)){
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff f9b5 	bl	800014c <isButtonPress>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00e      	beq.n	8000e06 <fsm_tuning_run+0x2b6>
				GREEN_INC++;
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000df0:	6013      	str	r3, [r2, #0]
				val_info2=GREEN_INC+green_time_2;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <fsm_tuning_run+0x370>)
 8000dfe:	6013      	str	r3, [r2, #0]
				send_info(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fd71 	bl	80018e8 <send_info>
			}

			if (isButtonLongPress(2)){
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff f9ba 	bl	8000180 <isButtonLongPress>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d015      	beq.n	8000e3e <fsm_tuning_run+0x2ee>
				if (timer1_flag == 1){
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <fsm_tuning_run+0x374>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d111      	bne.n	8000e3e <fsm_tuning_run+0x2ee>
					GREEN_INC--;
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000e22:	6013      	str	r3, [r2, #0]
					val_info2=GREEN_INC+green_time_2;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <fsm_tuning_run+0x370>)
 8000e30:	6013      	str	r3, [r2, #0]
					send_info(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fd58 	bl	80018e8 <send_info>
					setTimer1(200);
 8000e38:	20c8      	movs	r0, #200	; 0xc8
 8000e3a:	f000 fb29 	bl	8001490 <setTimer1>
				}
			}

			if(isButtonPress(3)){
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff f984 	bl	800014c <isButtonPress>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <fsm_tuning_run+0x308>
				green_time_2+=GREEN_INC;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e56:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPress(1)){
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff f977 	bl	800014c <isButtonPress>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d026      	beq.n	8000eb2 <fsm_tuning_run+0x362>
				GREEN_INC=0;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <fsm_tuning_run+0x368>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
				yellow_time_2=red_time_1-green_time_2;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <fsm_tuning_run+0x378>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <fsm_tuning_run+0x37c>)
 8000e76:	6013      	str	r3, [r2, #0]
				status=RED1_GREEN2;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <fsm_tuning_run+0x380>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
				val_info1=red_time_1;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <fsm_tuning_run+0x378>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <fsm_tuning_run+0x384>)
 8000e84:	6013      	str	r3, [r2, #0]
				val_info2=green_time_2;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <fsm_tuning_run+0x370>)
 8000e8c:	6013      	str	r3, [r2, #0]
				setTimer1(green_time_2 * 1000);
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <fsm_tuning_run+0x36c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 faf8 	bl	8001490 <setTimer1>
			}
			break;
 8000ea0:	e007      	b.n	8000eb2 <fsm_tuning_run+0x362>

		default:
			break;
 8000ea2:	bf00      	nop
 8000ea4:	e006      	b.n	8000eb4 <fsm_tuning_run+0x364>
			break;
 8000ea6:	bf00      	nop
 8000ea8:	e004      	b.n	8000eb4 <fsm_tuning_run+0x364>
			break;
 8000eaa:	bf00      	nop
 8000eac:	e002      	b.n	8000eb4 <fsm_tuning_run+0x364>
			break;
 8000eae:	bf00      	nop
 8000eb0:	e000      	b.n	8000eb4 <fsm_tuning_run+0x364>
			break;
 8000eb2:	bf00      	nop

	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000c4 	.word	0x200000c4
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	20000020 	.word	0x20000020
 8000ec4:	200000f8 	.word	0x200000f8
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	200000b8 	.word	0x200000b8
 8000ed4:	2000001c 	.word	0x2000001c

08000ed8 <setLEDRED1>:
 *  Created on: Dec 5, 2022
 *      Author: Admin
 */

#include "led_traffic.h"
void setLEDRED1(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <setLEDRED1+0x20>)
 8000ee4:	f001 f91f 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2108      	movs	r1, #8
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <setLEDRED1+0x24>)
 8000eee:	f001 f91a 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <setLEDYELLOW1>:
void setLEDYELLOW1(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <setLEDYELLOW1+0x20>)
 8000f0c:	f001 f90b 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2108      	movs	r1, #8
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <setLEDYELLOW1+0x24>)
 8000f16:	f001 f906 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010800 	.word	0x40010800
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <setLEDGREEN1>:
void setLEDGREEN1(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <setLEDGREEN1+0x20>)
 8000f34:	f001 f8f7 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <setLEDGREEN1+0x24>)
 8000f3e:	f001 f8f2 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <setLEDRED2>:

void setLEDRED2(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2120      	movs	r1, #32
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <setLEDRED2+0x1c>)
 8000f5a:	f001 f8e4 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2110      	movs	r1, #16
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <setLEDRED2+0x1c>)
 8000f64:	f001 f8df 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <setLEDYELLOW2>:
void setLEDYELLOW2(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2120      	movs	r1, #32
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <setLEDYELLOW2+0x1c>)
 8000f7a:	f001 f8d4 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2110      	movs	r1, #16
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <setLEDYELLOW2+0x1c>)
 8000f84:	f001 f8cf 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <setLEDGREEN2>:
void setLEDGREEN2(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2120      	movs	r1, #32
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <setLEDGREEN2+0x1c>)
 8000f9a:	f001 f8c4 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <setLEDGREEN2+0x1c>)
 8000fa4:	f001 f8bf 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <setLEDRED3>:

void setLEDRED3(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <setLEDRED3+0x20>)
 8000fbc:	f001 f8b3 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <setLEDRED3+0x24>)
 8000fc8:	f001 f8ad 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <setLEDYELLOW3>:
void setLEDYELLOW3(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <setLEDYELLOW3+0x20>)
 8000fe4:	f001 f89f 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <setLEDYELLOW3+0x24>)
 8000ff0:	f001 f899 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	40010800 	.word	0x40010800

08001000 <setLEDGREEN3>:
void setLEDGREEN3(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <setLEDGREEN3+0x20>)
 800100c:	f001 f88b 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <setLEDGREEN3+0x24>)
 8001018:	f001 f885 	bl	8002126 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010c00 	.word	0x40010c00
 8001024:	40010800 	.word	0x40010800

08001028 <clearLED1>:

void clearLED1(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <clearLED1+0x20>)
 8001034:	f001 f877 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <clearLED1+0x24>)
 800103e:	f001 f872 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00

08001050 <clearLED2>:

void clearLED2(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2120      	movs	r1, #32
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <clearLED2+0x1c>)
 800105a:	f001 f864 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2110      	movs	r1, #16
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <clearLED2+0x1c>)
 8001064:	f001 f85f 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010c00 	.word	0x40010c00

08001070 <clearLED3>:

void clearLED3(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <clearLED3+0x20>)
 800107c:	f001 f853 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <clearLED3+0x24>)
 8001088:	f001 f84d 	bl	8002126 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40010800 	.word	0x40010800

08001098 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
if( huart -> Instance == USART2 ) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_UART_RxCpltCallback+0x30>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10a      	bne.n	80010c0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit (& huart2 , & temp , 1 , 50) ;
 80010aa:	2332      	movs	r3, #50	; 0x32
 80010ac:	2201      	movs	r2, #1
 80010ae:	4907      	ldr	r1, [pc, #28]	; (80010cc <HAL_UART_RxCpltCallback+0x34>)
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_UART_RxCpltCallback+0x38>)
 80010b2:	f002 fc16 	bl	80038e2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (& huart2 , & temp , 1) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <HAL_UART_RxCpltCallback+0x34>)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_RxCpltCallback+0x38>)
 80010bc:	f002 fca3 	bl	8003a06 <HAL_UART_Receive_IT>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004400 	.word	0x40004400
 80010cc:	200000f0 	.word	0x200000f0
 80010d0:	20000210 	.word	0x20000210

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fc6a 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f82a 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 f956 	bl	8001390 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010e4:	f000 f868 	bl	80011b8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010e8:	f000 f928 	bl	800133c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010ec:	f000 f8b0 	bl	8001250 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT (& huart2 , & temp , 1) ;
  HAL_TIM_Base_Start_IT(&htim2);
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <main+0x50>)
 80010f2:	f001 fc9b 	bl	8002a2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <main+0x54>)
 80010fa:	f001 fd41 	bl	8002b80 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <main+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
  status_pedes = INIT_PEDES;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <main+0x5c>)
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	601a      	str	r2, [r3, #0]
  setTimer4(1000);
 800110a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110e:	f000 fa13 	bl	8001538 <setTimer4>
  while (1)
  {
	  fsm_auto_run();
 8001112:	f7ff f905 	bl	8000320 <fsm_auto_run>
  	  fsm_manual_run();
 8001116:	f7ff faaf 	bl	8000678 <fsm_manual_run>
  	  fsm_pedes_run();
 800111a:	f7ff fc7b 	bl	8000a14 <fsm_pedes_run>
  	  fsm_tuning_run();
 800111e:	f7ff fd17 	bl	8000b50 <fsm_tuning_run>
	  fsm_auto_run();
 8001122:	e7f6      	b.n	8001112 <main+0x3e>
 8001124:	200001c8 	.word	0x200001c8
 8001128:	20000180 	.word	0x20000180
 800112c:	200000b8 	.word	0x200000b8
 8001130:	200000b4 	.word	0x200000b4

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	; 0x40
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2228      	movs	r2, #40	; 0x28
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f8e2 	bl	800430c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115e:	2310      	movs	r3, #16
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001166:	2300      	movs	r3, #0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800116a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f000 ffef 	bl	8002158 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001180:	f000 f980 	bl	8001484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2102      	movs	r1, #2
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fa5a 	bl	8002658 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011aa:	f000 f96b 	bl	8001484 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3740      	adds	r7, #64	; 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM2_Init+0x94>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM2_Init+0x94>)
 80011de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM2_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM2_Init+0x94>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM2_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM2_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM2_Init+0x94>)
 80011fe:	f001 fbc5 	bl	800298c <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001208:	f000 f93c 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM2_Init+0x94>)
 800121a:	f001 ff19 	bl	8003050 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 f92e 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM2_Init+0x94>)
 8001236:	f002 fa97 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 f920 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001c8 	.word	0x200001c8

08001250 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <MX_TIM3_Init+0xe8>)
 8001284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <MX_TIM3_Init+0xe4>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MX_TIM3_Init+0xe4>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012a8:	f001 fb70 	bl	800298c <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012b2:	f000 f8e7 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	4619      	mov	r1, r3
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012c4:	f001 fec4 	bl	8003050 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ce:	f000 f8d9 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012d4:	f001 fbfc 	bl	8002ad0 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012de:	f000 f8d1 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012f2:	f002 fa39 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012fc:	f000 f8c2 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001318:	f001 fddc 	bl	8002ed4 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001322:	f000 f8af 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001328:	f000 f9e2 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000180 	.word	0x20000180
 8001338:	40000400 	.word	0x40000400

0800133c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <MX_USART2_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800134c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001374:	f002 fa68 	bl	8003848 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 f881 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000210 	.word	0x20000210
 800138c:	40004400 	.word	0x40004400

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <MX_GPIO_Init+0xd0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013da:	4822      	ldr	r0, [pc, #136]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013dc:	f000 fea3 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013e6:	4820      	ldr	r0, [pc, #128]	; (8001468 <MX_GPIO_Init+0xd8>)
 80013e8:	f000 fe9d 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80013ec:	2313      	movs	r3, #19
 80013ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <MX_GPIO_Init+0xd8>)
 8001400:	f000 fcf6 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001404:	2301      	movs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4619      	mov	r1, r3
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_GPIO_Init+0xd4>)
 8001418:	f000 fcea 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800141c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4619      	mov	r1, r3
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_GPIO_Init+0xd4>)
 8001436:	f000 fcdb 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800143a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800143e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_GPIO_Init+0xd8>)
 8001454:	f000 fccc 	bl	8001df0 <HAL_GPIO_Init>

}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40010800 	.word	0x40010800

0800146c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	button_read();
 8001474:	f7fe fe98 	bl	80001a8 <button_read>
	timerRun();
 8001478:	f000 f87a 	bl	8001570 <timerRun>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <setTimer1>:
int timer3_counter=0;
int timer3_flag=0;
int timer4_counter=0;
int timer4_flag=0;

void setTimer1(int duration){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / CYCLE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <setTimer1+0x2c>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	1092      	asrs	r2, r2, #2
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <setTimer1+0x30>)
 80014a8:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <setTimer1+0x34>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	66666667 	.word	0x66666667
 80014c0:	200000f4 	.word	0x200000f4
 80014c4:	200000f8 	.word	0x200000f8

080014c8 <setTimer2>:

void setTimer2(int duration){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / CYCLE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <setTimer2+0x2c>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1092      	asrs	r2, r2, #2
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <setTimer2+0x30>)
 80014e0:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <setTimer2+0x34>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	66666667 	.word	0x66666667
 80014f8:	200000fc 	.word	0x200000fc
 80014fc:	20000100 	.word	0x20000100

08001500 <setTimer3>:

void setTimer3(int duration){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / CYCLE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <setTimer3+0x2c>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1092      	asrs	r2, r2, #2
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <setTimer3+0x30>)
 8001518:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <setTimer3+0x34>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	66666667 	.word	0x66666667
 8001530:	20000104 	.word	0x20000104
 8001534:	20000108 	.word	0x20000108

08001538 <setTimer4>:
void setTimer4(int duration){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / CYCLE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <setTimer4+0x2c>)
 8001544:	fb82 1203 	smull	r1, r2, r2, r3
 8001548:	1092      	asrs	r2, r2, #2
 800154a:	17db      	asrs	r3, r3, #31
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <setTimer4+0x30>)
 8001550:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <setTimer4+0x34>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	66666667 	.word	0x66666667
 8001568:	2000010c 	.word	0x2000010c
 800156c:	20000110 	.word	0x20000110

08001570 <timerRun>:

void timerRun(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <timerRun+0x8c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd0b      	ble.n	8001594 <timerRun+0x24>
		timer1_counter--;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <timerRun+0x8c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <timerRun+0x8c>)
 8001584:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <timerRun+0x8c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc02      	bgt.n	8001594 <timerRun+0x24>
			timer1_flag=1;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <timerRun+0x90>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <timerRun+0x94>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dd0b      	ble.n	80015b4 <timerRun+0x44>
		timer2_counter--;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <timerRun+0x94>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <timerRun+0x94>)
 80015a4:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <timerRun+0x94>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc02      	bgt.n	80015b4 <timerRun+0x44>
			timer2_flag=1;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <timerRun+0x98>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <timerRun+0x9c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd0b      	ble.n	80015d4 <timerRun+0x64>
		timer3_counter--;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <timerRun+0x9c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <timerRun+0x9c>)
 80015c4:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <timerRun+0x9c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dc02      	bgt.n	80015d4 <timerRun+0x64>
			timer3_flag=1;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <timerRun+0xa0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <timerRun+0xa4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dd0b      	ble.n	80015f4 <timerRun+0x84>
			timer4_counter--;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <timerRun+0xa4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <timerRun+0xa4>)
 80015e4:	6013      	str	r3, [r2, #0]
			if(timer4_counter<=0){
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <timerRun+0xa4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dc02      	bgt.n	80015f4 <timerRun+0x84>
				timer4_flag=1;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <timerRun+0xa8>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
			}
		}
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	200000f4 	.word	0x200000f4
 8001600:	200000f8 	.word	0x200000f8
 8001604:	200000fc 	.word	0x200000fc
 8001608:	20000100 	.word	0x20000100
 800160c:	20000104 	.word	0x20000104
 8001610:	20000108 	.word	0x20000108
 8001614:	2000010c 	.word	0x2000010c
 8001618:	20000110 	.word	0x20000110

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_MspInit+0x60>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_MspInit+0x60>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d114      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	201c      	movs	r0, #28
 80016b0:	f000 fab7 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b4:	201c      	movs	r0, #28
 80016b6:	f000 fad0 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ba:	e010      	b.n	80016de <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_TIM_Base_MspInit+0x6c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_TIM_Base_MspInit+0x68>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40000400 	.word	0x40000400

080016f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_TIM_MspPostInit+0x58>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d117      	bne.n	8001740 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_TIM_MspPostInit+0x5c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_TIM_MspPostInit+0x5c>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_TIM_MspPostInit+0x5c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001728:	2340      	movs	r3, #64	; 0x40
 800172a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_TIM_MspPostInit+0x60>)
 800173c:	f000 fb58 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40000400 	.word	0x40000400
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_UART_MspInit+0x98>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d137      	bne.n	80017e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0x9c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a4:	2304      	movs	r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <HAL_UART_MspInit+0xa0>)
 80017b8:	f000 fb1a 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017bc:	2308      	movs	r3, #8
 80017be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_MspInit+0xa0>)
 80017d0:	f000 fb0e 	bl	8001df0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2026      	movs	r0, #38	; 0x26
 80017da:	f000 fa22 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017de:	2026      	movs	r0, #38	; 0x26
 80017e0:	f000 fa3b 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f8fd 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM2_IRQHandler+0x10>)
 800184e:	f001 fa39 	bl	8002cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001c8 	.word	0x200001c8

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <USART2_IRQHandler+0x10>)
 8001862:	f002 f901 	bl	8003a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000210 	.word	0x20000210

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f002 fd0a 	bl	80042b8 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20005000 	.word	0x20005000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000114 	.word	0x20000114
 80018d8:	20000268 	.word	0x20000268

080018dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <send_info>:
 *
 *  Created on: Dec 8, 2022
 *      Author: Admin
 */
#include "transmit_info.h"
void send_info(int traffic){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	switch(traffic){
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <send_info+0x16>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d010      	beq.n	800191e <send_info+0x36>
			break;
		case 1:
			HAL_UART_Transmit (&huart2 , ( void *) info_2 , sprintf( info_2 , "!7SEG:%d:TRAFFIC2#", val_info2) , 1000) ;
			break;
		default:
			break;
 80018fc:	e01f      	b.n	800193e <send_info+0x56>
			HAL_UART_Transmit (&huart2 , ( void *) info_1 , sprintf( info_1 , "!7SEG:%d:TRAFFIC1#", val_info1) , 1000) ;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <send_info+0x60>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4911      	ldr	r1, [pc, #68]	; (800194c <send_info+0x64>)
 8001906:	4812      	ldr	r0, [pc, #72]	; (8001950 <send_info+0x68>)
 8001908:	f002 fd08 	bl	800431c <siprintf>
 800190c:	4603      	mov	r3, r0
 800190e:	b29a      	uxth	r2, r3
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <send_info+0x68>)
 8001916:	480f      	ldr	r0, [pc, #60]	; (8001954 <send_info+0x6c>)
 8001918:	f001 ffe3 	bl	80038e2 <HAL_UART_Transmit>
			break;
 800191c:	e00f      	b.n	800193e <send_info+0x56>
			HAL_UART_Transmit (&huart2 , ( void *) info_2 , sprintf( info_2 , "!7SEG:%d:TRAFFIC2#", val_info2) , 1000) ;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <send_info+0x70>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	490d      	ldr	r1, [pc, #52]	; (800195c <send_info+0x74>)
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <send_info+0x78>)
 8001928:	f002 fcf8 	bl	800431c <siprintf>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	490a      	ldr	r1, [pc, #40]	; (8001960 <send_info+0x78>)
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <send_info+0x6c>)
 8001938:	f001 ffd3 	bl	80038e2 <HAL_UART_Transmit>
			break;
 800193c:	bf00      	nop
	}
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000001c 	.word	0x2000001c
 800194c:	08004ba8 	.word	0x08004ba8
 8001950:	200000c8 	.word	0x200000c8
 8001954:	20000210 	.word	0x20000210
 8001958:	20000020 	.word	0x20000020
 800195c:	08004bbc 	.word	0x08004bbc
 8001960:	200000dc 	.word	0x200000dc

08001964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800198a:	f7ff ffa7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198e:	f002 fc99 	bl	80042c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001992:	f7ff fb9f 	bl	80010d4 <main>
  bx lr
 8001996:	4770      	bx	lr
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80019a0:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 80019a4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80019a8:	20000268 	.word	0x20000268

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_Init+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x28>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f923 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	200f      	movs	r0, #15
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fe26 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f93b 	bl	8001c76 <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 f903 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000024 	.word	0x20000024
 8001a34:	2000002c 	.word	0x2000002c
 8001a38:	20000028 	.word	0x20000028

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x20>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_IncTick+0x20>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	2000002c 	.word	0x2000002c
 8001a5c:	20000254 	.word	0x20000254

08001a60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_GetTick+0x10>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000254 	.word	0x20000254

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4906      	ldr	r1, [pc, #24]	; (8001b0c <__NVIC_EnableIRQ+0x34>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff90 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff2d 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff42 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff90 	bl	8001b64 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5f 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff35 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d008      	beq.n	8001cb6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e020      	b.n	8001cf8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020e 	bic.w	r2, r2, #14
 8001cc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d005      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e051      	b.n	8001dca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 020e 	bic.w	r2, r2, #14
 8001d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_DMA_Abort_IT+0xd0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d029      	beq.n	8001da4 <HAL_DMA_Abort_IT+0xa0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_DMA_Abort_IT+0xd4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x9c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_DMA_Abort_IT+0xd8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01a      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x96>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_DMA_Abort_IT+0xdc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x90>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_DMA_Abort_IT+0xe0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00a      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x8a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_DMA_Abort_IT+0xe4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <HAL_DMA_Abort_IT+0x84>
 8001d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d86:	e00e      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8c:	e00b      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d92:	e008      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d98:	e005      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9e:	e002      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001da0:	2310      	movs	r3, #16
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_Abort_IT+0xa2>
 8001da4:	2301      	movs	r3, #1
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_DMA_Abort_IT+0xe8>)
 8001da8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
    } 
  }
  return status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020008 	.word	0x40020008
 8001dd8:	4002001c 	.word	0x4002001c
 8001ddc:	40020030 	.word	0x40020030
 8001de0:	40020044 	.word	0x40020044
 8001de4:	40020058 	.word	0x40020058
 8001de8:	4002006c 	.word	0x4002006c
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	492c      	ldr	r1, [pc, #176]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4918      	ldr	r1, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	; 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]
 8002132:	4613      	mov	r3, r2
 8002134:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002136:	787b      	ldrb	r3, [r7, #1]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002142:	e003      	b.n	800214c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	041a      	lsls	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
	...

08002158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e26c      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8087 	beq.w	8002286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002184:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
 8002190:	4b8c      	ldr	r3, [pc, #560]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06c      	beq.n	8002284 <HAL_RCC_OscConfig+0x12c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e246      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x76>
 80021c0:	4b80      	ldr	r3, [pc, #512]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7f      	ldr	r2, [pc, #508]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02e      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a77      	ldr	r2, [pc, #476]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xbc>
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a71      	ldr	r2, [pc, #452]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 8002214:	4b6b      	ldr	r3, [pc, #428]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a67      	ldr	r2, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fc14 	bl	8001a60 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fc10 	bl	8001a60 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1fa      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xe4>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fc00 	bl	8001a60 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fbfc 	bl	8001a60 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1e6      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x10c>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
 80022aa:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1ba      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4939      	ldr	r1, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7ff fbb5 	bl	8001a60 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fbb1 	bl	8001a60 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e19b      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4927      	ldr	r1, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fb94 	bl	8001a60 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fb90 	bl	8001a60 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e17a      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03a      	beq.n	80023dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_RCC_OscConfig+0x274>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7ff fb74 	bl	8001a60 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fb70 	bl	8001a60 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e15a      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f000 fad8 	bl	8002950 <RCC_Delay>
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_OscConfig+0x274>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fb5a 	bl	8001a60 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	e00f      	b.n	80023d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7ff fb56 	bl	8001a60 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e140      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	42420000 	.word	0x42420000
 80023cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b9e      	ldr	r3, [pc, #632]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e9      	bne.n	80023b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a6 	beq.w	8002536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b97      	ldr	r3, [pc, #604]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a93      	ldr	r2, [pc, #588]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b8b      	ldr	r3, [pc, #556]	; (8002650 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a8a      	ldr	r2, [pc, #552]	; (8002650 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb17 	bl	8001a60 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fb13 	bl	8001a60 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0fd      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x4f8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x312>
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x334>
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a75      	ldr	r2, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a72      	ldr	r2, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	e01c      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_OscConfig+0x356>
 8002494:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a6c      	ldr	r2, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a69      	ldr	r2, [pc, #420]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 80024ae:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a66      	ldr	r2, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d015      	beq.n	80024fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fac7 	bl	8001a60 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff fac3 	bl	8001a60 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0ab      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ee      	beq.n	80024d6 <HAL_RCC_OscConfig+0x37e>
 80024f8:	e014      	b.n	8002524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7ff fab1 	bl	8001a60 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff faad 	bl	8001a60 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e095      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a47      	ldr	r2, [pc, #284]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8081 	beq.w	8002642 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d061      	beq.n	8002610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d146      	bne.n	80025e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x4fc>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff fa81 	bl	8001a60 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff fa7d 	bl	8001a60 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e067      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	492d      	ldr	r1, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a19      	ldr	r1, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	430b      	orrs	r3, r1
 80025ae:	4927      	ldr	r1, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x4fc>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff fa51 	bl	8001a60 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7ff fa4d 	bl	8001a60 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e037      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46a>
 80025e0:	e02f      	b.n	8002642 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCC_OscConfig+0x4fc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa3a 	bl	8001a60 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff fa36 	bl	8001a60 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e020      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x498>
 800260e:	e018      	b.n	8002642 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e013      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_OscConfig+0x4f4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	42420060 	.word	0x42420060

08002658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0d0      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d910      	bls.n	800269c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4965      	ldr	r1, [pc, #404]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d040      	beq.n	8002778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d115      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e073      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4936      	ldr	r1, [pc, #216]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002748:	f7ff f98a 	bl	8001a60 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7ff f986 	bl	8001a60 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e053      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d210      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4922      	ldr	r1, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f821 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1cc>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1d0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f8e8 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	08004be0 	.word	0x08004be0
 8002824:	20000024 	.word	0x20000024
 8002828:	20000028 	.word	0x20000028

0800282c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b490      	push	{r4, r7}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002832:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002834:	1d3c      	adds	r4, r7, #4
 8002836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800283c:	f240 2301 	movw	r3, #513	; 0x201
 8002840:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x40>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x46>
 800286a:	e02d      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286e:	623b      	str	r3, [r7, #32]
      break;
 8002870:	e02d      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287e:	4413      	add	r3, r2
 8002880:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002884:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0c5b      	lsrs	r3, r3, #17
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800289e:	4413      	add	r3, r2
 80028a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028aa:	fb02 f203 	mul.w	r2, r2, r3
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e004      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	623b      	str	r3, [r7, #32]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ca:	623b      	str	r3, [r7, #32]
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc90      	pop	{r4, r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	08004bd0 	.word	0x08004bd0
 80028e0:	40021000 	.word	0x40021000
 80028e4:	007a1200 	.word	0x007a1200
 80028e8:	003d0900 	.word	0x003d0900

080028ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <HAL_RCC_GetHCLKFreq+0x10>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000024 	.word	0x20000024

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff2 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	08004bf0 	.word	0x08004bf0

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffde 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0adb      	lsrs	r3, r3, #11
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	08004bf0 	.word	0x08004bf0

08002950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <RCC_Delay+0x34>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <RCC_Delay+0x38>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a5b      	lsrs	r3, r3, #9
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800296c:	bf00      	nop
  }
  while (Delay --);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	60fa      	str	r2, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <RCC_Delay+0x1c>
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000024 	.word	0x20000024
 8002988:	10624dd3 	.word	0x10624dd3

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fe64 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fc28 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d001      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e03a      	b.n	8002aba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d009      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x58>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <HAL_TIM_Base_Start_IT+0xa0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d010      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	e007      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f839 	bl	8002b6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 fb86 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_TIM_PWM_Start+0x24>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e022      	b.n	8002bea <HAL_TIM_PWM_Start+0x6a>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d109      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x3e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e015      	b.n	8002bea <HAL_TIM_PWM_Start+0x6a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d109      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x58>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e008      	b.n	8002bea <HAL_TIM_PWM_Start+0x6a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e05e      	b.n	8002cb0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x82>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c00:	e013      	b.n	8002c2a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x92>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_PWM_Start+0xaa>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c20:	e003      	b.n	8002c2a <HAL_TIM_PWM_Start+0xaa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd74 	bl	8003720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_TIM_PWM_Start+0x138>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_TIM_PWM_Start+0x138>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIM_PWM_Start+0xfa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d009      	beq.n	8002c7a <HAL_TIM_PWM_Start+0xfa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <HAL_TIM_PWM_Start+0x13c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIM_PWM_Start+0xfa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_TIM_PWM_Start+0x140>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d010      	beq.n	8002cae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9c:	e007      	b.n	8002cae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800

08002cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0202 	mvn.w	r2, #2
 8002cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa6f 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa62 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fa71 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0204 	mvn.w	r2, #4
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa45 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa38 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fa47 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0208 	mvn.w	r2, #8
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa1b 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa0e 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fa1d 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9f1 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9e4 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f9f3 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0201 	mvn.w	r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fb12 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fce1 	bl	8003836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9b7 	bl	800320e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0220 	mvn.w	r2, #32
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fcac 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0ac      	b.n	8003048 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	f200 809f 	bhi.w	800303c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	0800303d 	.word	0x0800303d
 8002f0c:	0800303d 	.word	0x0800303d
 8002f10:	0800303d 	.word	0x0800303d
 8002f14:	08002f79 	.word	0x08002f79
 8002f18:	0800303d 	.word	0x0800303d
 8002f1c:	0800303d 	.word	0x0800303d
 8002f20:	0800303d 	.word	0x0800303d
 8002f24:	08002fbb 	.word	0x08002fbb
 8002f28:	0800303d 	.word	0x0800303d
 8002f2c:	0800303d 	.word	0x0800303d
 8002f30:	0800303d 	.word	0x0800303d
 8002f34:	08002ffb 	.word	0x08002ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f9d0 	bl	80032e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0208 	orr.w	r2, r2, #8
 8002f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6999      	ldr	r1, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	619a      	str	r2, [r3, #24]
      break;
 8002f76:	e062      	b.n	800303e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa16 	bl	80033b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6999      	ldr	r1, [r3, #24]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	619a      	str	r2, [r3, #24]
      break;
 8002fb8:	e041      	b.n	800303e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fa5f 	bl	8003484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0208 	orr.w	r2, r2, #8
 8002fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0204 	bic.w	r2, r2, #4
 8002fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	61da      	str	r2, [r3, #28]
      break;
 8002ff8:	e021      	b.n	800303e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 faa9 	bl	8003558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69d9      	ldr	r1, [r3, #28]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	61da      	str	r2, [r3, #28]
      break;
 800303a:	e000      	b.n	800303e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800303c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIM_ConfigClockSource+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e0b3      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x180>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d03e      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xd0>
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	f200 8087 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	f000 8085 	beq.w	80031bc <HAL_TIM_ConfigClockSource+0x16c>
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d87f      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d01a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xa2>
 80030bc:	2b70      	cmp	r3, #112	; 0x70
 80030be:	d87b      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030c0:	2b60      	cmp	r3, #96	; 0x60
 80030c2:	d050      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x116>
 80030c4:	2b60      	cmp	r3, #96	; 0x60
 80030c6:	d877      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d03c      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xf6>
 80030cc:	2b50      	cmp	r3, #80	; 0x50
 80030ce:	d873      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d058      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x136>
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d86f      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d064      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x156>
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d86b      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d060      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x156>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d867      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x156>
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d05a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030f0:	e062      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f000 faee 	bl	80036e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e04e      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f000 fad7 	bl	80036e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003142:	609a      	str	r2, [r3, #8]
      break;
 8003144:	e03b      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 fa4e 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2150      	movs	r1, #80	; 0x50
 800315e:	4618      	mov	r0, r3
 8003160:	f000 faa5 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003164:	e02b      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fa6c 	bl	8003650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2160      	movs	r1, #96	; 0x60
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa95 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003184:	e01b      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	461a      	mov	r2, r3
 8003194:	f000 fa2e 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa85 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80031a4:	e00b      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 fa7c 	bl	80036ae <TIM_ITRx_SetConfig>
        break;
 80031b6:	e002      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a26      	ldr	r2, [pc, #152]	; (80032dc <TIM_Base_SetConfig+0xbc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <TIM_Base_SetConfig+0xc0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <TIM_Base_SetConfig+0xbc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <TIM_Base_SetConfig+0xc0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800

080032e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f023 0201 	bic.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0302 	bic.w	r3, r3, #2
 800332c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <TIM_OC1_SetConfig+0xc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10c      	bne.n	800335a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0308 	bic.w	r3, r3, #8
 8003346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <TIM_OC1_SetConfig+0xc8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0210 	bic.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <TIM_OC2_SetConfig+0xd0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10d      	bne.n	800342c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a14      	ldr	r2, [pc, #80]	; (8003480 <TIM_OC2_SetConfig+0xd0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d113      	bne.n	800345c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40012c00 	.word	0x40012c00

08003484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d113      	bne.n	800352e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00

08003558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <TIM_OC4_SetConfig+0x98>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0210 	bic.w	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	031b      	lsls	r3, r3, #12
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	021a      	lsls	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	609a      	str	r2, [r3, #8]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2201      	movs	r2, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e046      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e03f      	b.n	80038da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd ff70 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fc85 	bl	800419c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b08a      	sub	sp, #40	; 0x28
 80038e6:	af02      	add	r7, sp, #8
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d17c      	bne.n	80039fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x2c>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e075      	b.n	80039fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x3e>
 800391c:	2302      	movs	r3, #2
 800391e:	e06e      	b.n	80039fe <HAL_UART_Transmit+0x11c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003936:	f7fe f893 	bl	8001a60 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d108      	bne.n	8003964 <HAL_UART_Transmit+0x82>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e003      	b.n	800396c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003974:	e02a      	b.n	80039cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa38 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e036      	b.n	80039fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	3302      	adds	r3, #2
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e007      	b.n	80039be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	3301      	adds	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1cf      	bne.n	8003976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2140      	movs	r1, #64	; 0x40
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa08 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e006      	b.n	80039fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d11d      	bne.n	8003a5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Receive_IT+0x26>
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e016      	b.n	8003a5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Receive_IT+0x38>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e00f      	b.n	8003a5e <HAL_UART_Receive_IT+0x58>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa19 	bl	8003e8a <UART_Start_Receive_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x52>
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fac9 	bl	800404a <UART_Receive_IT>
      return;
 8003ab8:	e17b      	b.n	8003db2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80b1 	beq.w	8003c24 <HAL_UART_IRQHandler+0x1bc>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x70>
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a6 	beq.w	8003c24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_UART_IRQHandler+0x90>
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_UART_IRQHandler+0xb0>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_UART_IRQHandler+0xd0>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0204 	orr.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00f      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_UART_IRQHandler+0xee>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0208 	orr.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 811e 	beq.w	8003da8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_UART_IRQHandler+0x11e>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa62 	bl	800404a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <HAL_UART_IRQHandler+0x146>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d031      	beq.n	8003c12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9a4 	bl	8003efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4a76      	ldr	r2, [pc, #472]	; (8003db8 <HAL_UART_IRQHandler+0x350>)
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe f88c 	bl	8001d04 <HAL_DMA_Abort_IT>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00e      	b.n	8003c20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8e3 	bl	8003dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e00a      	b.n	8003c20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8df 	bl	8003dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	e006      	b.n	8003c20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8db 	bl	8003dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c1e:	e0c3      	b.n	8003da8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	bf00      	nop
    return;
 8003c22:	e0c1      	b.n	8003da8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 80a1 	bne.w	8003d70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 809b 	beq.w	8003d70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8095 	beq.w	8003d70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04e      	beq.n	8003d08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c74:	8a3b      	ldrh	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8098 	beq.w	8003dac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c80:	8a3a      	ldrh	r2, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	f080 8092 	bcs.w	8003dac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8a3a      	ldrh	r2, [r7, #16]
 8003c8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d02b      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0210 	bic.w	r2, r2, #16
 8003ce4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd ffcf 	bl	8001c8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f86d 	bl	8003de0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d06:	e051      	b.n	8003dac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d047      	beq.n	8003db0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d20:	8a7b      	ldrh	r3, [r7, #18]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d044      	beq.n	8003db0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0210 	bic.w	r2, r2, #16
 8003d62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f839 	bl	8003de0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d6e:	e01f      	b.n	8003db0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_UART_IRQHandler+0x324>
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8f9 	bl	8003f7c <UART_Transmit_IT>
    return;
 8003d8a:	e012      	b.n	8003db2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_UART_IRQHandler+0x34a>
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f93a 	bl	800401a <UART_EndTransmit_IT>
    return;
 8003da6:	e004      	b.n	8003db2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003da8:	bf00      	nop
 8003daa:	e002      	b.n	8003db2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003db0:	bf00      	nop
  }
}
 8003db2:	3728      	adds	r7, #40	; 0x28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	08003f55 	.word	0x08003f55

08003dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	e02c      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d028      	beq.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e16:	f7fd fe23 	bl	8001a60 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d21d      	bcs.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00f      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d0c3      	beq.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2222      	movs	r2, #34	; 0x22
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d107      	bne.n	8003f3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0210 	bic.w	r2, r2, #16
 8003f3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff2d 	bl	8003dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b21      	cmp	r3, #33	; 0x21
 8003f8e:	d13e      	bne.n	800400e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d114      	bne.n	8003fc4 <UART_Transmit_IT+0x48>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d110      	bne.n	8003fc4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e008      	b.n	8003fd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c59      	adds	r1, r3, #1
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6211      	str	r1, [r2, #32]
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004008:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff febe 	bl	8003dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b22      	cmp	r3, #34	; 0x22
 800405c:	f040 8099 	bne.w	8004192 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d117      	bne.n	800409a <UART_Receive_IT+0x50>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d113      	bne.n	800409a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004088:	b29a      	uxth	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
 8004098:	e026      	b.n	80040e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d007      	beq.n	80040be <UART_Receive_IT+0x74>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <UART_Receive_IT+0x82>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e008      	b.n	80040de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d148      	bne.n	800418e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0220 	bic.w	r2, r2, #32
 800410a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	d123      	bne.n	8004184 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0210 	bic.w	r2, r2, #16
 8004150:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d10a      	bne.n	8004176 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fe2f 	bl	8003de0 <HAL_UARTEx_RxEventCallback>
 8004182:	e002      	b.n	800418a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc ff87 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e002      	b.n	8004194 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041d6:	f023 030c 	bic.w	r3, r3, #12
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <UART_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe fb90 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	e002      	b.n	8004212 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fb78 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8004210:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <UART_SetConfig+0x118>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	0119      	lsls	r1, r3, #4
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fbb2 f2f3 	udiv	r2, r2, r3
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <UART_SetConfig+0x118>)
 800424a:	fba3 0302 	umull	r0, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2064      	movs	r0, #100	; 0x64
 8004252:	fb00 f303 	mul.w	r3, r0, r3
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	3332      	adds	r3, #50	; 0x32
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <UART_SetConfig+0x118>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004268:	4419      	add	r1, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <UART_SetConfig+0x118>)
 8004282:	fba3 0302 	umull	r0, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2064      	movs	r0, #100	; 0x64
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	3332      	adds	r3, #50	; 0x32
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <UART_SetConfig+0x118>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	440a      	add	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40013800 	.word	0x40013800
 80042b4:	51eb851f 	.word	0x51eb851f

080042b8 <__errno>:
 80042b8:	4b01      	ldr	r3, [pc, #4]	; (80042c0 <__errno+0x8>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000030 	.word	0x20000030

080042c4 <__libc_init_array>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	2600      	movs	r6, #0
 80042c8:	4d0c      	ldr	r5, [pc, #48]	; (80042fc <__libc_init_array+0x38>)
 80042ca:	4c0d      	ldr	r4, [pc, #52]	; (8004300 <__libc_init_array+0x3c>)
 80042cc:	1b64      	subs	r4, r4, r5
 80042ce:	10a4      	asrs	r4, r4, #2
 80042d0:	42a6      	cmp	r6, r4
 80042d2:	d109      	bne.n	80042e8 <__libc_init_array+0x24>
 80042d4:	f000 fc5c 	bl	8004b90 <_init>
 80042d8:	2600      	movs	r6, #0
 80042da:	4d0a      	ldr	r5, [pc, #40]	; (8004304 <__libc_init_array+0x40>)
 80042dc:	4c0a      	ldr	r4, [pc, #40]	; (8004308 <__libc_init_array+0x44>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	42a6      	cmp	r6, r4
 80042e4:	d105      	bne.n	80042f2 <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ec:	4798      	blx	r3
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7ee      	b.n	80042d0 <__libc_init_array+0xc>
 80042f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f6:	4798      	blx	r3
 80042f8:	3601      	adds	r6, #1
 80042fa:	e7f2      	b.n	80042e2 <__libc_init_array+0x1e>
 80042fc:	08004c2c 	.word	0x08004c2c
 8004300:	08004c2c 	.word	0x08004c2c
 8004304:	08004c2c 	.word	0x08004c2c
 8004308:	08004c30 	.word	0x08004c30

0800430c <memset>:
 800430c:	4603      	mov	r3, r0
 800430e:	4402      	add	r2, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <siprintf>:
 800431c:	b40e      	push	{r1, r2, r3}
 800431e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004322:	b500      	push	{lr}
 8004324:	b09c      	sub	sp, #112	; 0x70
 8004326:	ab1d      	add	r3, sp, #116	; 0x74
 8004328:	9002      	str	r0, [sp, #8]
 800432a:	9006      	str	r0, [sp, #24]
 800432c:	9107      	str	r1, [sp, #28]
 800432e:	9104      	str	r1, [sp, #16]
 8004330:	4808      	ldr	r0, [pc, #32]	; (8004354 <siprintf+0x38>)
 8004332:	4909      	ldr	r1, [pc, #36]	; (8004358 <siprintf+0x3c>)
 8004334:	f853 2b04 	ldr.w	r2, [r3], #4
 8004338:	9105      	str	r1, [sp, #20]
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	a902      	add	r1, sp, #8
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	f000 f868 	bl	8004414 <_svfiprintf_r>
 8004344:	2200      	movs	r2, #0
 8004346:	9b02      	ldr	r3, [sp, #8]
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	b01c      	add	sp, #112	; 0x70
 800434c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004350:	b003      	add	sp, #12
 8004352:	4770      	bx	lr
 8004354:	20000030 	.word	0x20000030
 8004358:	ffff0208 	.word	0xffff0208

0800435c <__ssputs_r>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	688e      	ldr	r6, [r1, #8]
 8004362:	4682      	mov	sl, r0
 8004364:	429e      	cmp	r6, r3
 8004366:	460c      	mov	r4, r1
 8004368:	4690      	mov	r8, r2
 800436a:	461f      	mov	r7, r3
 800436c:	d838      	bhi.n	80043e0 <__ssputs_r+0x84>
 800436e:	898a      	ldrh	r2, [r1, #12]
 8004370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004374:	d032      	beq.n	80043dc <__ssputs_r+0x80>
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	6909      	ldr	r1, [r1, #16]
 800437a:	3301      	adds	r3, #1
 800437c:	eba5 0901 	sub.w	r9, r5, r1
 8004380:	6965      	ldr	r5, [r4, #20]
 8004382:	444b      	add	r3, r9
 8004384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800438c:	106d      	asrs	r5, r5, #1
 800438e:	429d      	cmp	r5, r3
 8004390:	bf38      	it	cc
 8004392:	461d      	movcc	r5, r3
 8004394:	0553      	lsls	r3, r2, #21
 8004396:	d531      	bpl.n	80043fc <__ssputs_r+0xa0>
 8004398:	4629      	mov	r1, r5
 800439a:	f000 fb53 	bl	8004a44 <_malloc_r>
 800439e:	4606      	mov	r6, r0
 80043a0:	b950      	cbnz	r0, 80043b8 <__ssputs_r+0x5c>
 80043a2:	230c      	movs	r3, #12
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f8ca 3000 	str.w	r3, [sl]
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	464a      	mov	r2, r9
 80043ba:	6921      	ldr	r1, [r4, #16]
 80043bc:	f000 face 	bl	800495c <memcpy>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	6126      	str	r6, [r4, #16]
 80043ce:	444e      	add	r6, r9
 80043d0:	6026      	str	r6, [r4, #0]
 80043d2:	463e      	mov	r6, r7
 80043d4:	6165      	str	r5, [r4, #20]
 80043d6:	eba5 0509 	sub.w	r5, r5, r9
 80043da:	60a5      	str	r5, [r4, #8]
 80043dc:	42be      	cmp	r6, r7
 80043de:	d900      	bls.n	80043e2 <__ssputs_r+0x86>
 80043e0:	463e      	mov	r6, r7
 80043e2:	4632      	mov	r2, r6
 80043e4:	4641      	mov	r1, r8
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	f000 fac6 	bl	8004978 <memmove>
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	1b9b      	subs	r3, r3, r6
 80043f2:	4432      	add	r2, r6
 80043f4:	2000      	movs	r0, #0
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	6022      	str	r2, [r4, #0]
 80043fa:	e7db      	b.n	80043b4 <__ssputs_r+0x58>
 80043fc:	462a      	mov	r2, r5
 80043fe:	f000 fb7b 	bl	8004af8 <_realloc_r>
 8004402:	4606      	mov	r6, r0
 8004404:	2800      	cmp	r0, #0
 8004406:	d1e1      	bne.n	80043cc <__ssputs_r+0x70>
 8004408:	4650      	mov	r0, sl
 800440a:	6921      	ldr	r1, [r4, #16]
 800440c:	f000 face 	bl	80049ac <_free_r>
 8004410:	e7c7      	b.n	80043a2 <__ssputs_r+0x46>
	...

08004414 <_svfiprintf_r>:
 8004414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004418:	4698      	mov	r8, r3
 800441a:	898b      	ldrh	r3, [r1, #12]
 800441c:	4607      	mov	r7, r0
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	460d      	mov	r5, r1
 8004422:	4614      	mov	r4, r2
 8004424:	b09d      	sub	sp, #116	; 0x74
 8004426:	d50e      	bpl.n	8004446 <_svfiprintf_r+0x32>
 8004428:	690b      	ldr	r3, [r1, #16]
 800442a:	b963      	cbnz	r3, 8004446 <_svfiprintf_r+0x32>
 800442c:	2140      	movs	r1, #64	; 0x40
 800442e:	f000 fb09 	bl	8004a44 <_malloc_r>
 8004432:	6028      	str	r0, [r5, #0]
 8004434:	6128      	str	r0, [r5, #16]
 8004436:	b920      	cbnz	r0, 8004442 <_svfiprintf_r+0x2e>
 8004438:	230c      	movs	r3, #12
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e0d1      	b.n	80045e6 <_svfiprintf_r+0x1d2>
 8004442:	2340      	movs	r3, #64	; 0x40
 8004444:	616b      	str	r3, [r5, #20]
 8004446:	2300      	movs	r3, #0
 8004448:	9309      	str	r3, [sp, #36]	; 0x24
 800444a:	2320      	movs	r3, #32
 800444c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004450:	2330      	movs	r3, #48	; 0x30
 8004452:	f04f 0901 	mov.w	r9, #1
 8004456:	f8cd 800c 	str.w	r8, [sp, #12]
 800445a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004600 <_svfiprintf_r+0x1ec>
 800445e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004462:	4623      	mov	r3, r4
 8004464:	469a      	mov	sl, r3
 8004466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446a:	b10a      	cbz	r2, 8004470 <_svfiprintf_r+0x5c>
 800446c:	2a25      	cmp	r2, #37	; 0x25
 800446e:	d1f9      	bne.n	8004464 <_svfiprintf_r+0x50>
 8004470:	ebba 0b04 	subs.w	fp, sl, r4
 8004474:	d00b      	beq.n	800448e <_svfiprintf_r+0x7a>
 8004476:	465b      	mov	r3, fp
 8004478:	4622      	mov	r2, r4
 800447a:	4629      	mov	r1, r5
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ff6d 	bl	800435c <__ssputs_r>
 8004482:	3001      	adds	r0, #1
 8004484:	f000 80aa 	beq.w	80045dc <_svfiprintf_r+0x1c8>
 8004488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800448a:	445a      	add	r2, fp
 800448c:	9209      	str	r2, [sp, #36]	; 0x24
 800448e:	f89a 3000 	ldrb.w	r3, [sl]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80a2 	beq.w	80045dc <_svfiprintf_r+0x1c8>
 8004498:	2300      	movs	r3, #0
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a2:	f10a 0a01 	add.w	sl, sl, #1
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	9307      	str	r3, [sp, #28]
 80044aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ae:	931a      	str	r3, [sp, #104]	; 0x68
 80044b0:	4654      	mov	r4, sl
 80044b2:	2205      	movs	r2, #5
 80044b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b8:	4851      	ldr	r0, [pc, #324]	; (8004600 <_svfiprintf_r+0x1ec>)
 80044ba:	f000 fa41 	bl	8004940 <memchr>
 80044be:	9a04      	ldr	r2, [sp, #16]
 80044c0:	b9d8      	cbnz	r0, 80044fa <_svfiprintf_r+0xe6>
 80044c2:	06d0      	lsls	r0, r2, #27
 80044c4:	bf44      	itt	mi
 80044c6:	2320      	movmi	r3, #32
 80044c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044cc:	0711      	lsls	r1, r2, #28
 80044ce:	bf44      	itt	mi
 80044d0:	232b      	movmi	r3, #43	; 0x2b
 80044d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d6:	f89a 3000 	ldrb.w	r3, [sl]
 80044da:	2b2a      	cmp	r3, #42	; 0x2a
 80044dc:	d015      	beq.n	800450a <_svfiprintf_r+0xf6>
 80044de:	4654      	mov	r4, sl
 80044e0:	2000      	movs	r0, #0
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	9a07      	ldr	r2, [sp, #28]
 80044e8:	4621      	mov	r1, r4
 80044ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ee:	3b30      	subs	r3, #48	; 0x30
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d94e      	bls.n	8004592 <_svfiprintf_r+0x17e>
 80044f4:	b1b0      	cbz	r0, 8004524 <_svfiprintf_r+0x110>
 80044f6:	9207      	str	r2, [sp, #28]
 80044f8:	e014      	b.n	8004524 <_svfiprintf_r+0x110>
 80044fa:	eba0 0308 	sub.w	r3, r0, r8
 80044fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	46a2      	mov	sl, r4
 8004506:	9304      	str	r3, [sp, #16]
 8004508:	e7d2      	b.n	80044b0 <_svfiprintf_r+0x9c>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	1d19      	adds	r1, r3, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	bfbb      	ittet	lt
 8004516:	425b      	neglt	r3, r3
 8004518:	f042 0202 	orrlt.w	r2, r2, #2
 800451c:	9307      	strge	r3, [sp, #28]
 800451e:	9307      	strlt	r3, [sp, #28]
 8004520:	bfb8      	it	lt
 8004522:	9204      	strlt	r2, [sp, #16]
 8004524:	7823      	ldrb	r3, [r4, #0]
 8004526:	2b2e      	cmp	r3, #46	; 0x2e
 8004528:	d10c      	bne.n	8004544 <_svfiprintf_r+0x130>
 800452a:	7863      	ldrb	r3, [r4, #1]
 800452c:	2b2a      	cmp	r3, #42	; 0x2a
 800452e:	d135      	bne.n	800459c <_svfiprintf_r+0x188>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	3402      	adds	r4, #2
 8004534:	1d1a      	adds	r2, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	9203      	str	r2, [sp, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bfb8      	it	lt
 800453e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004610 <_svfiprintf_r+0x1fc>
 8004548:	2203      	movs	r2, #3
 800454a:	4650      	mov	r0, sl
 800454c:	7821      	ldrb	r1, [r4, #0]
 800454e:	f000 f9f7 	bl	8004940 <memchr>
 8004552:	b140      	cbz	r0, 8004566 <_svfiprintf_r+0x152>
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	eba0 000a 	sub.w	r0, r0, sl
 800455a:	fa03 f000 	lsl.w	r0, r3, r0
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	3401      	adds	r4, #1
 8004562:	4303      	orrs	r3, r0
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	2206      	movs	r2, #6
 800456c:	4825      	ldr	r0, [pc, #148]	; (8004604 <_svfiprintf_r+0x1f0>)
 800456e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004572:	f000 f9e5 	bl	8004940 <memchr>
 8004576:	2800      	cmp	r0, #0
 8004578:	d038      	beq.n	80045ec <_svfiprintf_r+0x1d8>
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <_svfiprintf_r+0x1f4>)
 800457c:	bb1b      	cbnz	r3, 80045c6 <_svfiprintf_r+0x1b2>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	3307      	adds	r3, #7
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	3308      	adds	r3, #8
 8004588:	9303      	str	r3, [sp, #12]
 800458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458c:	4433      	add	r3, r6
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	e767      	b.n	8004462 <_svfiprintf_r+0x4e>
 8004592:	460c      	mov	r4, r1
 8004594:	2001      	movs	r0, #1
 8004596:	fb0c 3202 	mla	r2, ip, r2, r3
 800459a:	e7a5      	b.n	80044e8 <_svfiprintf_r+0xd4>
 800459c:	2300      	movs	r3, #0
 800459e:	f04f 0c0a 	mov.w	ip, #10
 80045a2:	4619      	mov	r1, r3
 80045a4:	3401      	adds	r4, #1
 80045a6:	9305      	str	r3, [sp, #20]
 80045a8:	4620      	mov	r0, r4
 80045aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ae:	3a30      	subs	r2, #48	; 0x30
 80045b0:	2a09      	cmp	r2, #9
 80045b2:	d903      	bls.n	80045bc <_svfiprintf_r+0x1a8>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0c5      	beq.n	8004544 <_svfiprintf_r+0x130>
 80045b8:	9105      	str	r1, [sp, #20]
 80045ba:	e7c3      	b.n	8004544 <_svfiprintf_r+0x130>
 80045bc:	4604      	mov	r4, r0
 80045be:	2301      	movs	r3, #1
 80045c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c4:	e7f0      	b.n	80045a8 <_svfiprintf_r+0x194>
 80045c6:	ab03      	add	r3, sp, #12
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	462a      	mov	r2, r5
 80045cc:	4638      	mov	r0, r7
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <_svfiprintf_r+0x1f8>)
 80045d0:	a904      	add	r1, sp, #16
 80045d2:	f3af 8000 	nop.w
 80045d6:	1c42      	adds	r2, r0, #1
 80045d8:	4606      	mov	r6, r0
 80045da:	d1d6      	bne.n	800458a <_svfiprintf_r+0x176>
 80045dc:	89ab      	ldrh	r3, [r5, #12]
 80045de:	065b      	lsls	r3, r3, #25
 80045e0:	f53f af2c 	bmi.w	800443c <_svfiprintf_r+0x28>
 80045e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e6:	b01d      	add	sp, #116	; 0x74
 80045e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	462a      	mov	r2, r5
 80045f2:	4638      	mov	r0, r7
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <_svfiprintf_r+0x1f8>)
 80045f6:	a904      	add	r1, sp, #16
 80045f8:	f000 f87c 	bl	80046f4 <_printf_i>
 80045fc:	e7eb      	b.n	80045d6 <_svfiprintf_r+0x1c2>
 80045fe:	bf00      	nop
 8004600:	08004bf8 	.word	0x08004bf8
 8004604:	08004c02 	.word	0x08004c02
 8004608:	00000000 	.word	0x00000000
 800460c:	0800435d 	.word	0x0800435d
 8004610:	08004bfe 	.word	0x08004bfe

08004614 <_printf_common>:
 8004614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	4616      	mov	r6, r2
 800461a:	4699      	mov	r9, r3
 800461c:	688a      	ldr	r2, [r1, #8]
 800461e:	690b      	ldr	r3, [r1, #16]
 8004620:	4607      	mov	r7, r0
 8004622:	4293      	cmp	r3, r2
 8004624:	bfb8      	it	lt
 8004626:	4613      	movlt	r3, r2
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462e:	460c      	mov	r4, r1
 8004630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004634:	b10a      	cbz	r2, 800463a <_printf_common+0x26>
 8004636:	3301      	adds	r3, #1
 8004638:	6033      	str	r3, [r6, #0]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	0699      	lsls	r1, r3, #26
 800463e:	bf42      	ittt	mi
 8004640:	6833      	ldrmi	r3, [r6, #0]
 8004642:	3302      	addmi	r3, #2
 8004644:	6033      	strmi	r3, [r6, #0]
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	f015 0506 	ands.w	r5, r5, #6
 800464c:	d106      	bne.n	800465c <_printf_common+0x48>
 800464e:	f104 0a19 	add.w	sl, r4, #25
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	6832      	ldr	r2, [r6, #0]
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	42ab      	cmp	r3, r5
 800465a:	dc28      	bgt.n	80046ae <_printf_common+0x9a>
 800465c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004660:	1e13      	subs	r3, r2, #0
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	bf18      	it	ne
 8004666:	2301      	movne	r3, #1
 8004668:	0692      	lsls	r2, r2, #26
 800466a:	d42d      	bmi.n	80046c8 <_printf_common+0xb4>
 800466c:	4649      	mov	r1, r9
 800466e:	4638      	mov	r0, r7
 8004670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d020      	beq.n	80046bc <_printf_common+0xa8>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	68e5      	ldr	r5, [r4, #12]
 800467e:	f003 0306 	and.w	r3, r3, #6
 8004682:	2b04      	cmp	r3, #4
 8004684:	bf18      	it	ne
 8004686:	2500      	movne	r5, #0
 8004688:	6832      	ldr	r2, [r6, #0]
 800468a:	f04f 0600 	mov.w	r6, #0
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	bf08      	it	eq
 8004692:	1aad      	subeq	r5, r5, r2
 8004694:	6922      	ldr	r2, [r4, #16]
 8004696:	bf08      	it	eq
 8004698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800469c:	4293      	cmp	r3, r2
 800469e:	bfc4      	itt	gt
 80046a0:	1a9b      	subgt	r3, r3, r2
 80046a2:	18ed      	addgt	r5, r5, r3
 80046a4:	341a      	adds	r4, #26
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d11a      	bne.n	80046e0 <_printf_common+0xcc>
 80046aa:	2000      	movs	r0, #0
 80046ac:	e008      	b.n	80046c0 <_printf_common+0xac>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4649      	mov	r1, r9
 80046b4:	4638      	mov	r0, r7
 80046b6:	47c0      	blx	r8
 80046b8:	3001      	adds	r0, #1
 80046ba:	d103      	bne.n	80046c4 <_printf_common+0xb0>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7c4      	b.n	8004652 <_printf_common+0x3e>
 80046c8:	2030      	movs	r0, #48	; 0x30
 80046ca:	18e1      	adds	r1, r4, r3
 80046cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d6:	4422      	add	r2, r4
 80046d8:	3302      	adds	r3, #2
 80046da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046de:	e7c5      	b.n	800466c <_printf_common+0x58>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4622      	mov	r2, r4
 80046e4:	4649      	mov	r1, r9
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c0      	blx	r8
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0e6      	beq.n	80046bc <_printf_common+0xa8>
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7d9      	b.n	80046a6 <_printf_common+0x92>
	...

080046f4 <_printf_i>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	7e27      	ldrb	r7, [r4, #24]
 80046fc:	4691      	mov	r9, r2
 80046fe:	2f78      	cmp	r7, #120	; 0x78
 8004700:	4680      	mov	r8, r0
 8004702:	469a      	mov	sl, r3
 8004704:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800470a:	d807      	bhi.n	800471c <_printf_i+0x28>
 800470c:	2f62      	cmp	r7, #98	; 0x62
 800470e:	d80a      	bhi.n	8004726 <_printf_i+0x32>
 8004710:	2f00      	cmp	r7, #0
 8004712:	f000 80d9 	beq.w	80048c8 <_printf_i+0x1d4>
 8004716:	2f58      	cmp	r7, #88	; 0x58
 8004718:	f000 80a4 	beq.w	8004864 <_printf_i+0x170>
 800471c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004724:	e03a      	b.n	800479c <_printf_i+0xa8>
 8004726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800472a:	2b15      	cmp	r3, #21
 800472c:	d8f6      	bhi.n	800471c <_printf_i+0x28>
 800472e:	a001      	add	r0, pc, #4	; (adr r0, 8004734 <_printf_i+0x40>)
 8004730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004734:	0800478d 	.word	0x0800478d
 8004738:	080047a1 	.word	0x080047a1
 800473c:	0800471d 	.word	0x0800471d
 8004740:	0800471d 	.word	0x0800471d
 8004744:	0800471d 	.word	0x0800471d
 8004748:	0800471d 	.word	0x0800471d
 800474c:	080047a1 	.word	0x080047a1
 8004750:	0800471d 	.word	0x0800471d
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	080048af 	.word	0x080048af
 8004764:	080047d1 	.word	0x080047d1
 8004768:	08004891 	.word	0x08004891
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800471d 	.word	0x0800471d
 8004774:	080048d1 	.word	0x080048d1
 8004778:	0800471d 	.word	0x0800471d
 800477c:	080047d1 	.word	0x080047d1
 8004780:	0800471d 	.word	0x0800471d
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004899 	.word	0x08004899
 800478c:	680b      	ldr	r3, [r1, #0]
 800478e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	600a      	str	r2, [r1, #0]
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e0a4      	b.n	80048ea <_printf_i+0x1f6>
 80047a0:	6825      	ldr	r5, [r4, #0]
 80047a2:	6808      	ldr	r0, [r1, #0]
 80047a4:	062e      	lsls	r6, r5, #24
 80047a6:	f100 0304 	add.w	r3, r0, #4
 80047aa:	d50a      	bpl.n	80047c2 <_printf_i+0xce>
 80047ac:	6805      	ldr	r5, [r0, #0]
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	da03      	bge.n	80047bc <_printf_i+0xc8>
 80047b4:	232d      	movs	r3, #45	; 0x2d
 80047b6:	426d      	negs	r5, r5
 80047b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047bc:	230a      	movs	r3, #10
 80047be:	485e      	ldr	r0, [pc, #376]	; (8004938 <_printf_i+0x244>)
 80047c0:	e019      	b.n	80047f6 <_printf_i+0x102>
 80047c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047c6:	6805      	ldr	r5, [r0, #0]
 80047c8:	600b      	str	r3, [r1, #0]
 80047ca:	bf18      	it	ne
 80047cc:	b22d      	sxthne	r5, r5
 80047ce:	e7ef      	b.n	80047b0 <_printf_i+0xbc>
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	1d18      	adds	r0, r3, #4
 80047d6:	6008      	str	r0, [r1, #0]
 80047d8:	0628      	lsls	r0, r5, #24
 80047da:	d501      	bpl.n	80047e0 <_printf_i+0xec>
 80047dc:	681d      	ldr	r5, [r3, #0]
 80047de:	e002      	b.n	80047e6 <_printf_i+0xf2>
 80047e0:	0669      	lsls	r1, r5, #25
 80047e2:	d5fb      	bpl.n	80047dc <_printf_i+0xe8>
 80047e4:	881d      	ldrh	r5, [r3, #0]
 80047e6:	2f6f      	cmp	r7, #111	; 0x6f
 80047e8:	bf0c      	ite	eq
 80047ea:	2308      	moveq	r3, #8
 80047ec:	230a      	movne	r3, #10
 80047ee:	4852      	ldr	r0, [pc, #328]	; (8004938 <_printf_i+0x244>)
 80047f0:	2100      	movs	r1, #0
 80047f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047f6:	6866      	ldr	r6, [r4, #4]
 80047f8:	2e00      	cmp	r6, #0
 80047fa:	bfa8      	it	ge
 80047fc:	6821      	ldrge	r1, [r4, #0]
 80047fe:	60a6      	str	r6, [r4, #8]
 8004800:	bfa4      	itt	ge
 8004802:	f021 0104 	bicge.w	r1, r1, #4
 8004806:	6021      	strge	r1, [r4, #0]
 8004808:	b90d      	cbnz	r5, 800480e <_printf_i+0x11a>
 800480a:	2e00      	cmp	r6, #0
 800480c:	d04d      	beq.n	80048aa <_printf_i+0x1b6>
 800480e:	4616      	mov	r6, r2
 8004810:	fbb5 f1f3 	udiv	r1, r5, r3
 8004814:	fb03 5711 	mls	r7, r3, r1, r5
 8004818:	5dc7      	ldrb	r7, [r0, r7]
 800481a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800481e:	462f      	mov	r7, r5
 8004820:	42bb      	cmp	r3, r7
 8004822:	460d      	mov	r5, r1
 8004824:	d9f4      	bls.n	8004810 <_printf_i+0x11c>
 8004826:	2b08      	cmp	r3, #8
 8004828:	d10b      	bne.n	8004842 <_printf_i+0x14e>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	07df      	lsls	r7, r3, #31
 800482e:	d508      	bpl.n	8004842 <_printf_i+0x14e>
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	6861      	ldr	r1, [r4, #4]
 8004834:	4299      	cmp	r1, r3
 8004836:	bfde      	ittt	le
 8004838:	2330      	movle	r3, #48	; 0x30
 800483a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800483e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004842:	1b92      	subs	r2, r2, r6
 8004844:	6122      	str	r2, [r4, #16]
 8004846:	464b      	mov	r3, r9
 8004848:	4621      	mov	r1, r4
 800484a:	4640      	mov	r0, r8
 800484c:	f8cd a000 	str.w	sl, [sp]
 8004850:	aa03      	add	r2, sp, #12
 8004852:	f7ff fedf 	bl	8004614 <_printf_common>
 8004856:	3001      	adds	r0, #1
 8004858:	d14c      	bne.n	80048f4 <_printf_i+0x200>
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	b004      	add	sp, #16
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004864:	4834      	ldr	r0, [pc, #208]	; (8004938 <_printf_i+0x244>)
 8004866:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800486a:	680e      	ldr	r6, [r1, #0]
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004872:	061f      	lsls	r7, r3, #24
 8004874:	600e      	str	r6, [r1, #0]
 8004876:	d514      	bpl.n	80048a2 <_printf_i+0x1ae>
 8004878:	07d9      	lsls	r1, r3, #31
 800487a:	bf44      	itt	mi
 800487c:	f043 0320 	orrmi.w	r3, r3, #32
 8004880:	6023      	strmi	r3, [r4, #0]
 8004882:	b91d      	cbnz	r5, 800488c <_printf_i+0x198>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	f023 0320 	bic.w	r3, r3, #32
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	2310      	movs	r3, #16
 800488e:	e7af      	b.n	80047f0 <_printf_i+0xfc>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	f043 0320 	orr.w	r3, r3, #32
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	2378      	movs	r3, #120	; 0x78
 800489a:	4828      	ldr	r0, [pc, #160]	; (800493c <_printf_i+0x248>)
 800489c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048a0:	e7e3      	b.n	800486a <_printf_i+0x176>
 80048a2:	065e      	lsls	r6, r3, #25
 80048a4:	bf48      	it	mi
 80048a6:	b2ad      	uxthmi	r5, r5
 80048a8:	e7e6      	b.n	8004878 <_printf_i+0x184>
 80048aa:	4616      	mov	r6, r2
 80048ac:	e7bb      	b.n	8004826 <_printf_i+0x132>
 80048ae:	680b      	ldr	r3, [r1, #0]
 80048b0:	6826      	ldr	r6, [r4, #0]
 80048b2:	1d1d      	adds	r5, r3, #4
 80048b4:	6960      	ldr	r0, [r4, #20]
 80048b6:	600d      	str	r5, [r1, #0]
 80048b8:	0635      	lsls	r5, r6, #24
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	d501      	bpl.n	80048c2 <_printf_i+0x1ce>
 80048be:	6018      	str	r0, [r3, #0]
 80048c0:	e002      	b.n	80048c8 <_printf_i+0x1d4>
 80048c2:	0671      	lsls	r1, r6, #25
 80048c4:	d5fb      	bpl.n	80048be <_printf_i+0x1ca>
 80048c6:	8018      	strh	r0, [r3, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	4616      	mov	r6, r2
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	e7ba      	b.n	8004846 <_printf_i+0x152>
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	600a      	str	r2, [r1, #0]
 80048d6:	681e      	ldr	r6, [r3, #0]
 80048d8:	2100      	movs	r1, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	6862      	ldr	r2, [r4, #4]
 80048de:	f000 f82f 	bl	8004940 <memchr>
 80048e2:	b108      	cbz	r0, 80048e8 <_printf_i+0x1f4>
 80048e4:	1b80      	subs	r0, r0, r6
 80048e6:	6060      	str	r0, [r4, #4]
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	2300      	movs	r3, #0
 80048ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f2:	e7a8      	b.n	8004846 <_printf_i+0x152>
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	47d0      	blx	sl
 80048fe:	3001      	adds	r0, #1
 8004900:	d0ab      	beq.n	800485a <_printf_i+0x166>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	079b      	lsls	r3, r3, #30
 8004906:	d413      	bmi.n	8004930 <_printf_i+0x23c>
 8004908:	68e0      	ldr	r0, [r4, #12]
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	4298      	cmp	r0, r3
 800490e:	bfb8      	it	lt
 8004910:	4618      	movlt	r0, r3
 8004912:	e7a4      	b.n	800485e <_printf_i+0x16a>
 8004914:	2301      	movs	r3, #1
 8004916:	4632      	mov	r2, r6
 8004918:	4649      	mov	r1, r9
 800491a:	4640      	mov	r0, r8
 800491c:	47d0      	blx	sl
 800491e:	3001      	adds	r0, #1
 8004920:	d09b      	beq.n	800485a <_printf_i+0x166>
 8004922:	3501      	adds	r5, #1
 8004924:	68e3      	ldr	r3, [r4, #12]
 8004926:	9903      	ldr	r1, [sp, #12]
 8004928:	1a5b      	subs	r3, r3, r1
 800492a:	42ab      	cmp	r3, r5
 800492c:	dcf2      	bgt.n	8004914 <_printf_i+0x220>
 800492e:	e7eb      	b.n	8004908 <_printf_i+0x214>
 8004930:	2500      	movs	r5, #0
 8004932:	f104 0619 	add.w	r6, r4, #25
 8004936:	e7f5      	b.n	8004924 <_printf_i+0x230>
 8004938:	08004c09 	.word	0x08004c09
 800493c:	08004c1a 	.word	0x08004c1a

08004940 <memchr>:
 8004940:	4603      	mov	r3, r0
 8004942:	b510      	push	{r4, lr}
 8004944:	b2c9      	uxtb	r1, r1
 8004946:	4402      	add	r2, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	4618      	mov	r0, r3
 800494c:	d101      	bne.n	8004952 <memchr+0x12>
 800494e:	2000      	movs	r0, #0
 8004950:	e003      	b.n	800495a <memchr+0x1a>
 8004952:	7804      	ldrb	r4, [r0, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	428c      	cmp	r4, r1
 8004958:	d1f6      	bne.n	8004948 <memchr+0x8>
 800495a:	bd10      	pop	{r4, pc}

0800495c <memcpy>:
 800495c:	440a      	add	r2, r1
 800495e:	4291      	cmp	r1, r2
 8004960:	f100 33ff 	add.w	r3, r0, #4294967295
 8004964:	d100      	bne.n	8004968 <memcpy+0xc>
 8004966:	4770      	bx	lr
 8004968:	b510      	push	{r4, lr}
 800496a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496e:	4291      	cmp	r1, r2
 8004970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004974:	d1f9      	bne.n	800496a <memcpy+0xe>
 8004976:	bd10      	pop	{r4, pc}

08004978 <memmove>:
 8004978:	4288      	cmp	r0, r1
 800497a:	b510      	push	{r4, lr}
 800497c:	eb01 0402 	add.w	r4, r1, r2
 8004980:	d902      	bls.n	8004988 <memmove+0x10>
 8004982:	4284      	cmp	r4, r0
 8004984:	4623      	mov	r3, r4
 8004986:	d807      	bhi.n	8004998 <memmove+0x20>
 8004988:	1e43      	subs	r3, r0, #1
 800498a:	42a1      	cmp	r1, r4
 800498c:	d008      	beq.n	80049a0 <memmove+0x28>
 800498e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004996:	e7f8      	b.n	800498a <memmove+0x12>
 8004998:	4601      	mov	r1, r0
 800499a:	4402      	add	r2, r0
 800499c:	428a      	cmp	r2, r1
 800499e:	d100      	bne.n	80049a2 <memmove+0x2a>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049aa:	e7f7      	b.n	800499c <memmove+0x24>

080049ac <_free_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4605      	mov	r5, r0
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d043      	beq.n	8004a3c <_free_r+0x90>
 80049b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b8:	1f0c      	subs	r4, r1, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfb8      	it	lt
 80049be:	18e4      	addlt	r4, r4, r3
 80049c0:	f000 f8d0 	bl	8004b64 <__malloc_lock>
 80049c4:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <_free_r+0x94>)
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	4610      	mov	r0, r2
 80049ca:	b933      	cbnz	r3, 80049da <_free_r+0x2e>
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	6014      	str	r4, [r2, #0]
 80049d0:	4628      	mov	r0, r5
 80049d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d6:	f000 b8cb 	b.w	8004b70 <__malloc_unlock>
 80049da:	42a3      	cmp	r3, r4
 80049dc:	d90a      	bls.n	80049f4 <_free_r+0x48>
 80049de:	6821      	ldr	r1, [r4, #0]
 80049e0:	1862      	adds	r2, r4, r1
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bf01      	itttt	eq
 80049e6:	681a      	ldreq	r2, [r3, #0]
 80049e8:	685b      	ldreq	r3, [r3, #4]
 80049ea:	1852      	addeq	r2, r2, r1
 80049ec:	6022      	streq	r2, [r4, #0]
 80049ee:	6063      	str	r3, [r4, #4]
 80049f0:	6004      	str	r4, [r0, #0]
 80049f2:	e7ed      	b.n	80049d0 <_free_r+0x24>
 80049f4:	461a      	mov	r2, r3
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	b10b      	cbz	r3, 80049fe <_free_r+0x52>
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	d9fa      	bls.n	80049f4 <_free_r+0x48>
 80049fe:	6811      	ldr	r1, [r2, #0]
 8004a00:	1850      	adds	r0, r2, r1
 8004a02:	42a0      	cmp	r0, r4
 8004a04:	d10b      	bne.n	8004a1e <_free_r+0x72>
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	4401      	add	r1, r0
 8004a0a:	1850      	adds	r0, r2, r1
 8004a0c:	4283      	cmp	r3, r0
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	d1de      	bne.n	80049d0 <_free_r+0x24>
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4401      	add	r1, r0
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	6053      	str	r3, [r2, #4]
 8004a1c:	e7d8      	b.n	80049d0 <_free_r+0x24>
 8004a1e:	d902      	bls.n	8004a26 <_free_r+0x7a>
 8004a20:	230c      	movs	r3, #12
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	e7d4      	b.n	80049d0 <_free_r+0x24>
 8004a26:	6820      	ldr	r0, [r4, #0]
 8004a28:	1821      	adds	r1, r4, r0
 8004a2a:	428b      	cmp	r3, r1
 8004a2c:	bf01      	itttt	eq
 8004a2e:	6819      	ldreq	r1, [r3, #0]
 8004a30:	685b      	ldreq	r3, [r3, #4]
 8004a32:	1809      	addeq	r1, r1, r0
 8004a34:	6021      	streq	r1, [r4, #0]
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	6054      	str	r4, [r2, #4]
 8004a3a:	e7c9      	b.n	80049d0 <_free_r+0x24>
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000118 	.word	0x20000118

08004a44 <_malloc_r>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	1ccd      	adds	r5, r1, #3
 8004a48:	f025 0503 	bic.w	r5, r5, #3
 8004a4c:	3508      	adds	r5, #8
 8004a4e:	2d0c      	cmp	r5, #12
 8004a50:	bf38      	it	cc
 8004a52:	250c      	movcc	r5, #12
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	4606      	mov	r6, r0
 8004a58:	db01      	blt.n	8004a5e <_malloc_r+0x1a>
 8004a5a:	42a9      	cmp	r1, r5
 8004a5c:	d903      	bls.n	8004a66 <_malloc_r+0x22>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	2000      	movs	r0, #0
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a66:	f000 f87d 	bl	8004b64 <__malloc_lock>
 8004a6a:	4921      	ldr	r1, [pc, #132]	; (8004af0 <_malloc_r+0xac>)
 8004a6c:	680a      	ldr	r2, [r1, #0]
 8004a6e:	4614      	mov	r4, r2
 8004a70:	b99c      	cbnz	r4, 8004a9a <_malloc_r+0x56>
 8004a72:	4f20      	ldr	r7, [pc, #128]	; (8004af4 <_malloc_r+0xb0>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	b923      	cbnz	r3, 8004a82 <_malloc_r+0x3e>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f000 f862 	bl	8004b44 <_sbrk_r>
 8004a80:	6038      	str	r0, [r7, #0]
 8004a82:	4629      	mov	r1, r5
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 f85d 	bl	8004b44 <_sbrk_r>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d123      	bne.n	8004ad6 <_malloc_r+0x92>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	4630      	mov	r0, r6
 8004a92:	6033      	str	r3, [r6, #0]
 8004a94:	f000 f86c 	bl	8004b70 <__malloc_unlock>
 8004a98:	e7e3      	b.n	8004a62 <_malloc_r+0x1e>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	1b5b      	subs	r3, r3, r5
 8004a9e:	d417      	bmi.n	8004ad0 <_malloc_r+0x8c>
 8004aa0:	2b0b      	cmp	r3, #11
 8004aa2:	d903      	bls.n	8004aac <_malloc_r+0x68>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	441c      	add	r4, r3
 8004aa8:	6025      	str	r5, [r4, #0]
 8004aaa:	e004      	b.n	8004ab6 <_malloc_r+0x72>
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	42a2      	cmp	r2, r4
 8004ab0:	bf0c      	ite	eq
 8004ab2:	600b      	streq	r3, [r1, #0]
 8004ab4:	6053      	strne	r3, [r2, #4]
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f85a 	bl	8004b70 <__malloc_unlock>
 8004abc:	f104 000b 	add.w	r0, r4, #11
 8004ac0:	1d23      	adds	r3, r4, #4
 8004ac2:	f020 0007 	bic.w	r0, r0, #7
 8004ac6:	1ac2      	subs	r2, r0, r3
 8004ac8:	d0cc      	beq.n	8004a64 <_malloc_r+0x20>
 8004aca:	1a1b      	subs	r3, r3, r0
 8004acc:	50a3      	str	r3, [r4, r2]
 8004ace:	e7c9      	b.n	8004a64 <_malloc_r+0x20>
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	6864      	ldr	r4, [r4, #4]
 8004ad4:	e7cc      	b.n	8004a70 <_malloc_r+0x2c>
 8004ad6:	1cc4      	adds	r4, r0, #3
 8004ad8:	f024 0403 	bic.w	r4, r4, #3
 8004adc:	42a0      	cmp	r0, r4
 8004ade:	d0e3      	beq.n	8004aa8 <_malloc_r+0x64>
 8004ae0:	1a21      	subs	r1, r4, r0
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f82e 	bl	8004b44 <_sbrk_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d1dd      	bne.n	8004aa8 <_malloc_r+0x64>
 8004aec:	e7cf      	b.n	8004a8e <_malloc_r+0x4a>
 8004aee:	bf00      	nop
 8004af0:	20000118 	.word	0x20000118
 8004af4:	2000011c 	.word	0x2000011c

08004af8 <_realloc_r>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	4607      	mov	r7, r0
 8004afc:	4614      	mov	r4, r2
 8004afe:	460e      	mov	r6, r1
 8004b00:	b921      	cbnz	r1, 8004b0c <_realloc_r+0x14>
 8004b02:	4611      	mov	r1, r2
 8004b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b08:	f7ff bf9c 	b.w	8004a44 <_malloc_r>
 8004b0c:	b922      	cbnz	r2, 8004b18 <_realloc_r+0x20>
 8004b0e:	f7ff ff4d 	bl	80049ac <_free_r>
 8004b12:	4625      	mov	r5, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b18:	f000 f830 	bl	8004b7c <_malloc_usable_size_r>
 8004b1c:	42a0      	cmp	r0, r4
 8004b1e:	d20f      	bcs.n	8004b40 <_realloc_r+0x48>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4638      	mov	r0, r7
 8004b24:	f7ff ff8e 	bl	8004a44 <_malloc_r>
 8004b28:	4605      	mov	r5, r0
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d0f2      	beq.n	8004b14 <_realloc_r+0x1c>
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4622      	mov	r2, r4
 8004b32:	f7ff ff13 	bl	800495c <memcpy>
 8004b36:	4631      	mov	r1, r6
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f7ff ff37 	bl	80049ac <_free_r>
 8004b3e:	e7e9      	b.n	8004b14 <_realloc_r+0x1c>
 8004b40:	4635      	mov	r5, r6
 8004b42:	e7e7      	b.n	8004b14 <_realloc_r+0x1c>

08004b44 <_sbrk_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	2300      	movs	r3, #0
 8004b48:	4d05      	ldr	r5, [pc, #20]	; (8004b60 <_sbrk_r+0x1c>)
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc fe8e 	bl	8001870 <_sbrk>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_sbrk_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_sbrk_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000258 	.word	0x20000258

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__malloc_lock+0x8>)
 8004b66:	f000 b811 	b.w	8004b8c <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000260 	.word	0x20000260

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f000 b80c 	b.w	8004b8e <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000260 	.word	0x20000260

08004b7c <_malloc_usable_size_r>:
 8004b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b80:	1f18      	subs	r0, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbc      	itt	lt
 8004b86:	580b      	ldrlt	r3, [r1, r0]
 8004b88:	18c0      	addlt	r0, r0, r3
 8004b8a:	4770      	bx	lr

08004b8c <__retarget_lock_acquire_recursive>:
 8004b8c:	4770      	bx	lr

08004b8e <__retarget_lock_release_recursive>:
 8004b8e:	4770      	bx	lr

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
